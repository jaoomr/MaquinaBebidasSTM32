
ProjetoFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007454  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  08007564  08007564  00017564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800792c  0800792c  00020294  2**0
                  CONTENTS
  4 .ARM          00000008  0800792c  0800792c  0001792c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007934  08007934  00020294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007934  08007934  00017934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007938  08007938  00017938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000294  20000000  0800793c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  20000298  08007bd0  00020298  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004cc  08007bd0  000204cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020294  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f52b  00000000  00000000  000202bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000254c  00000000  00000000  0002f7e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d20  00000000  00000000  00031d38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000be8  00000000  00000000  00032a58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019a44  00000000  00000000  00033640  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c5e8  00000000  00000000  0004d084  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e809  00000000  00000000  0005966c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e7e75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000443c  00000000  00000000  000e7ef0  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000024  00000000  00000000  000ec32c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000ec350  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000298 	.word	0x20000298
 800012c:	00000000 	.word	0x00000000
 8000130:	0800754c 	.word	0x0800754c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000029c 	.word	0x2000029c
 800014c:	0800754c 	.word	0x0800754c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002b2:	f1a4 0401 	sub.w	r4, r4, #1
 80002b6:	d1e9      	bne.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__aeabi_d2f>:
 8000910:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000914:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000918:	bf24      	itt	cs
 800091a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800091e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000922:	d90d      	bls.n	8000940 <__aeabi_d2f+0x30>
 8000924:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000928:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800092c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000930:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000934:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000938:	bf08      	it	eq
 800093a:	f020 0001 	biceq.w	r0, r0, #1
 800093e:	4770      	bx	lr
 8000940:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000944:	d121      	bne.n	800098a <__aeabi_d2f+0x7a>
 8000946:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800094a:	bfbc      	itt	lt
 800094c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000950:	4770      	bxlt	lr
 8000952:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000956:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800095a:	f1c2 0218 	rsb	r2, r2, #24
 800095e:	f1c2 0c20 	rsb	ip, r2, #32
 8000962:	fa10 f30c 	lsls.w	r3, r0, ip
 8000966:	fa20 f002 	lsr.w	r0, r0, r2
 800096a:	bf18      	it	ne
 800096c:	f040 0001 	orrne.w	r0, r0, #1
 8000970:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000974:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000978:	fa03 fc0c 	lsl.w	ip, r3, ip
 800097c:	ea40 000c 	orr.w	r0, r0, ip
 8000980:	fa23 f302 	lsr.w	r3, r3, r2
 8000984:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000988:	e7cc      	b.n	8000924 <__aeabi_d2f+0x14>
 800098a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800098e:	d107      	bne.n	80009a0 <__aeabi_d2f+0x90>
 8000990:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000994:	bf1e      	ittt	ne
 8000996:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800099a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800099e:	4770      	bxne	lr
 80009a0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_frsub>:
 80009b0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009b4:	e002      	b.n	80009bc <__addsf3>
 80009b6:	bf00      	nop

080009b8 <__aeabi_fsub>:
 80009b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009bc <__addsf3>:
 80009bc:	0042      	lsls	r2, r0, #1
 80009be:	bf1f      	itttt	ne
 80009c0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009c4:	ea92 0f03 	teqne	r2, r3
 80009c8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009cc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009d0:	d06a      	beq.n	8000aa8 <__addsf3+0xec>
 80009d2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009d6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009da:	bfc1      	itttt	gt
 80009dc:	18d2      	addgt	r2, r2, r3
 80009de:	4041      	eorgt	r1, r0
 80009e0:	4048      	eorgt	r0, r1
 80009e2:	4041      	eorgt	r1, r0
 80009e4:	bfb8      	it	lt
 80009e6:	425b      	neglt	r3, r3
 80009e8:	2b19      	cmp	r3, #25
 80009ea:	bf88      	it	hi
 80009ec:	4770      	bxhi	lr
 80009ee:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009f2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009fa:	bf18      	it	ne
 80009fc:	4240      	negne	r0, r0
 80009fe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a02:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a06:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a0a:	bf18      	it	ne
 8000a0c:	4249      	negne	r1, r1
 8000a0e:	ea92 0f03 	teq	r2, r3
 8000a12:	d03f      	beq.n	8000a94 <__addsf3+0xd8>
 8000a14:	f1a2 0201 	sub.w	r2, r2, #1
 8000a18:	fa41 fc03 	asr.w	ip, r1, r3
 8000a1c:	eb10 000c 	adds.w	r0, r0, ip
 8000a20:	f1c3 0320 	rsb	r3, r3, #32
 8000a24:	fa01 f103 	lsl.w	r1, r1, r3
 8000a28:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a2c:	d502      	bpl.n	8000a34 <__addsf3+0x78>
 8000a2e:	4249      	negs	r1, r1
 8000a30:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a34:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a38:	d313      	bcc.n	8000a62 <__addsf3+0xa6>
 8000a3a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a3e:	d306      	bcc.n	8000a4e <__addsf3+0x92>
 8000a40:	0840      	lsrs	r0, r0, #1
 8000a42:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a46:	f102 0201 	add.w	r2, r2, #1
 8000a4a:	2afe      	cmp	r2, #254	; 0xfe
 8000a4c:	d251      	bcs.n	8000af2 <__addsf3+0x136>
 8000a4e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a56:	bf08      	it	eq
 8000a58:	f020 0001 	biceq.w	r0, r0, #1
 8000a5c:	ea40 0003 	orr.w	r0, r0, r3
 8000a60:	4770      	bx	lr
 8000a62:	0049      	lsls	r1, r1, #1
 8000a64:	eb40 0000 	adc.w	r0, r0, r0
 8000a68:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a6c:	f1a2 0201 	sub.w	r2, r2, #1
 8000a70:	d1ed      	bne.n	8000a4e <__addsf3+0x92>
 8000a72:	fab0 fc80 	clz	ip, r0
 8000a76:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a7a:	ebb2 020c 	subs.w	r2, r2, ip
 8000a7e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a82:	bfaa      	itet	ge
 8000a84:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a88:	4252      	neglt	r2, r2
 8000a8a:	4318      	orrge	r0, r3
 8000a8c:	bfbc      	itt	lt
 8000a8e:	40d0      	lsrlt	r0, r2
 8000a90:	4318      	orrlt	r0, r3
 8000a92:	4770      	bx	lr
 8000a94:	f092 0f00 	teq	r2, #0
 8000a98:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a9c:	bf06      	itte	eq
 8000a9e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000aa2:	3201      	addeq	r2, #1
 8000aa4:	3b01      	subne	r3, #1
 8000aa6:	e7b5      	b.n	8000a14 <__addsf3+0x58>
 8000aa8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000aac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ab6:	d021      	beq.n	8000afc <__addsf3+0x140>
 8000ab8:	ea92 0f03 	teq	r2, r3
 8000abc:	d004      	beq.n	8000ac8 <__addsf3+0x10c>
 8000abe:	f092 0f00 	teq	r2, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	4608      	moveq	r0, r1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea90 0f01 	teq	r0, r1
 8000acc:	bf1c      	itt	ne
 8000ace:	2000      	movne	r0, #0
 8000ad0:	4770      	bxne	lr
 8000ad2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ad6:	d104      	bne.n	8000ae2 <__addsf3+0x126>
 8000ad8:	0040      	lsls	r0, r0, #1
 8000ada:	bf28      	it	cs
 8000adc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ae0:	4770      	bx	lr
 8000ae2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ae6:	bf3c      	itt	cc
 8000ae8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000aec:	4770      	bxcc	lr
 8000aee:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000af2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000af6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000afa:	4770      	bx	lr
 8000afc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b00:	bf16      	itet	ne
 8000b02:	4608      	movne	r0, r1
 8000b04:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b08:	4601      	movne	r1, r0
 8000b0a:	0242      	lsls	r2, r0, #9
 8000b0c:	bf06      	itte	eq
 8000b0e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b12:	ea90 0f01 	teqeq	r0, r1
 8000b16:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b1a:	4770      	bx	lr

08000b1c <__aeabi_ui2f>:
 8000b1c:	f04f 0300 	mov.w	r3, #0
 8000b20:	e004      	b.n	8000b2c <__aeabi_i2f+0x8>
 8000b22:	bf00      	nop

08000b24 <__aeabi_i2f>:
 8000b24:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b28:	bf48      	it	mi
 8000b2a:	4240      	negmi	r0, r0
 8000b2c:	ea5f 0c00 	movs.w	ip, r0
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b38:	4601      	mov	r1, r0
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	e01c      	b.n	8000b7a <__aeabi_l2f+0x2a>

08000b40 <__aeabi_ul2f>:
 8000b40:	ea50 0201 	orrs.w	r2, r0, r1
 8000b44:	bf08      	it	eq
 8000b46:	4770      	bxeq	lr
 8000b48:	f04f 0300 	mov.w	r3, #0
 8000b4c:	e00a      	b.n	8000b64 <__aeabi_l2f+0x14>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_l2f>:
 8000b50:	ea50 0201 	orrs.w	r2, r0, r1
 8000b54:	bf08      	it	eq
 8000b56:	4770      	bxeq	lr
 8000b58:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b5c:	d502      	bpl.n	8000b64 <__aeabi_l2f+0x14>
 8000b5e:	4240      	negs	r0, r0
 8000b60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b64:	ea5f 0c01 	movs.w	ip, r1
 8000b68:	bf02      	ittt	eq
 8000b6a:	4684      	moveq	ip, r0
 8000b6c:	4601      	moveq	r1, r0
 8000b6e:	2000      	moveq	r0, #0
 8000b70:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b74:	bf08      	it	eq
 8000b76:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b7a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b7e:	fabc f28c 	clz	r2, ip
 8000b82:	3a08      	subs	r2, #8
 8000b84:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b88:	db10      	blt.n	8000bac <__aeabi_l2f+0x5c>
 8000b8a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b8e:	4463      	add	r3, ip
 8000b90:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b94:	f1c2 0220 	rsb	r2, r2, #32
 8000b98:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b9c:	fa20 f202 	lsr.w	r2, r0, r2
 8000ba0:	eb43 0002 	adc.w	r0, r3, r2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f102 0220 	add.w	r2, r2, #32
 8000bb0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bb4:	f1c2 0220 	rsb	r2, r2, #32
 8000bb8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bbc:	fa21 f202 	lsr.w	r2, r1, r2
 8000bc0:	eb43 0002 	adc.w	r0, r3, r2
 8000bc4:	bf08      	it	eq
 8000bc6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_fmul>:
 8000bcc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bd0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bd4:	bf1e      	ittt	ne
 8000bd6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bda:	ea92 0f0c 	teqne	r2, ip
 8000bde:	ea93 0f0c 	teqne	r3, ip
 8000be2:	d06f      	beq.n	8000cc4 <__aeabi_fmul+0xf8>
 8000be4:	441a      	add	r2, r3
 8000be6:	ea80 0c01 	eor.w	ip, r0, r1
 8000bea:	0240      	lsls	r0, r0, #9
 8000bec:	bf18      	it	ne
 8000bee:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bf2:	d01e      	beq.n	8000c32 <__aeabi_fmul+0x66>
 8000bf4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bf8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bfc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c00:	fba0 3101 	umull	r3, r1, r0, r1
 8000c04:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c08:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c0c:	bf3e      	ittt	cc
 8000c0e:	0049      	lslcc	r1, r1, #1
 8000c10:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c14:	005b      	lslcc	r3, r3, #1
 8000c16:	ea40 0001 	orr.w	r0, r0, r1
 8000c1a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c1e:	2afd      	cmp	r2, #253	; 0xfd
 8000c20:	d81d      	bhi.n	8000c5e <__aeabi_fmul+0x92>
 8000c22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c26:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c2a:	bf08      	it	eq
 8000c2c:	f020 0001 	biceq.w	r0, r0, #1
 8000c30:	4770      	bx	lr
 8000c32:	f090 0f00 	teq	r0, #0
 8000c36:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c3a:	bf08      	it	eq
 8000c3c:	0249      	lsleq	r1, r1, #9
 8000c3e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c42:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c46:	3a7f      	subs	r2, #127	; 0x7f
 8000c48:	bfc2      	ittt	gt
 8000c4a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c4e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c52:	4770      	bxgt	lr
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	3a01      	subs	r2, #1
 8000c5e:	dc5d      	bgt.n	8000d1c <__aeabi_fmul+0x150>
 8000c60:	f112 0f19 	cmn.w	r2, #25
 8000c64:	bfdc      	itt	le
 8000c66:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c6a:	4770      	bxle	lr
 8000c6c:	f1c2 0200 	rsb	r2, r2, #0
 8000c70:	0041      	lsls	r1, r0, #1
 8000c72:	fa21 f102 	lsr.w	r1, r1, r2
 8000c76:	f1c2 0220 	rsb	r2, r2, #32
 8000c7a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c7e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c82:	f140 0000 	adc.w	r0, r0, #0
 8000c86:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c8a:	bf08      	it	eq
 8000c8c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c90:	4770      	bx	lr
 8000c92:	f092 0f00 	teq	r2, #0
 8000c96:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c9a:	bf02      	ittt	eq
 8000c9c:	0040      	lsleq	r0, r0, #1
 8000c9e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ca2:	3a01      	subeq	r2, #1
 8000ca4:	d0f9      	beq.n	8000c9a <__aeabi_fmul+0xce>
 8000ca6:	ea40 000c 	orr.w	r0, r0, ip
 8000caa:	f093 0f00 	teq	r3, #0
 8000cae:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cb2:	bf02      	ittt	eq
 8000cb4:	0049      	lsleq	r1, r1, #1
 8000cb6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000cba:	3b01      	subeq	r3, #1
 8000cbc:	d0f9      	beq.n	8000cb2 <__aeabi_fmul+0xe6>
 8000cbe:	ea41 010c 	orr.w	r1, r1, ip
 8000cc2:	e78f      	b.n	8000be4 <__aeabi_fmul+0x18>
 8000cc4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cc8:	ea92 0f0c 	teq	r2, ip
 8000ccc:	bf18      	it	ne
 8000cce:	ea93 0f0c 	teqne	r3, ip
 8000cd2:	d00a      	beq.n	8000cea <__aeabi_fmul+0x11e>
 8000cd4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cd8:	bf18      	it	ne
 8000cda:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cde:	d1d8      	bne.n	8000c92 <__aeabi_fmul+0xc6>
 8000ce0:	ea80 0001 	eor.w	r0, r0, r1
 8000ce4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ce8:	4770      	bx	lr
 8000cea:	f090 0f00 	teq	r0, #0
 8000cee:	bf17      	itett	ne
 8000cf0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cf4:	4608      	moveq	r0, r1
 8000cf6:	f091 0f00 	teqne	r1, #0
 8000cfa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cfe:	d014      	beq.n	8000d2a <__aeabi_fmul+0x15e>
 8000d00:	ea92 0f0c 	teq	r2, ip
 8000d04:	d101      	bne.n	8000d0a <__aeabi_fmul+0x13e>
 8000d06:	0242      	lsls	r2, r0, #9
 8000d08:	d10f      	bne.n	8000d2a <__aeabi_fmul+0x15e>
 8000d0a:	ea93 0f0c 	teq	r3, ip
 8000d0e:	d103      	bne.n	8000d18 <__aeabi_fmul+0x14c>
 8000d10:	024b      	lsls	r3, r1, #9
 8000d12:	bf18      	it	ne
 8000d14:	4608      	movne	r0, r1
 8000d16:	d108      	bne.n	8000d2a <__aeabi_fmul+0x15e>
 8000d18:	ea80 0001 	eor.w	r0, r0, r1
 8000d1c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d28:	4770      	bx	lr
 8000d2a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d2e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fdiv>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d069      	beq.n	8000e20 <__aeabi_fdiv+0xec>
 8000d4c:	eba2 0203 	sub.w	r2, r2, r3
 8000d50:	ea80 0c01 	eor.w	ip, r0, r1
 8000d54:	0249      	lsls	r1, r1, #9
 8000d56:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d5a:	d037      	beq.n	8000dcc <__aeabi_fdiv+0x98>
 8000d5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d60:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d64:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d68:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d6c:	428b      	cmp	r3, r1
 8000d6e:	bf38      	it	cc
 8000d70:	005b      	lslcc	r3, r3, #1
 8000d72:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d76:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	bf24      	itt	cs
 8000d7e:	1a5b      	subcs	r3, r3, r1
 8000d80:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d84:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d88:	bf24      	itt	cs
 8000d8a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d8e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d92:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d96:	bf24      	itt	cs
 8000d98:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d9c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000da0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000da4:	bf24      	itt	cs
 8000da6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000daa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dae:	011b      	lsls	r3, r3, #4
 8000db0:	bf18      	it	ne
 8000db2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000db6:	d1e0      	bne.n	8000d7a <__aeabi_fdiv+0x46>
 8000db8:	2afd      	cmp	r2, #253	; 0xfd
 8000dba:	f63f af50 	bhi.w	8000c5e <__aeabi_fmul+0x92>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dc4:	bf08      	it	eq
 8000dc6:	f020 0001 	biceq.w	r0, r0, #1
 8000dca:	4770      	bx	lr
 8000dcc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dd0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dd4:	327f      	adds	r2, #127	; 0x7f
 8000dd6:	bfc2      	ittt	gt
 8000dd8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ddc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000de0:	4770      	bxgt	lr
 8000de2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de6:	f04f 0300 	mov.w	r3, #0
 8000dea:	3a01      	subs	r2, #1
 8000dec:	e737      	b.n	8000c5e <__aeabi_fmul+0x92>
 8000dee:	f092 0f00 	teq	r2, #0
 8000df2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000df6:	bf02      	ittt	eq
 8000df8:	0040      	lsleq	r0, r0, #1
 8000dfa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dfe:	3a01      	subeq	r2, #1
 8000e00:	d0f9      	beq.n	8000df6 <__aeabi_fdiv+0xc2>
 8000e02:	ea40 000c 	orr.w	r0, r0, ip
 8000e06:	f093 0f00 	teq	r3, #0
 8000e0a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e0e:	bf02      	ittt	eq
 8000e10:	0049      	lsleq	r1, r1, #1
 8000e12:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e16:	3b01      	subeq	r3, #1
 8000e18:	d0f9      	beq.n	8000e0e <__aeabi_fdiv+0xda>
 8000e1a:	ea41 010c 	orr.w	r1, r1, ip
 8000e1e:	e795      	b.n	8000d4c <__aeabi_fdiv+0x18>
 8000e20:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e24:	ea92 0f0c 	teq	r2, ip
 8000e28:	d108      	bne.n	8000e3c <__aeabi_fdiv+0x108>
 8000e2a:	0242      	lsls	r2, r0, #9
 8000e2c:	f47f af7d 	bne.w	8000d2a <__aeabi_fmul+0x15e>
 8000e30:	ea93 0f0c 	teq	r3, ip
 8000e34:	f47f af70 	bne.w	8000d18 <__aeabi_fmul+0x14c>
 8000e38:	4608      	mov	r0, r1
 8000e3a:	e776      	b.n	8000d2a <__aeabi_fmul+0x15e>
 8000e3c:	ea93 0f0c 	teq	r3, ip
 8000e40:	d104      	bne.n	8000e4c <__aeabi_fdiv+0x118>
 8000e42:	024b      	lsls	r3, r1, #9
 8000e44:	f43f af4c 	beq.w	8000ce0 <__aeabi_fmul+0x114>
 8000e48:	4608      	mov	r0, r1
 8000e4a:	e76e      	b.n	8000d2a <__aeabi_fmul+0x15e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1ca      	bne.n	8000dee <__aeabi_fdiv+0xba>
 8000e58:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e5c:	f47f af5c 	bne.w	8000d18 <__aeabi_fmul+0x14c>
 8000e60:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e64:	f47f af3c 	bne.w	8000ce0 <__aeabi_fmul+0x114>
 8000e68:	e75f      	b.n	8000d2a <__aeabi_fmul+0x15e>
 8000e6a:	bf00      	nop

08000e6c <__gesf2>:
 8000e6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000e70:	e006      	b.n	8000e80 <__cmpsf2+0x4>
 8000e72:	bf00      	nop

08000e74 <__lesf2>:
 8000e74:	f04f 0c01 	mov.w	ip, #1
 8000e78:	e002      	b.n	8000e80 <__cmpsf2+0x4>
 8000e7a:	bf00      	nop

08000e7c <__cmpsf2>:
 8000e7c:	f04f 0c01 	mov.w	ip, #1
 8000e80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e84:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e90:	bf18      	it	ne
 8000e92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e96:	d011      	beq.n	8000ebc <__cmpsf2+0x40>
 8000e98:	b001      	add	sp, #4
 8000e9a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e9e:	bf18      	it	ne
 8000ea0:	ea90 0f01 	teqne	r0, r1
 8000ea4:	bf58      	it	pl
 8000ea6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000eaa:	bf88      	it	hi
 8000eac:	17c8      	asrhi	r0, r1, #31
 8000eae:	bf38      	it	cc
 8000eb0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000eb4:	bf18      	it	ne
 8000eb6:	f040 0001 	orrne.w	r0, r0, #1
 8000eba:	4770      	bx	lr
 8000ebc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ec0:	d102      	bne.n	8000ec8 <__cmpsf2+0x4c>
 8000ec2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ec6:	d105      	bne.n	8000ed4 <__cmpsf2+0x58>
 8000ec8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ecc:	d1e4      	bne.n	8000e98 <__cmpsf2+0x1c>
 8000ece:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ed2:	d0e1      	beq.n	8000e98 <__cmpsf2+0x1c>
 8000ed4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <__aeabi_cfrcmple>:
 8000edc:	4684      	mov	ip, r0
 8000ede:	4608      	mov	r0, r1
 8000ee0:	4661      	mov	r1, ip
 8000ee2:	e7ff      	b.n	8000ee4 <__aeabi_cfcmpeq>

08000ee4 <__aeabi_cfcmpeq>:
 8000ee4:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ee6:	f7ff ffc9 	bl	8000e7c <__cmpsf2>
 8000eea:	2800      	cmp	r0, #0
 8000eec:	bf48      	it	mi
 8000eee:	f110 0f00 	cmnmi.w	r0, #0
 8000ef2:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ef4 <__aeabi_fcmpeq>:
 8000ef4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef8:	f7ff fff4 	bl	8000ee4 <__aeabi_cfcmpeq>
 8000efc:	bf0c      	ite	eq
 8000efe:	2001      	moveq	r0, #1
 8000f00:	2000      	movne	r0, #0
 8000f02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f06:	bf00      	nop

08000f08 <__aeabi_fcmplt>:
 8000f08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f0c:	f7ff ffea 	bl	8000ee4 <__aeabi_cfcmpeq>
 8000f10:	bf34      	ite	cc
 8000f12:	2001      	movcc	r0, #1
 8000f14:	2000      	movcs	r0, #0
 8000f16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1a:	bf00      	nop

08000f1c <__aeabi_fcmple>:
 8000f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f20:	f7ff ffe0 	bl	8000ee4 <__aeabi_cfcmpeq>
 8000f24:	bf94      	ite	ls
 8000f26:	2001      	movls	r0, #1
 8000f28:	2000      	movhi	r0, #0
 8000f2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2e:	bf00      	nop

08000f30 <__aeabi_fcmpge>:
 8000f30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f34:	f7ff ffd2 	bl	8000edc <__aeabi_cfrcmple>
 8000f38:	bf94      	ite	ls
 8000f3a:	2001      	movls	r0, #1
 8000f3c:	2000      	movhi	r0, #0
 8000f3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f42:	bf00      	nop

08000f44 <__aeabi_fcmpgt>:
 8000f44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f48:	f7ff ffc8 	bl	8000edc <__aeabi_cfrcmple>
 8000f4c:	bf34      	ite	cc
 8000f4e:	2001      	movcc	r0, #1
 8000f50:	2000      	movcs	r0, #0
 8000f52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f56:	bf00      	nop

08000f58 <__aeabi_f2iz>:
 8000f58:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f5c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f60:	d30f      	bcc.n	8000f82 <__aeabi_f2iz+0x2a>
 8000f62:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f66:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f6a:	d90d      	bls.n	8000f88 <__aeabi_f2iz+0x30>
 8000f6c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f74:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f78:	fa23 f002 	lsr.w	r0, r3, r2
 8000f7c:	bf18      	it	ne
 8000f7e:	4240      	negne	r0, r0
 8000f80:	4770      	bx	lr
 8000f82:	f04f 0000 	mov.w	r0, #0
 8000f86:	4770      	bx	lr
 8000f88:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f8c:	d101      	bne.n	8000f92 <__aeabi_f2iz+0x3a>
 8000f8e:	0242      	lsls	r2, r0, #9
 8000f90:	d105      	bne.n	8000f9e <__aeabi_f2iz+0x46>
 8000f92:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f96:	bf08      	it	eq
 8000f98:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f9c:	4770      	bx	lr
 8000f9e:	f04f 0000 	mov.w	r0, #0
 8000fa2:	4770      	bx	lr

08000fa4 <__aeabi_f2uiz>:
 8000fa4:	0042      	lsls	r2, r0, #1
 8000fa6:	d20e      	bcs.n	8000fc6 <__aeabi_f2uiz+0x22>
 8000fa8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fac:	d30b      	bcc.n	8000fc6 <__aeabi_f2uiz+0x22>
 8000fae:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fb2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fb6:	d409      	bmi.n	8000fcc <__aeabi_f2uiz+0x28>
 8000fb8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fc0:	fa23 f002 	lsr.w	r0, r3, r2
 8000fc4:	4770      	bx	lr
 8000fc6:	f04f 0000 	mov.w	r0, #0
 8000fca:	4770      	bx	lr
 8000fcc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fd0:	d101      	bne.n	8000fd6 <__aeabi_f2uiz+0x32>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	d102      	bne.n	8000fdc <__aeabi_f2uiz+0x38>
 8000fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8000fda:	4770      	bx	lr
 8000fdc:	f04f 0000 	mov.w	r0, #0
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_ldivmod>:
 8000fe4:	b97b      	cbnz	r3, 8001006 <__aeabi_ldivmod+0x22>
 8000fe6:	b972      	cbnz	r2, 8001006 <__aeabi_ldivmod+0x22>
 8000fe8:	2900      	cmp	r1, #0
 8000fea:	bfbe      	ittt	lt
 8000fec:	2000      	movlt	r0, #0
 8000fee:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ff2:	e006      	blt.n	8001002 <__aeabi_ldivmod+0x1e>
 8000ff4:	bf08      	it	eq
 8000ff6:	2800      	cmpeq	r0, #0
 8000ff8:	bf1c      	itt	ne
 8000ffa:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ffe:	f04f 30ff 	movne.w	r0, #4294967295
 8001002:	f000 b9a7 	b.w	8001354 <__aeabi_idiv0>
 8001006:	f1ad 0c08 	sub.w	ip, sp, #8
 800100a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800100e:	2900      	cmp	r1, #0
 8001010:	db09      	blt.n	8001026 <__aeabi_ldivmod+0x42>
 8001012:	2b00      	cmp	r3, #0
 8001014:	db1a      	blt.n	800104c <__aeabi_ldivmod+0x68>
 8001016:	f000 f835 	bl	8001084 <__udivmoddi4>
 800101a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800101e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001022:	b004      	add	sp, #16
 8001024:	4770      	bx	lr
 8001026:	4240      	negs	r0, r0
 8001028:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800102c:	2b00      	cmp	r3, #0
 800102e:	db1b      	blt.n	8001068 <__aeabi_ldivmod+0x84>
 8001030:	f000 f828 	bl	8001084 <__udivmoddi4>
 8001034:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001038:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800103c:	b004      	add	sp, #16
 800103e:	4240      	negs	r0, r0
 8001040:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001044:	4252      	negs	r2, r2
 8001046:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800104a:	4770      	bx	lr
 800104c:	4252      	negs	r2, r2
 800104e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001052:	f000 f817 	bl	8001084 <__udivmoddi4>
 8001056:	f8dd e004 	ldr.w	lr, [sp, #4]
 800105a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800105e:	b004      	add	sp, #16
 8001060:	4240      	negs	r0, r0
 8001062:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001066:	4770      	bx	lr
 8001068:	4252      	negs	r2, r2
 800106a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800106e:	f000 f809 	bl	8001084 <__udivmoddi4>
 8001072:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001076:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800107a:	b004      	add	sp, #16
 800107c:	4252      	negs	r2, r2
 800107e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001082:	4770      	bx	lr

08001084 <__udivmoddi4>:
 8001084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001088:	468c      	mov	ip, r1
 800108a:	4604      	mov	r4, r0
 800108c:	9e08      	ldr	r6, [sp, #32]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d14b      	bne.n	800112a <__udivmoddi4+0xa6>
 8001092:	428a      	cmp	r2, r1
 8001094:	4615      	mov	r5, r2
 8001096:	d967      	bls.n	8001168 <__udivmoddi4+0xe4>
 8001098:	fab2 f282 	clz	r2, r2
 800109c:	b14a      	cbz	r2, 80010b2 <__udivmoddi4+0x2e>
 800109e:	f1c2 0720 	rsb	r7, r2, #32
 80010a2:	fa01 f302 	lsl.w	r3, r1, r2
 80010a6:	fa20 f707 	lsr.w	r7, r0, r7
 80010aa:	4095      	lsls	r5, r2
 80010ac:	ea47 0c03 	orr.w	ip, r7, r3
 80010b0:	4094      	lsls	r4, r2
 80010b2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80010b6:	fbbc f7fe 	udiv	r7, ip, lr
 80010ba:	fa1f f885 	uxth.w	r8, r5
 80010be:	fb0e c317 	mls	r3, lr, r7, ip
 80010c2:	fb07 f908 	mul.w	r9, r7, r8
 80010c6:	0c21      	lsrs	r1, r4, #16
 80010c8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80010cc:	4599      	cmp	r9, r3
 80010ce:	d909      	bls.n	80010e4 <__udivmoddi4+0x60>
 80010d0:	18eb      	adds	r3, r5, r3
 80010d2:	f107 31ff 	add.w	r1, r7, #4294967295
 80010d6:	f080 811c 	bcs.w	8001312 <__udivmoddi4+0x28e>
 80010da:	4599      	cmp	r9, r3
 80010dc:	f240 8119 	bls.w	8001312 <__udivmoddi4+0x28e>
 80010e0:	3f02      	subs	r7, #2
 80010e2:	442b      	add	r3, r5
 80010e4:	eba3 0309 	sub.w	r3, r3, r9
 80010e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80010ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80010f0:	fb00 f108 	mul.w	r1, r0, r8
 80010f4:	b2a4      	uxth	r4, r4
 80010f6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80010fa:	42a1      	cmp	r1, r4
 80010fc:	d909      	bls.n	8001112 <__udivmoddi4+0x8e>
 80010fe:	192c      	adds	r4, r5, r4
 8001100:	f100 33ff 	add.w	r3, r0, #4294967295
 8001104:	f080 8107 	bcs.w	8001316 <__udivmoddi4+0x292>
 8001108:	42a1      	cmp	r1, r4
 800110a:	f240 8104 	bls.w	8001316 <__udivmoddi4+0x292>
 800110e:	3802      	subs	r0, #2
 8001110:	442c      	add	r4, r5
 8001112:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001116:	2700      	movs	r7, #0
 8001118:	1a64      	subs	r4, r4, r1
 800111a:	b11e      	cbz	r6, 8001124 <__udivmoddi4+0xa0>
 800111c:	2300      	movs	r3, #0
 800111e:	40d4      	lsrs	r4, r2
 8001120:	e9c6 4300 	strd	r4, r3, [r6]
 8001124:	4639      	mov	r1, r7
 8001126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800112a:	428b      	cmp	r3, r1
 800112c:	d909      	bls.n	8001142 <__udivmoddi4+0xbe>
 800112e:	2e00      	cmp	r6, #0
 8001130:	f000 80ec 	beq.w	800130c <__udivmoddi4+0x288>
 8001134:	2700      	movs	r7, #0
 8001136:	e9c6 0100 	strd	r0, r1, [r6]
 800113a:	4638      	mov	r0, r7
 800113c:	4639      	mov	r1, r7
 800113e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001142:	fab3 f783 	clz	r7, r3
 8001146:	2f00      	cmp	r7, #0
 8001148:	d148      	bne.n	80011dc <__udivmoddi4+0x158>
 800114a:	428b      	cmp	r3, r1
 800114c:	d302      	bcc.n	8001154 <__udivmoddi4+0xd0>
 800114e:	4282      	cmp	r2, r0
 8001150:	f200 80fb 	bhi.w	800134a <__udivmoddi4+0x2c6>
 8001154:	1a84      	subs	r4, r0, r2
 8001156:	eb61 0303 	sbc.w	r3, r1, r3
 800115a:	2001      	movs	r0, #1
 800115c:	469c      	mov	ip, r3
 800115e:	2e00      	cmp	r6, #0
 8001160:	d0e0      	beq.n	8001124 <__udivmoddi4+0xa0>
 8001162:	e9c6 4c00 	strd	r4, ip, [r6]
 8001166:	e7dd      	b.n	8001124 <__udivmoddi4+0xa0>
 8001168:	b902      	cbnz	r2, 800116c <__udivmoddi4+0xe8>
 800116a:	deff      	udf	#255	; 0xff
 800116c:	fab2 f282 	clz	r2, r2
 8001170:	2a00      	cmp	r2, #0
 8001172:	f040 808f 	bne.w	8001294 <__udivmoddi4+0x210>
 8001176:	2701      	movs	r7, #1
 8001178:	1b49      	subs	r1, r1, r5
 800117a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800117e:	fa1f f985 	uxth.w	r9, r5
 8001182:	fbb1 fef8 	udiv	lr, r1, r8
 8001186:	fb08 111e 	mls	r1, r8, lr, r1
 800118a:	fb09 f00e 	mul.w	r0, r9, lr
 800118e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8001192:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8001196:	4298      	cmp	r0, r3
 8001198:	d907      	bls.n	80011aa <__udivmoddi4+0x126>
 800119a:	18eb      	adds	r3, r5, r3
 800119c:	f10e 31ff 	add.w	r1, lr, #4294967295
 80011a0:	d202      	bcs.n	80011a8 <__udivmoddi4+0x124>
 80011a2:	4298      	cmp	r0, r3
 80011a4:	f200 80cd 	bhi.w	8001342 <__udivmoddi4+0x2be>
 80011a8:	468e      	mov	lr, r1
 80011aa:	1a1b      	subs	r3, r3, r0
 80011ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80011b0:	fb08 3310 	mls	r3, r8, r0, r3
 80011b4:	fb09 f900 	mul.w	r9, r9, r0
 80011b8:	b2a4      	uxth	r4, r4
 80011ba:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80011be:	45a1      	cmp	r9, r4
 80011c0:	d907      	bls.n	80011d2 <__udivmoddi4+0x14e>
 80011c2:	192c      	adds	r4, r5, r4
 80011c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80011c8:	d202      	bcs.n	80011d0 <__udivmoddi4+0x14c>
 80011ca:	45a1      	cmp	r9, r4
 80011cc:	f200 80b6 	bhi.w	800133c <__udivmoddi4+0x2b8>
 80011d0:	4618      	mov	r0, r3
 80011d2:	eba4 0409 	sub.w	r4, r4, r9
 80011d6:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80011da:	e79e      	b.n	800111a <__udivmoddi4+0x96>
 80011dc:	f1c7 0520 	rsb	r5, r7, #32
 80011e0:	40bb      	lsls	r3, r7
 80011e2:	fa22 fc05 	lsr.w	ip, r2, r5
 80011e6:	ea4c 0c03 	orr.w	ip, ip, r3
 80011ea:	fa21 f405 	lsr.w	r4, r1, r5
 80011ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80011f2:	fbb4 f9fe 	udiv	r9, r4, lr
 80011f6:	fa1f f88c 	uxth.w	r8, ip
 80011fa:	fb0e 4419 	mls	r4, lr, r9, r4
 80011fe:	fa20 f305 	lsr.w	r3, r0, r5
 8001202:	40b9      	lsls	r1, r7
 8001204:	fb09 fa08 	mul.w	sl, r9, r8
 8001208:	4319      	orrs	r1, r3
 800120a:	0c0b      	lsrs	r3, r1, #16
 800120c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001210:	45a2      	cmp	sl, r4
 8001212:	fa02 f207 	lsl.w	r2, r2, r7
 8001216:	fa00 f307 	lsl.w	r3, r0, r7
 800121a:	d90b      	bls.n	8001234 <__udivmoddi4+0x1b0>
 800121c:	eb1c 0404 	adds.w	r4, ip, r4
 8001220:	f109 30ff 	add.w	r0, r9, #4294967295
 8001224:	f080 8088 	bcs.w	8001338 <__udivmoddi4+0x2b4>
 8001228:	45a2      	cmp	sl, r4
 800122a:	f240 8085 	bls.w	8001338 <__udivmoddi4+0x2b4>
 800122e:	f1a9 0902 	sub.w	r9, r9, #2
 8001232:	4464      	add	r4, ip
 8001234:	eba4 040a 	sub.w	r4, r4, sl
 8001238:	fbb4 f0fe 	udiv	r0, r4, lr
 800123c:	fb0e 4410 	mls	r4, lr, r0, r4
 8001240:	fb00 fa08 	mul.w	sl, r0, r8
 8001244:	b289      	uxth	r1, r1
 8001246:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800124a:	45a2      	cmp	sl, r4
 800124c:	d908      	bls.n	8001260 <__udivmoddi4+0x1dc>
 800124e:	eb1c 0404 	adds.w	r4, ip, r4
 8001252:	f100 31ff 	add.w	r1, r0, #4294967295
 8001256:	d26b      	bcs.n	8001330 <__udivmoddi4+0x2ac>
 8001258:	45a2      	cmp	sl, r4
 800125a:	d969      	bls.n	8001330 <__udivmoddi4+0x2ac>
 800125c:	3802      	subs	r0, #2
 800125e:	4464      	add	r4, ip
 8001260:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001264:	fba0 8902 	umull	r8, r9, r0, r2
 8001268:	eba4 040a 	sub.w	r4, r4, sl
 800126c:	454c      	cmp	r4, r9
 800126e:	4641      	mov	r1, r8
 8001270:	46ce      	mov	lr, r9
 8001272:	d354      	bcc.n	800131e <__udivmoddi4+0x29a>
 8001274:	d051      	beq.n	800131a <__udivmoddi4+0x296>
 8001276:	2e00      	cmp	r6, #0
 8001278:	d069      	beq.n	800134e <__udivmoddi4+0x2ca>
 800127a:	1a5a      	subs	r2, r3, r1
 800127c:	eb64 040e 	sbc.w	r4, r4, lr
 8001280:	fa04 f505 	lsl.w	r5, r4, r5
 8001284:	fa22 f307 	lsr.w	r3, r2, r7
 8001288:	40fc      	lsrs	r4, r7
 800128a:	431d      	orrs	r5, r3
 800128c:	e9c6 5400 	strd	r5, r4, [r6]
 8001290:	2700      	movs	r7, #0
 8001292:	e747      	b.n	8001124 <__udivmoddi4+0xa0>
 8001294:	4095      	lsls	r5, r2
 8001296:	f1c2 0320 	rsb	r3, r2, #32
 800129a:	fa21 f003 	lsr.w	r0, r1, r3
 800129e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80012a2:	fbb0 f7f8 	udiv	r7, r0, r8
 80012a6:	fa1f f985 	uxth.w	r9, r5
 80012aa:	fb08 0017 	mls	r0, r8, r7, r0
 80012ae:	fa24 f303 	lsr.w	r3, r4, r3
 80012b2:	4091      	lsls	r1, r2
 80012b4:	fb07 fc09 	mul.w	ip, r7, r9
 80012b8:	430b      	orrs	r3, r1
 80012ba:	0c19      	lsrs	r1, r3, #16
 80012bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80012c0:	458c      	cmp	ip, r1
 80012c2:	fa04 f402 	lsl.w	r4, r4, r2
 80012c6:	d907      	bls.n	80012d8 <__udivmoddi4+0x254>
 80012c8:	1869      	adds	r1, r5, r1
 80012ca:	f107 30ff 	add.w	r0, r7, #4294967295
 80012ce:	d231      	bcs.n	8001334 <__udivmoddi4+0x2b0>
 80012d0:	458c      	cmp	ip, r1
 80012d2:	d92f      	bls.n	8001334 <__udivmoddi4+0x2b0>
 80012d4:	3f02      	subs	r7, #2
 80012d6:	4429      	add	r1, r5
 80012d8:	eba1 010c 	sub.w	r1, r1, ip
 80012dc:	fbb1 f0f8 	udiv	r0, r1, r8
 80012e0:	fb08 1c10 	mls	ip, r8, r0, r1
 80012e4:	fb00 fe09 	mul.w	lr, r0, r9
 80012e8:	b299      	uxth	r1, r3
 80012ea:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80012ee:	458e      	cmp	lr, r1
 80012f0:	d907      	bls.n	8001302 <__udivmoddi4+0x27e>
 80012f2:	1869      	adds	r1, r5, r1
 80012f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80012f8:	d218      	bcs.n	800132c <__udivmoddi4+0x2a8>
 80012fa:	458e      	cmp	lr, r1
 80012fc:	d916      	bls.n	800132c <__udivmoddi4+0x2a8>
 80012fe:	3802      	subs	r0, #2
 8001300:	4429      	add	r1, r5
 8001302:	eba1 010e 	sub.w	r1, r1, lr
 8001306:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800130a:	e73a      	b.n	8001182 <__udivmoddi4+0xfe>
 800130c:	4637      	mov	r7, r6
 800130e:	4630      	mov	r0, r6
 8001310:	e708      	b.n	8001124 <__udivmoddi4+0xa0>
 8001312:	460f      	mov	r7, r1
 8001314:	e6e6      	b.n	80010e4 <__udivmoddi4+0x60>
 8001316:	4618      	mov	r0, r3
 8001318:	e6fb      	b.n	8001112 <__udivmoddi4+0x8e>
 800131a:	4543      	cmp	r3, r8
 800131c:	d2ab      	bcs.n	8001276 <__udivmoddi4+0x1f2>
 800131e:	ebb8 0102 	subs.w	r1, r8, r2
 8001322:	eb69 020c 	sbc.w	r2, r9, ip
 8001326:	3801      	subs	r0, #1
 8001328:	4696      	mov	lr, r2
 800132a:	e7a4      	b.n	8001276 <__udivmoddi4+0x1f2>
 800132c:	4618      	mov	r0, r3
 800132e:	e7e8      	b.n	8001302 <__udivmoddi4+0x27e>
 8001330:	4608      	mov	r0, r1
 8001332:	e795      	b.n	8001260 <__udivmoddi4+0x1dc>
 8001334:	4607      	mov	r7, r0
 8001336:	e7cf      	b.n	80012d8 <__udivmoddi4+0x254>
 8001338:	4681      	mov	r9, r0
 800133a:	e77b      	b.n	8001234 <__udivmoddi4+0x1b0>
 800133c:	3802      	subs	r0, #2
 800133e:	442c      	add	r4, r5
 8001340:	e747      	b.n	80011d2 <__udivmoddi4+0x14e>
 8001342:	f1ae 0e02 	sub.w	lr, lr, #2
 8001346:	442b      	add	r3, r5
 8001348:	e72f      	b.n	80011aa <__udivmoddi4+0x126>
 800134a:	4638      	mov	r0, r7
 800134c:	e707      	b.n	800115e <__udivmoddi4+0xda>
 800134e:	4637      	mov	r7, r6
 8001350:	e6e8      	b.n	8001124 <__udivmoddi4+0xa0>
 8001352:	bf00      	nop

08001354 <__aeabi_idiv0>:
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop

08001358 <read_type_of_capsule>:
#include "main.h"
#include "lcd.h"
#include "modules.h"
#include "core.h"

int read_type_of_capsule(int code1, int code2, int code3){
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]

	LCD_Clear();
 8001364:	f000 fa6e 	bl	8001844 <LCD_Clear>
	if(code1){
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d01d      	beq.n	80013aa <read_type_of_capsule+0x52>
		if(!code3 && !code2){	// code 100 - tipo 5 - Refrigerante
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d10e      	bne.n	8001392 <read_type_of_capsule+0x3a>
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10b      	bne.n	8001392 <read_type_of_capsule+0x3a>

			LCD_String_xy(1,2,"Refrigerante");
 800137a:	4a22      	ldr	r2, [pc, #136]	; (8001404 <read_type_of_capsule+0xac>)
 800137c:	2102      	movs	r1, #2
 800137e:	2001      	movs	r0, #1
 8001380:	f000 fb89 	bl	8001a96 <LCD_String_xy>
			LCD_String_xy(2,4,"Confirma?");
 8001384:	4a20      	ldr	r2, [pc, #128]	; (8001408 <read_type_of_capsule+0xb0>)
 8001386:	2104      	movs	r1, #4
 8001388:	2002      	movs	r0, #2
 800138a:	f000 fb84 	bl	8001a96 <LCD_String_xy>
			return 5;
 800138e:	2305      	movs	r3, #5
 8001390:	e034      	b.n	80013fc <read_type_of_capsule+0xa4>
		}
		else{
			LCD_String_xy(1,4,"Erro na");
 8001392:	4a1e      	ldr	r2, [pc, #120]	; (800140c <read_type_of_capsule+0xb4>)
 8001394:	2104      	movs	r1, #4
 8001396:	2001      	movs	r0, #1
 8001398:	f000 fb7d 	bl	8001a96 <LCD_String_xy>
			LCD_String_xy(2,4,"leitura!");
 800139c:	4a1c      	ldr	r2, [pc, #112]	; (8001410 <read_type_of_capsule+0xb8>)
 800139e:	2104      	movs	r1, #4
 80013a0:	2002      	movs	r0, #2
 80013a2:	f000 fb78 	bl	8001a96 <LCD_String_xy>
			return 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	e028      	b.n	80013fc <read_type_of_capsule+0xa4>
		}
	}
	else{
		LCD_String_xy(2,4,"Confirma?");
 80013aa:	4a17      	ldr	r2, [pc, #92]	; (8001408 <read_type_of_capsule+0xb0>)
 80013ac:	2104      	movs	r1, #4
 80013ae:	2002      	movs	r0, #2
 80013b0:	f000 fb71 	bl	8001a96 <LCD_String_xy>
		if(code2==1){
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d110      	bne.n	80013dc <read_type_of_capsule+0x84>
			if(code3==1){ // code 011 - Tipo 4 - Chá Quente
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d106      	bne.n	80013ce <read_type_of_capsule+0x76>
				LCD_String_xy(1,2,"Chá quente");
 80013c0:	4a14      	ldr	r2, [pc, #80]	; (8001414 <read_type_of_capsule+0xbc>)
 80013c2:	2102      	movs	r1, #2
 80013c4:	2001      	movs	r0, #1
 80013c6:	f000 fb66 	bl	8001a96 <LCD_String_xy>
				return 4;
 80013ca:	2304      	movs	r3, #4
 80013cc:	e016      	b.n	80013fc <read_type_of_capsule+0xa4>
			}
			else{ // code 010 - Tipo 3 - Chá Gelado
				LCD_String_xy(1,2,"Chá gelado");
 80013ce:	4a12      	ldr	r2, [pc, #72]	; (8001418 <read_type_of_capsule+0xc0>)
 80013d0:	2102      	movs	r1, #2
 80013d2:	2001      	movs	r0, #1
 80013d4:	f000 fb5f 	bl	8001a96 <LCD_String_xy>
				return 3;
 80013d8:	2303      	movs	r3, #3
 80013da:	e00f      	b.n	80013fc <read_type_of_capsule+0xa4>
			}
		}
		else{
			if(code3==1){ // code 001 - Tipo 2 - Agua c/ gás
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d106      	bne.n	80013f0 <read_type_of_capsule+0x98>
				LCD_String_xy(1,2,"Agua c/ gás");
 80013e2:	4a0e      	ldr	r2, [pc, #56]	; (800141c <read_type_of_capsule+0xc4>)
 80013e4:	2102      	movs	r1, #2
 80013e6:	2001      	movs	r0, #1
 80013e8:	f000 fb55 	bl	8001a96 <LCD_String_xy>
				return 2;
 80013ec:	2302      	movs	r3, #2
 80013ee:	e005      	b.n	80013fc <read_type_of_capsule+0xa4>
			}
			else{ // code 000 - Tipo 1 - Agua
				LCD_String_xy(1,6,"Agua");
 80013f0:	4a0b      	ldr	r2, [pc, #44]	; (8001420 <read_type_of_capsule+0xc8>)
 80013f2:	2106      	movs	r1, #6
 80013f4:	2001      	movs	r0, #1
 80013f6:	f000 fb4e 	bl	8001a96 <LCD_String_xy>
				return 1;
 80013fa:	2301      	movs	r3, #1
			}
		}
	}
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	08007564 	.word	0x08007564
 8001408:	08007574 	.word	0x08007574
 800140c:	08007580 	.word	0x08007580
 8001410:	08007588 	.word	0x08007588
 8001414:	08007594 	.word	0x08007594
 8001418:	080075a0 	.word	0x080075a0
 800141c:	080075ac 	.word	0x080075ac
 8001420:	080075bc 	.word	0x080075bc

08001424 <preparing>:

void preparing(int type, ADC_HandleTypeDef* hadc1){
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
	LCD_Clear();
 800142e:	f000 fa09 	bl	8001844 <LCD_Clear>
	int confirm = 0, add = 0, sub = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	617b      	str	r3, [r7, #20]
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	2300      	movs	r3, #0
 800143c:	60bb      	str	r3, [r7, #8]
	int choice=0; // (0 - Natural, 1 - Quente, 2 - Gelada)
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
	HAL_Delay(500);
 8001442:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001446:	f001 fced 	bl	8002e24 <HAL_Delay>
	switch (type){
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	3b01      	subs	r3, #1
 800144e:	2b04      	cmp	r3, #4
 8001450:	f200 8129 	bhi.w	80016a6 <preparing+0x282>
 8001454:	a201      	add	r2, pc, #4	; (adr r2, 800145c <preparing+0x38>)
 8001456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800145a:	bf00      	nop
 800145c:	08001471 	.word	0x08001471
 8001460:	080015bb 	.word	0x080015bb
 8001464:	08001601 	.word	0x08001601
 8001468:	08001631 	.word	0x08001631
 800146c:	08001661 	.word	0x08001661
		case 1:
			LCD_String_xy(1,2,"Escolha: (+/-)");
 8001470:	4a93      	ldr	r2, [pc, #588]	; (80016c0 <preparing+0x29c>)
 8001472:	2102      	movs	r1, #2
 8001474:	2001      	movs	r0, #1
 8001476:	f000 fb0e 	bl	8001a96 <LCD_String_xy>
			LCD_String_xy(2,4,"Natural");
 800147a:	4a92      	ldr	r2, [pc, #584]	; (80016c4 <preparing+0x2a0>)
 800147c:	2104      	movs	r1, #4
 800147e:	2002      	movs	r0, #2
 8001480:	f000 fb09 	bl	8001a96 <LCD_String_xy>
			while(confirm==0){
 8001484:	e055      	b.n	8001532 <preparing+0x10e>
				confirm = HAL_GPIO_ReadPin(GPIOB, CONFIRM_Pin);
 8001486:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800148a:	488f      	ldr	r0, [pc, #572]	; (80016c8 <preparing+0x2a4>)
 800148c:	f002 fd90 	bl	8003fb0 <HAL_GPIO_ReadPin>
 8001490:	4603      	mov	r3, r0
 8001492:	617b      	str	r3, [r7, #20]
				add = HAL_GPIO_ReadPin(GPIOB, ADD_Pin);
 8001494:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001498:	488b      	ldr	r0, [pc, #556]	; (80016c8 <preparing+0x2a4>)
 800149a:	f002 fd89 	bl	8003fb0 <HAL_GPIO_ReadPin>
 800149e:	4603      	mov	r3, r0
 80014a0:	60fb      	str	r3, [r7, #12]
				sub = HAL_GPIO_ReadPin(GPIOB, SUB_Pin);
 80014a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014a6:	4888      	ldr	r0, [pc, #544]	; (80016c8 <preparing+0x2a4>)
 80014a8:	f002 fd82 	bl	8003fb0 <HAL_GPIO_ReadPin>
 80014ac:	4603      	mov	r3, r0
 80014ae:	60bb      	str	r3, [r7, #8]
				HAL_Delay(500);
 80014b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014b4:	f001 fcb6 	bl	8002e24 <HAL_Delay>
				if(add || sub){
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d102      	bne.n	80014c4 <preparing+0xa0>
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d036      	beq.n	8001532 <preparing+0x10e>
					if(add){
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d007      	beq.n	80014da <preparing+0xb6>
						choice++;
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	3301      	adds	r3, #1
 80014ce:	613b      	str	r3, [r7, #16]
						if(choice>2){
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	dd01      	ble.n	80014da <preparing+0xb6>
							choice = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
						}
					}
					if(sub){
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d007      	beq.n	80014f0 <preparing+0xcc>
						choice--;
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	613b      	str	r3, [r7, #16]
						if(choice<0){
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	da01      	bge.n	80014f0 <preparing+0xcc>
							choice=2;
 80014ec:	2302      	movs	r3, #2
 80014ee:	613b      	str	r3, [r7, #16]
						}
					}
					LCD_Clear();
 80014f0:	f000 f9a8 	bl	8001844 <LCD_Clear>
					LCD_String_xy(1,2,"Escolha: (+/-)");
 80014f4:	4a72      	ldr	r2, [pc, #456]	; (80016c0 <preparing+0x29c>)
 80014f6:	2102      	movs	r1, #2
 80014f8:	2001      	movs	r0, #1
 80014fa:	f000 facc 	bl	8001a96 <LCD_String_xy>
					switch (choice){
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d00a      	beq.n	800151a <preparing+0xf6>
 8001504:	2b02      	cmp	r3, #2
 8001506:	d00e      	beq.n	8001526 <preparing+0x102>
 8001508:	2b00      	cmp	r3, #0
 800150a:	d000      	beq.n	800150e <preparing+0xea>
 800150c:	e011      	b.n	8001532 <preparing+0x10e>
						case 0: LCD_String_xy(2,4,"Natural"); break;
 800150e:	4a6d      	ldr	r2, [pc, #436]	; (80016c4 <preparing+0x2a0>)
 8001510:	2104      	movs	r1, #4
 8001512:	2002      	movs	r0, #2
 8001514:	f000 fabf 	bl	8001a96 <LCD_String_xy>
 8001518:	e00b      	b.n	8001532 <preparing+0x10e>
						case 1:	LCD_String_xy(2,4,"Quente"); break;
 800151a:	4a6c      	ldr	r2, [pc, #432]	; (80016cc <preparing+0x2a8>)
 800151c:	2104      	movs	r1, #4
 800151e:	2002      	movs	r0, #2
 8001520:	f000 fab9 	bl	8001a96 <LCD_String_xy>
 8001524:	e005      	b.n	8001532 <preparing+0x10e>
						case 2: LCD_String_xy(2,4,"Gelada"); break;
 8001526:	4a6a      	ldr	r2, [pc, #424]	; (80016d0 <preparing+0x2ac>)
 8001528:	2104      	movs	r1, #4
 800152a:	2002      	movs	r0, #2
 800152c:	f000 fab3 	bl	8001a96 <LCD_String_xy>
 8001530:	bf00      	nop
			while(confirm==0){
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0a6      	beq.n	8001486 <preparing+0x62>
					}
				}
			}

			LCD_Clear();
 8001538:	f000 f984 	bl	8001844 <LCD_Clear>
			switch (choice){
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d011      	beq.n	8001566 <preparing+0x142>
 8001542:	2b02      	cmp	r3, #2
 8001544:	d022      	beq.n	800158c <preparing+0x168>
 8001546:	2b00      	cmp	r3, #0
 8001548:	d000      	beq.n	800154c <preparing+0x128>
					LCD_String_xy(1,4,"Gelada");
					add_water(3000, 2);
					LCD_Clear();
					break;
			}
			break;
 800154a:	e0ac      	b.n	80016a6 <preparing+0x282>
					LCD_String_xy(1,4,"Natural");
 800154c:	4a5d      	ldr	r2, [pc, #372]	; (80016c4 <preparing+0x2a0>)
 800154e:	2104      	movs	r1, #4
 8001550:	2001      	movs	r0, #1
 8001552:	f000 faa0 	bl	8001a96 <LCD_String_xy>
					add_water(3000, 0);
 8001556:	2100      	movs	r1, #0
 8001558:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800155c:	f000 ff72 	bl	8002444 <add_water>
					LCD_Clear();
 8001560:	f000 f970 	bl	8001844 <LCD_Clear>
					break;
 8001564:	e028      	b.n	80015b8 <preparing+0x194>
					heater(60, hadc1);
 8001566:	6839      	ldr	r1, [r7, #0]
 8001568:	485a      	ldr	r0, [pc, #360]	; (80016d4 <preparing+0x2b0>)
 800156a:	f001 f80d 	bl	8002588 <heater>
					LCD_Clear();
 800156e:	f000 f969 	bl	8001844 <LCD_Clear>
					LCD_String_xy(1,4,"Quente");
 8001572:	4a56      	ldr	r2, [pc, #344]	; (80016cc <preparing+0x2a8>)
 8001574:	2104      	movs	r1, #4
 8001576:	2001      	movs	r0, #1
 8001578:	f000 fa8d 	bl	8001a96 <LCD_String_xy>
					add_water(3000, 1);
 800157c:	2101      	movs	r1, #1
 800157e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001582:	f000 ff5f 	bl	8002444 <add_water>
					LCD_Clear();
 8001586:	f000 f95d 	bl	8001844 <LCD_Clear>
					break;
 800158a:	e015      	b.n	80015b8 <preparing+0x194>
					HAL_Delay(100);
 800158c:	2064      	movs	r0, #100	; 0x64
 800158e:	f001 fc49 	bl	8002e24 <HAL_Delay>
					cooler(15, hadc1);
 8001592:	6839      	ldr	r1, [r7, #0]
 8001594:	4850      	ldr	r0, [pc, #320]	; (80016d8 <preparing+0x2b4>)
 8001596:	f001 f903 	bl	80027a0 <cooler>
					LCD_Clear();
 800159a:	f000 f953 	bl	8001844 <LCD_Clear>
					LCD_String_xy(1,4,"Gelada");
 800159e:	4a4c      	ldr	r2, [pc, #304]	; (80016d0 <preparing+0x2ac>)
 80015a0:	2104      	movs	r1, #4
 80015a2:	2001      	movs	r0, #1
 80015a4:	f000 fa77 	bl	8001a96 <LCD_String_xy>
					add_water(3000, 2);
 80015a8:	2102      	movs	r1, #2
 80015aa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80015ae:	f000 ff49 	bl	8002444 <add_water>
					LCD_Clear();
 80015b2:	f000 f947 	bl	8001844 <LCD_Clear>
					break;
 80015b6:	bf00      	nop
			break;
 80015b8:	e075      	b.n	80016a6 <preparing+0x282>
		case 2:
			LCD_String_xy(1,2,"Agua c/ gás");
 80015ba:	4a48      	ldr	r2, [pc, #288]	; (80016dc <preparing+0x2b8>)
 80015bc:	2102      	movs	r1, #2
 80015be:	2001      	movs	r0, #1
 80015c0:	f000 fa69 	bl	8001a96 <LCD_String_xy>
			cooler(15, hadc1);
 80015c4:	6839      	ldr	r1, [r7, #0]
 80015c6:	4844      	ldr	r0, [pc, #272]	; (80016d8 <preparing+0x2b4>)
 80015c8:	f001 f8ea 	bl	80027a0 <cooler>
			LCD_Clear();
 80015cc:	f000 f93a 	bl	8001844 <LCD_Clear>
			LCD_String_xy(1,2,"Agua c/ gás");
 80015d0:	4a42      	ldr	r2, [pc, #264]	; (80016dc <preparing+0x2b8>)
 80015d2:	2102      	movs	r1, #2
 80015d4:	2001      	movs	r0, #1
 80015d6:	f000 fa5e 	bl	8001a96 <LCD_String_xy>
			add_water(3000, 2);
 80015da:	2102      	movs	r1, #2
 80015dc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80015e0:	f000 ff30 	bl	8002444 <add_water>
			LCD_Clear();
 80015e4:	f000 f92e 	bl	8001844 <LCD_Clear>
			LCD_String_xy(1,2,"Agua c/ gás");
 80015e8:	4a3c      	ldr	r2, [pc, #240]	; (80016dc <preparing+0x2b8>)
 80015ea:	2102      	movs	r1, #2
 80015ec:	2001      	movs	r0, #1
 80015ee:	f000 fa52 	bl	8001a96 <LCD_String_xy>
			add_co2(1500);
 80015f2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80015f6:	f000 ffa7 	bl	8002548 <add_co2>
			LCD_Clear();
 80015fa:	f000 f923 	bl	8001844 <LCD_Clear>
			break;
 80015fe:	e052      	b.n	80016a6 <preparing+0x282>
		case 3:
			LCD_String_xy(1,2,"Chá gelado");
 8001600:	4a37      	ldr	r2, [pc, #220]	; (80016e0 <preparing+0x2bc>)
 8001602:	2102      	movs	r1, #2
 8001604:	2001      	movs	r0, #1
 8001606:	f000 fa46 	bl	8001a96 <LCD_String_xy>
			cooler(20, hadc1);
 800160a:	6839      	ldr	r1, [r7, #0]
 800160c:	4835      	ldr	r0, [pc, #212]	; (80016e4 <preparing+0x2c0>)
 800160e:	f001 f8c7 	bl	80027a0 <cooler>
			LCD_Clear();
 8001612:	f000 f917 	bl	8001844 <LCD_Clear>
			LCD_String_xy(1,2,"Chá gelado");
 8001616:	4a32      	ldr	r2, [pc, #200]	; (80016e0 <preparing+0x2bc>)
 8001618:	2102      	movs	r1, #2
 800161a:	2001      	movs	r0, #1
 800161c:	f000 fa3b 	bl	8001a96 <LCD_String_xy>
			add_water(2700, 2);
 8001620:	2102      	movs	r1, #2
 8001622:	f640 208c 	movw	r0, #2700	; 0xa8c
 8001626:	f000 ff0d 	bl	8002444 <add_water>
			LCD_Clear();
 800162a:	f000 f90b 	bl	8001844 <LCD_Clear>
			break;
 800162e:	e03a      	b.n	80016a6 <preparing+0x282>
		case 4:
			LCD_String_xy(1,2,"Chá quente");
 8001630:	4a2d      	ldr	r2, [pc, #180]	; (80016e8 <preparing+0x2c4>)
 8001632:	2102      	movs	r1, #2
 8001634:	2001      	movs	r0, #1
 8001636:	f000 fa2e 	bl	8001a96 <LCD_String_xy>
			heater(60, hadc1);
 800163a:	6839      	ldr	r1, [r7, #0]
 800163c:	4825      	ldr	r0, [pc, #148]	; (80016d4 <preparing+0x2b0>)
 800163e:	f000 ffa3 	bl	8002588 <heater>
			LCD_Clear();
 8001642:	f000 f8ff 	bl	8001844 <LCD_Clear>
			LCD_String_xy(1,2,"Chá quente");
 8001646:	4a28      	ldr	r2, [pc, #160]	; (80016e8 <preparing+0x2c4>)
 8001648:	2102      	movs	r1, #2
 800164a:	2001      	movs	r0, #1
 800164c:	f000 fa23 	bl	8001a96 <LCD_String_xy>
			add_water(2700, 1);
 8001650:	2101      	movs	r1, #1
 8001652:	f640 208c 	movw	r0, #2700	; 0xa8c
 8001656:	f000 fef5 	bl	8002444 <add_water>
			LCD_Clear();
 800165a:	f000 f8f3 	bl	8001844 <LCD_Clear>
			break;
 800165e:	e022      	b.n	80016a6 <preparing+0x282>
		case 5:
			LCD_String_xy(1,2,"Refrigerante");
 8001660:	4a22      	ldr	r2, [pc, #136]	; (80016ec <preparing+0x2c8>)
 8001662:	2102      	movs	r1, #2
 8001664:	2001      	movs	r0, #1
 8001666:	f000 fa16 	bl	8001a96 <LCD_String_xy>
			cooler(17, hadc1);
 800166a:	6839      	ldr	r1, [r7, #0]
 800166c:	4820      	ldr	r0, [pc, #128]	; (80016f0 <preparing+0x2cc>)
 800166e:	f001 f897 	bl	80027a0 <cooler>
			LCD_Clear();
 8001672:	f000 f8e7 	bl	8001844 <LCD_Clear>
			LCD_String_xy(1,2,"Refrigerante");
 8001676:	4a1d      	ldr	r2, [pc, #116]	; (80016ec <preparing+0x2c8>)
 8001678:	2102      	movs	r1, #2
 800167a:	2001      	movs	r0, #1
 800167c:	f000 fa0b 	bl	8001a96 <LCD_String_xy>
			add_water(4000, 2);
 8001680:	2102      	movs	r1, #2
 8001682:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001686:	f000 fedd 	bl	8002444 <add_water>
			LCD_Clear();
 800168a:	f000 f8db 	bl	8001844 <LCD_Clear>
			LCD_String_xy(1,2,"Refrigerante");
 800168e:	4a17      	ldr	r2, [pc, #92]	; (80016ec <preparing+0x2c8>)
 8001690:	2102      	movs	r1, #2
 8001692:	2001      	movs	r0, #1
 8001694:	f000 f9ff 	bl	8001a96 <LCD_String_xy>
			add_co2(2560);
 8001698:	f44f 6020 	mov.w	r0, #2560	; 0xa00
 800169c:	f000 ff54 	bl	8002548 <add_co2>
			LCD_Clear();
 80016a0:	f000 f8d0 	bl	8001844 <LCD_Clear>
			break;
 80016a4:	bf00      	nop
	}

	LCD_String_xy(2,4,"Pronto!");
 80016a6:	4a13      	ldr	r2, [pc, #76]	; (80016f4 <preparing+0x2d0>)
 80016a8:	2104      	movs	r1, #4
 80016aa:	2002      	movs	r0, #2
 80016ac:	f000 f9f3 	bl	8001a96 <LCD_String_xy>
	HAL_Delay(3000);
 80016b0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80016b4:	f001 fbb6 	bl	8002e24 <HAL_Delay>
}
 80016b8:	bf00      	nop
 80016ba:	3718      	adds	r7, #24
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	080075c4 	.word	0x080075c4
 80016c4:	080075d4 	.word	0x080075d4
 80016c8:	40010c00 	.word	0x40010c00
 80016cc:	080075dc 	.word	0x080075dc
 80016d0:	080075e4 	.word	0x080075e4
 80016d4:	42700000 	.word	0x42700000
 80016d8:	41700000 	.word	0x41700000
 80016dc:	080075ac 	.word	0x080075ac
 80016e0:	080075a0 	.word	0x080075a0
 80016e4:	41a00000 	.word	0x41a00000
 80016e8:	08007594 	.word	0x08007594
 80016ec:	08007564 	.word	0x08007564
 80016f0:	41880000 	.word	0x41880000
 80016f4:	080075ec 	.word	0x080075ec

080016f8 <writePort>:
char ccedilha [2] = "ç";
char oacentuado [2] = "ó";
char grau [2] = "°";


void writePort(char x){ // Função auxiliar para escrever na porta 8 bits
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	71fb      	strb	r3, [r7, #7]
	int value;
	value = x & 0x01;
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, value);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	b2db      	uxtb	r3, r3
 800170e:	461a      	mov	r2, r3
 8001710:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001714:	482a      	ldr	r0, [pc, #168]	; (80017c0 <writePort+0xc8>)
 8001716:	f002 fc62 	bl	8003fde <HAL_GPIO_WritePin>
	value = x & 0x02;
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, value);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	b2db      	uxtb	r3, r3
 8001726:	461a      	mov	r2, r3
 8001728:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800172c:	4824      	ldr	r0, [pc, #144]	; (80017c0 <writePort+0xc8>)
 800172e:	f002 fc56 	bl	8003fde <HAL_GPIO_WritePin>
	value = x & 0x04;
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	f003 0304 	and.w	r3, r3, #4
 8001738:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, value);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	461a      	mov	r2, r3
 8001740:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001744:	481e      	ldr	r0, [pc, #120]	; (80017c0 <writePort+0xc8>)
 8001746:	f002 fc4a 	bl	8003fde <HAL_GPIO_WritePin>
	value = x & 0x08;
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	f003 0308 	and.w	r3, r3, #8
 8001750:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, value);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	b2db      	uxtb	r3, r3
 8001756:	461a      	mov	r2, r3
 8001758:	2108      	movs	r1, #8
 800175a:	481a      	ldr	r0, [pc, #104]	; (80017c4 <writePort+0xcc>)
 800175c:	f002 fc3f 	bl	8003fde <HAL_GPIO_WritePin>
	value = x & 0x10;
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	f003 0310 	and.w	r3, r3, #16
 8001766:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, value);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	b2db      	uxtb	r3, r3
 800176c:	461a      	mov	r2, r3
 800176e:	2110      	movs	r1, #16
 8001770:	4814      	ldr	r0, [pc, #80]	; (80017c4 <writePort+0xcc>)
 8001772:	f002 fc34 	bl	8003fde <HAL_GPIO_WritePin>
	value = x & 0x20;
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	f003 0320 	and.w	r3, r3, #32
 800177c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, value);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	b2db      	uxtb	r3, r3
 8001782:	461a      	mov	r2, r3
 8001784:	2120      	movs	r1, #32
 8001786:	480f      	ldr	r0, [pc, #60]	; (80017c4 <writePort+0xcc>)
 8001788:	f002 fc29 	bl	8003fde <HAL_GPIO_WritePin>
	value = x & 0x40;
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001792:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, value);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	b2db      	uxtb	r3, r3
 8001798:	461a      	mov	r2, r3
 800179a:	2140      	movs	r1, #64	; 0x40
 800179c:	4809      	ldr	r0, [pc, #36]	; (80017c4 <writePort+0xcc>)
 800179e:	f002 fc1e 	bl	8003fde <HAL_GPIO_WritePin>
	value = x & 0x80;
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017a8:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, value);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	461a      	mov	r2, r3
 80017b0:	2180      	movs	r1, #128	; 0x80
 80017b2:	4804      	ldr	r0, [pc, #16]	; (80017c4 <writePort+0xcc>)
 80017b4:	f002 fc13 	bl	8003fde <HAL_GPIO_WritePin>
}
 80017b8:	bf00      	nop
 80017ba:	3710      	adds	r7, #16
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40010800 	.word	0x40010800
 80017c4:	40010c00 	.word	0x40010c00

080017c8 <LCD_Init>:


void LCD_Init()  // Inicializa
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
	LCD_Custom_Char(0, acomacento);
 80017cc:	4916      	ldr	r1, [pc, #88]	; (8001828 <LCD_Init+0x60>)
 80017ce:	2000      	movs	r0, #0
 80017d0:	f000 f93c 	bl	8001a4c <LCD_Custom_Char>
	LCD_Custom_Char(1, acomtil);
 80017d4:	4915      	ldr	r1, [pc, #84]	; (800182c <LCD_Init+0x64>)
 80017d6:	2001      	movs	r0, #1
 80017d8:	f000 f938 	bl	8001a4c <LCD_Custom_Char>
	LCD_Custom_Char(2, ecomacento);
 80017dc:	4914      	ldr	r1, [pc, #80]	; (8001830 <LCD_Init+0x68>)
 80017de:	2002      	movs	r0, #2
 80017e0:	f000 f934 	bl	8001a4c <LCD_Custom_Char>
	LCD_Custom_Char(3, ocomtil);
 80017e4:	4913      	ldr	r1, [pc, #76]	; (8001834 <LCD_Init+0x6c>)
 80017e6:	2003      	movs	r0, #3
 80017e8:	f000 f930 	bl	8001a4c <LCD_Custom_Char>
	LCD_Custom_Char(4, cedilha); // Salva desenhos dos caracteres especiais
 80017ec:	4912      	ldr	r1, [pc, #72]	; (8001838 <LCD_Init+0x70>)
 80017ee:	2004      	movs	r0, #4
 80017f0:	f000 f92c 	bl	8001a4c <LCD_Custom_Char>
	LCD_Custom_Char(5, ocomacento);
 80017f4:	4911      	ldr	r1, [pc, #68]	; (800183c <LCD_Init+0x74>)
 80017f6:	2005      	movs	r0, #5
 80017f8:	f000 f928 	bl	8001a4c <LCD_Custom_Char>
	LCD_Custom_Char(6, grausimbolo);
 80017fc:	4910      	ldr	r1, [pc, #64]	; (8001840 <LCD_Init+0x78>)
 80017fe:	2006      	movs	r0, #6
 8001800:	f000 f924 	bl	8001a4c <LCD_Custom_Char>

	HAL_Delay(15);
 8001804:	200f      	movs	r0, #15
 8001806:	f001 fb0d 	bl	8002e24 <HAL_Delay>
    LCD_Command(0x38);
 800180a:	2038      	movs	r0, #56	; 0x38
 800180c:	f000 f822 	bl	8001854 <LCD_Command>
    LCD_Command(0x01);
 8001810:	2001      	movs	r0, #1
 8001812:	f000 f81f 	bl	8001854 <LCD_Command>
    LCD_Command(0x0c);
 8001816:	200c      	movs	r0, #12
 8001818:	f000 f81c 	bl	8001854 <LCD_Command>
    LCD_Command(0x06);
 800181c:	2006      	movs	r0, #6
 800181e:	f000 f819 	bl	8001854 <LCD_Command>
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000000 	.word	0x20000000
 800182c:	20000008 	.word	0x20000008
 8001830:	20000018 	.word	0x20000018
 8001834:	20000020 	.word	0x20000020
 8001838:	20000010 	.word	0x20000010
 800183c:	20000028 	.word	0x20000028
 8001840:	20000030 	.word	0x20000030

08001844 <LCD_Clear>:

void LCD_Clear() // Limpa o display
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
    	LCD_Command(0x01);
 8001848:	2001      	movs	r0, #1
 800184a:	f000 f803 	bl	8001854 <LCD_Command>
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
	...

08001854 <LCD_Command>:

void LCD_Command(char cmd) // Envia comandos para o display
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	71fb      	strb	r3, [r7, #7]

	writePort(cmd);
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff49 	bl	80016f8 <writePort>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	f44f 7180 	mov.w	r1, #256	; 0x100
 800186c:	480b      	ldr	r0, [pc, #44]	; (800189c <LCD_Command+0x48>)
 800186e:	f002 fbb6 	bl	8003fde <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 8001872:	2201      	movs	r2, #1
 8001874:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001878:	4808      	ldr	r0, [pc, #32]	; (800189c <LCD_Command+0x48>)
 800187a:	f002 fbb0 	bl	8003fde <HAL_GPIO_WritePin>
	asm("nop");
 800187e:	bf00      	nop
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 8001880:	2200      	movs	r2, #0
 8001882:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001886:	4805      	ldr	r0, [pc, #20]	; (800189c <LCD_Command+0x48>)
 8001888:	f002 fba9 	bl	8003fde <HAL_GPIO_WritePin>
	HAL_Delay(3);
 800188c:	2003      	movs	r0, #3
 800188e:	f001 fac9 	bl	8002e24 <HAL_Delay>
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40010c00 	.word	0x40010c00

080018a0 <LCD_Char>:

void LCD_Char(char dat) // Escreve um caractere no display
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	71fb      	strb	r3, [r7, #7]
	writePort(dat);
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff23 	bl	80016f8 <writePort>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 80018b2:	2201      	movs	r2, #1
 80018b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018b8:	480b      	ldr	r0, [pc, #44]	; (80018e8 <LCD_Char+0x48>)
 80018ba:	f002 fb90 	bl	8003fde <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 80018be:	2201      	movs	r2, #1
 80018c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018c4:	4808      	ldr	r0, [pc, #32]	; (80018e8 <LCD_Char+0x48>)
 80018c6:	f002 fb8a 	bl	8003fde <HAL_GPIO_WritePin>
	asm("nop");
 80018ca:	bf00      	nop
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 80018cc:	2200      	movs	r2, #0
 80018ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018d2:	4805      	ldr	r0, [pc, #20]	; (80018e8 <LCD_Char+0x48>)
 80018d4:	f002 fb83 	bl	8003fde <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80018d8:	2001      	movs	r0, #1
 80018da:	f001 faa3 	bl	8002e24 <HAL_Delay>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40010c00 	.word	0x40010c00

080018ec <LCD_String>:

void LCD_String(const char *msg) // Escreve uma string no display
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
	while((*msg)!=0)
 80018f4:	e093      	b.n	8001a1e <LCD_String+0x132>
	{
	    if((*msg) == aacentuado[0] && *(msg+1) == aacentuado[1]){
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	781a      	ldrb	r2, [r3, #0]
 80018fa:	4b4d      	ldr	r3, [pc, #308]	; (8001a30 <LCD_String+0x144>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d10d      	bne.n	800191e <LCD_String+0x32>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	3301      	adds	r3, #1
 8001906:	781a      	ldrb	r2, [r3, #0]
 8001908:	4b49      	ldr	r3, [pc, #292]	; (8001a30 <LCD_String+0x144>)
 800190a:	785b      	ldrb	r3, [r3, #1]
 800190c:	429a      	cmp	r2, r3
 800190e:	d106      	bne.n	800191e <LCD_String+0x32>
	    	LCD_Char(0);
 8001910:	2000      	movs	r0, #0
 8001912:	f7ff ffc5 	bl	80018a0 <LCD_Char>
	    	msg+=2;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	3302      	adds	r3, #2
 800191a:	607b      	str	r3, [r7, #4]
 800191c:	e07f      	b.n	8001a1e <LCD_String+0x132>
	    }
	    else if((*msg) == atil[0] && *(msg+1) == atil[1]){
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	781a      	ldrb	r2, [r3, #0]
 8001922:	4b44      	ldr	r3, [pc, #272]	; (8001a34 <LCD_String+0x148>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	429a      	cmp	r2, r3
 8001928:	d10d      	bne.n	8001946 <LCD_String+0x5a>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	3301      	adds	r3, #1
 800192e:	781a      	ldrb	r2, [r3, #0]
 8001930:	4b40      	ldr	r3, [pc, #256]	; (8001a34 <LCD_String+0x148>)
 8001932:	785b      	ldrb	r3, [r3, #1]
 8001934:	429a      	cmp	r2, r3
 8001936:	d106      	bne.n	8001946 <LCD_String+0x5a>
	    	LCD_Char(1);
 8001938:	2001      	movs	r0, #1
 800193a:	f7ff ffb1 	bl	80018a0 <LCD_Char>
	    	msg+=2;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3302      	adds	r3, #2
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	e06b      	b.n	8001a1e <LCD_String+0x132>
	    }
	    else if((*msg) == eacentuado[0] && *(msg+1) == eacentuado[1]){
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	781a      	ldrb	r2, [r3, #0]
 800194a:	4b3b      	ldr	r3, [pc, #236]	; (8001a38 <LCD_String+0x14c>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d10d      	bne.n	800196e <LCD_String+0x82>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	3301      	adds	r3, #1
 8001956:	781a      	ldrb	r2, [r3, #0]
 8001958:	4b37      	ldr	r3, [pc, #220]	; (8001a38 <LCD_String+0x14c>)
 800195a:	785b      	ldrb	r3, [r3, #1]
 800195c:	429a      	cmp	r2, r3
 800195e:	d106      	bne.n	800196e <LCD_String+0x82>
	    	LCD_Char(2);
 8001960:	2002      	movs	r0, #2
 8001962:	f7ff ff9d 	bl	80018a0 <LCD_Char>
	    	msg+=2;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	3302      	adds	r3, #2
 800196a:	607b      	str	r3, [r7, #4]
 800196c:	e057      	b.n	8001a1e <LCD_String+0x132>
	    }
	    else if((*msg) == otil[0] && *(msg+1) == otil[1]){
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	781a      	ldrb	r2, [r3, #0]
 8001972:	4b32      	ldr	r3, [pc, #200]	; (8001a3c <LCD_String+0x150>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d10d      	bne.n	8001996 <LCD_String+0xaa>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	3301      	adds	r3, #1
 800197e:	781a      	ldrb	r2, [r3, #0]
 8001980:	4b2e      	ldr	r3, [pc, #184]	; (8001a3c <LCD_String+0x150>)
 8001982:	785b      	ldrb	r3, [r3, #1]
 8001984:	429a      	cmp	r2, r3
 8001986:	d106      	bne.n	8001996 <LCD_String+0xaa>
	    	LCD_Char(3);
 8001988:	2003      	movs	r0, #3
 800198a:	f7ff ff89 	bl	80018a0 <LCD_Char>
	    	msg+=2;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	3302      	adds	r3, #2
 8001992:	607b      	str	r3, [r7, #4]
 8001994:	e043      	b.n	8001a1e <LCD_String+0x132>
	    }
	    else if((*msg) == ccedilha[0] && *(msg+1) == ccedilha[1]){
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	781a      	ldrb	r2, [r3, #0]
 800199a:	4b29      	ldr	r3, [pc, #164]	; (8001a40 <LCD_String+0x154>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d10d      	bne.n	80019be <LCD_String+0xd2>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3301      	adds	r3, #1
 80019a6:	781a      	ldrb	r2, [r3, #0]
 80019a8:	4b25      	ldr	r3, [pc, #148]	; (8001a40 <LCD_String+0x154>)
 80019aa:	785b      	ldrb	r3, [r3, #1]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d106      	bne.n	80019be <LCD_String+0xd2>
	    	LCD_Char(4);
 80019b0:	2004      	movs	r0, #4
 80019b2:	f7ff ff75 	bl	80018a0 <LCD_Char>
	    	msg+=2;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	3302      	adds	r3, #2
 80019ba:	607b      	str	r3, [r7, #4]
 80019bc:	e02f      	b.n	8001a1e <LCD_String+0x132>
	    }
	    else if((*msg) == oacentuado[0] && *(msg+1) == oacentuado[1]){
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	781a      	ldrb	r2, [r3, #0]
 80019c2:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <LCD_String+0x158>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d10d      	bne.n	80019e6 <LCD_String+0xfa>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	3301      	adds	r3, #1
 80019ce:	781a      	ldrb	r2, [r3, #0]
 80019d0:	4b1c      	ldr	r3, [pc, #112]	; (8001a44 <LCD_String+0x158>)
 80019d2:	785b      	ldrb	r3, [r3, #1]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d106      	bne.n	80019e6 <LCD_String+0xfa>
			LCD_Char(5);
 80019d8:	2005      	movs	r0, #5
 80019da:	f7ff ff61 	bl	80018a0 <LCD_Char>
			msg+=2;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3302      	adds	r3, #2
 80019e2:	607b      	str	r3, [r7, #4]
 80019e4:	e01b      	b.n	8001a1e <LCD_String+0x132>
	    }
	    else if((*msg) == grau[0] && *(msg+1) == grau[1]){
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	781a      	ldrb	r2, [r3, #0]
 80019ea:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <LCD_String+0x15c>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d10d      	bne.n	8001a0e <LCD_String+0x122>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	3301      	adds	r3, #1
 80019f6:	781a      	ldrb	r2, [r3, #0]
 80019f8:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <LCD_String+0x15c>)
 80019fa:	785b      	ldrb	r3, [r3, #1]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d106      	bne.n	8001a0e <LCD_String+0x122>
			LCD_Char(6);
 8001a00:	2006      	movs	r0, #6
 8001a02:	f7ff ff4d 	bl	80018a0 <LCD_Char>
			msg+=2;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	3302      	adds	r3, #2
 8001a0a:	607b      	str	r3, [r7, #4]
 8001a0c:	e007      	b.n	8001a1e <LCD_String+0x132>
	    }
	    else{
		  LCD_Char(*msg);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff ff44 	bl	80018a0 <LCD_Char>
		  msg++;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	607b      	str	r3, [r7, #4]
	while((*msg)!=0)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f47f af67 	bne.w	80018f6 <LCD_String+0xa>
	    }
	}
}
 8001a28:	bf00      	nop
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000038 	.word	0x20000038
 8001a34:	20000044 	.word	0x20000044
 8001a38:	2000003c 	.word	0x2000003c
 8001a3c:	20000040 	.word	0x20000040
 8001a40:	20000048 	.word	0x20000048
 8001a44:	2000004c 	.word	0x2000004c
 8001a48:	20000050 	.word	0x20000050

08001a4c <LCD_Custom_Char>:


void LCD_Custom_Char (unsigned char loc, unsigned char *msg) // Grava caracteres especiais na cgram
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	6039      	str	r1, [r7, #0]
 8001a56:	71fb      	strb	r3, [r7, #7]
    unsigned char i;
    if(loc<8)
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	2b07      	cmp	r3, #7
 8001a5c:	d817      	bhi.n	8001a8e <LCD_Custom_Char+0x42>
    {
     LCD_Command (0x40 + (loc*8));
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	3308      	adds	r3, #8
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff fef3 	bl	8001854 <LCD_Command>
     for(i=0;i<8;i++)
 8001a6e:	2300      	movs	r3, #0
 8001a70:	73fb      	strb	r3, [r7, #15]
 8001a72:	e009      	b.n	8001a88 <LCD_Custom_Char+0x3c>
        LCD_Char(msg[i]);
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	4413      	add	r3, r2
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ff0f 	bl	80018a0 <LCD_Char>
     for(i=0;i<8;i++)
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
 8001a84:	3301      	adds	r3, #1
 8001a86:	73fb      	strb	r3, [r7, #15]
 8001a88:	7bfb      	ldrb	r3, [r7, #15]
 8001a8a:	2b07      	cmp	r3, #7
 8001a8c:	d9f2      	bls.n	8001a74 <LCD_Custom_Char+0x28>
    }
}
 8001a8e:	bf00      	nop
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <LCD_String_xy>:

void LCD_String_xy(char row,char pos,const char *msg) // Escreve string na posição X Y desejada
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b084      	sub	sp, #16
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	603a      	str	r2, [r7, #0]
 8001aa0:	71fb      	strb	r3, [r7, #7]
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	71bb      	strb	r3, [r7, #6]
    char location=0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	73fb      	strb	r3, [r7, #15]
    if(row<=1)
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d80d      	bhi.n	8001acc <LCD_String_xy+0x36>
    {
        location=(0x80) | ((pos) & 0x0f);
 8001ab0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001ab4:	f003 030f 	and.w	r3, r3, #15
 8001ab8:	b25b      	sxtb	r3, r3
 8001aba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001abe:	b25b      	sxtb	r3, r3
 8001ac0:	73fb      	strb	r3, [r7, #15]
        LCD_Command(location);
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff fec5 	bl	8001854 <LCD_Command>
 8001aca:	e00c      	b.n	8001ae6 <LCD_String_xy+0x50>
    }
    else
    {
        location=(0xC0) | ((pos) & 0x0f);
 8001acc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001ad0:	f003 030f 	and.w	r3, r3, #15
 8001ad4:	b25b      	sxtb	r3, r3
 8001ad6:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001ada:	b25b      	sxtb	r3, r3
 8001adc:	73fb      	strb	r3, [r7, #15]
        LCD_Command(location);
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff feb7 	bl	8001854 <LCD_Command>
    }
    LCD_String(msg);
 8001ae6:	6838      	ldr	r0, [r7, #0]
 8001ae8:	f7ff ff00 	bl	80018ec <LCD_String>
}
 8001aec:	bf00      	nop
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001af4:	b5b0      	push	{r4, r5, r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  uint8_t read = 0, press_water=1;
 8001afa:	2300      	movs	r3, #0
 8001afc:	73fb      	strb	r3, [r7, #15]
 8001afe:	2301      	movs	r3, #1
 8001b00:	73bb      	strb	r3, [r7, #14]
  uint8_t opt_reader1, opt_reader2, opt_reader3;
  uint8_t type_of_drink;
  uint8_t confirm, cancel;
  uint8_t press_co2=1;
 8001b02:	2301      	movs	r3, #1
 8001b04:	737b      	strb	r3, [r7, #13]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b06:	f001 f92b 	bl	8002d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b0a:	f000 f913 	bl	8001d34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b0e:	f000 fba5 	bl	800225c <MX_GPIO_Init>
  MX_DMA_Init();
 8001b12:	f000 fb85 	bl	8002220 <MX_DMA_Init>
  MX_ADC1_Init();
 8001b16:	f000 f965 	bl	8001de4 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001b1a:	f000 fa59 	bl	8001fd0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b1e:	f000 fae3 	bl	80020e8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001b22:	f000 fb2f 	bl	8002184 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1 ); // TIM_CHANNEL_1 = PUMP_WATER
 8001b26:	2100      	movs	r1, #0
 8001b28:	4874      	ldr	r0, [pc, #464]	; (8001cfc <main+0x208>)
 8001b2a:	f003 f8fd 	bl	8004d28 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2 ); // TIM_CHANNEL_2 = HEATER
 8001b2e:	2104      	movs	r1, #4
 8001b30:	4872      	ldr	r0, [pc, #456]	; (8001cfc <main+0x208>)
 8001b32:	f003 f8f9 	bl	8004d28 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3 ); // TIM_CHANNEL_3 = COOLER
 8001b36:	2108      	movs	r1, #8
 8001b38:	4870      	ldr	r0, [pc, #448]	; (8001cfc <main+0x208>)
 8001b3a:	f003 f8f5 	bl	8004d28 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 8001b3e:	4870      	ldr	r0, [pc, #448]	; (8001d00 <main+0x20c>)
 8001b40:	f003 f848 	bl	8004bd4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 8001b44:	486f      	ldr	r0, [pc, #444]	; (8001d04 <main+0x210>)
 8001b46:	f003 f845 	bl	8004bd4 <HAL_TIM_Base_Start_IT>
	HAL_ADCEx_Calibration_Start(&hadc1);
 8001b4a:	486f      	ldr	r0, [pc, #444]	; (8001d08 <main+0x214>)
 8001b4c:	f001 fd3e 	bl	80035cc <HAL_ADCEx_Calibration_Start>
	LCD_Init();
 8001b50:	f7ff fe3a 	bl	80017c8 <LCD_Init>
	LCD_Clear();
 8001b54:	f7ff fe76 	bl	8001844 <LCD_Clear>
	t = time(NULL);
 8001b58:	2000      	movs	r0, #0
 8001b5a:	f004 f951 	bl	8005e00 <time>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	460c      	mov	r4, r1
 8001b62:	4a6a      	ldr	r2, [pc, #424]	; (8001d0c <main+0x218>)
 8001b64:	e9c2 3400 	strd	r3, r4, [r2]
	tm = *localtime(&t);
 8001b68:	4868      	ldr	r0, [pc, #416]	; (8001d0c <main+0x218>)
 8001b6a:	f003 ff5f 	bl	8005a2c <localtime>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	4b67      	ldr	r3, [pc, #412]	; (8001d10 <main+0x21c>)
 8001b72:	461c      	mov	r4, r3
 8001b74:	4615      	mov	r5, r2
 8001b76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b7e:	682b      	ldr	r3, [r5, #0]
 8001b80:	6023      	str	r3, [r4, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

while(1){
		begin:
		HAL_Delay(100);
 8001b82:	2064      	movs	r0, #100	; 0x64
 8001b84:	f001 f94e 	bl	8002e24 <HAL_Delay>
		sprintf(hora_string, "%02d:%02d:%02d", tm.tm_hour, tm.tm_min, tm.tm_sec);
 8001b88:	4b61      	ldr	r3, [pc, #388]	; (8001d10 <main+0x21c>)
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	4b60      	ldr	r3, [pc, #384]	; (8001d10 <main+0x21c>)
 8001b8e:	6859      	ldr	r1, [r3, #4]
 8001b90:	4b5f      	ldr	r3, [pc, #380]	; (8001d10 <main+0x21c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	460b      	mov	r3, r1
 8001b98:	495e      	ldr	r1, [pc, #376]	; (8001d14 <main+0x220>)
 8001b9a:	485f      	ldr	r0, [pc, #380]	; (8001d18 <main+0x224>)
 8001b9c:	f004 f910 	bl	8005dc0 <siprintf>
		LCD_String_xy(1,4,hora_string);
 8001ba0:	4a5d      	ldr	r2, [pc, #372]	; (8001d18 <main+0x224>)
 8001ba2:	2104      	movs	r1, #4
 8001ba4:	2001      	movs	r0, #1
 8001ba6:	f7ff ff76 	bl	8001a96 <LCD_String_xy>

		read = HAL_GPIO_ReadPin(GPIOA, READ_Pin);
 8001baa:	2180      	movs	r1, #128	; 0x80
 8001bac:	485b      	ldr	r0, [pc, #364]	; (8001d1c <main+0x228>)
 8001bae:	f002 f9ff 	bl	8003fb0 <HAL_GPIO_ReadPin>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	73fb      	strb	r3, [r7, #15]
		press_water = HAL_GPIO_ReadPin(GPIOC, PRESS_WATER_Pin);
 8001bb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bba:	4859      	ldr	r0, [pc, #356]	; (8001d20 <main+0x22c>)
 8001bbc:	f002 f9f8 	bl	8003fb0 <HAL_GPIO_ReadPin>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	73bb      	strb	r3, [r7, #14]
		if(press_water==0){
 8001bc4:	7bbb      	ldrb	r3, [r7, #14]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d11c      	bne.n	8001c04 <main+0x110>
			LCD_Clear();
 8001bca:	f7ff fe3b 	bl	8001844 <LCD_Clear>
			LCD_String_xy(1,3,"Sem água no");
 8001bce:	4a55      	ldr	r2, [pc, #340]	; (8001d24 <main+0x230>)
 8001bd0:	2103      	movs	r1, #3
 8001bd2:	2001      	movs	r0, #1
 8001bd4:	f7ff ff5f 	bl	8001a96 <LCD_String_xy>
			LCD_String_xy(2,3,"reservatório");
 8001bd8:	4a53      	ldr	r2, [pc, #332]	; (8001d28 <main+0x234>)
 8001bda:	2103      	movs	r1, #3
 8001bdc:	2002      	movs	r0, #2
 8001bde:	f7ff ff5a 	bl	8001a96 <LCD_String_xy>
			while(1){
				HAL_Delay(4000);
 8001be2:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001be6:	f001 f91d 	bl	8002e24 <HAL_Delay>
				press_water = HAL_GPIO_ReadPin(GPIOC, PRESS_WATER_Pin);
 8001bea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bee:	484c      	ldr	r0, [pc, #304]	; (8001d20 <main+0x22c>)
 8001bf0:	f002 f9de 	bl	8003fb0 <HAL_GPIO_ReadPin>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	73bb      	strb	r3, [r7, #14]
				if(press_water) {
 8001bf8:	7bbb      	ldrb	r3, [r7, #14]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d0f1      	beq.n	8001be2 <main+0xee>
					LCD_Clear();
 8001bfe:	f7ff fe21 	bl	8001844 <LCD_Clear>
					break;
 8001c02:	e079      	b.n	8001cf8 <main+0x204>
				}
			}
		}
		else if(read){ // Se for colocado uma cápsula
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0bb      	beq.n	8001b82 <main+0x8e>
			read = 0;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	73fb      	strb	r3, [r7, #15]
			opt_reader1 = HAL_GPIO_ReadPin(GPIOA, OPT_READ1_Pin); // Lê os códigos
 8001c0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c12:	4842      	ldr	r0, [pc, #264]	; (8001d1c <main+0x228>)
 8001c14:	f002 f9cc 	bl	8003fb0 <HAL_GPIO_ReadPin>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	733b      	strb	r3, [r7, #12]
			opt_reader2 = HAL_GPIO_ReadPin(GPIOA, OPT_READ2_Pin);
 8001c1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c20:	483e      	ldr	r0, [pc, #248]	; (8001d1c <main+0x228>)
 8001c22:	f002 f9c5 	bl	8003fb0 <HAL_GPIO_ReadPin>
 8001c26:	4603      	mov	r3, r0
 8001c28:	72fb      	strb	r3, [r7, #11]
			opt_reader3 = HAL_GPIO_ReadPin(GPIOA, OPT_READ3_Pin);
 8001c2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c2e:	483b      	ldr	r0, [pc, #236]	; (8001d1c <main+0x228>)
 8001c30:	f002 f9be 	bl	8003fb0 <HAL_GPIO_ReadPin>
 8001c34:	4603      	mov	r3, r0
 8001c36:	72bb      	strb	r3, [r7, #10]
			type_of_drink = read_type_of_capsule(opt_reader1, opt_reader2, opt_reader3); //Retorna tipo e mostra na tela
 8001c38:	7b3b      	ldrb	r3, [r7, #12]
 8001c3a:	7af9      	ldrb	r1, [r7, #11]
 8001c3c:	7aba      	ldrb	r2, [r7, #10]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff fb8a 	bl	8001358 <read_type_of_capsule>
 8001c44:	4603      	mov	r3, r0
 8001c46:	727b      	strb	r3, [r7, #9]
			if(type_of_drink==0){
 8001c48:	7a7b      	ldrb	r3, [r7, #9]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d106      	bne.n	8001c5c <main+0x168>
				HAL_Delay(3000); // Espera 3 segundos com a tela de erro
 8001c4e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001c52:	f001 f8e7 	bl	8002e24 <HAL_Delay>
				LCD_Clear();
 8001c56:	f7ff fdf5 	bl	8001844 <LCD_Clear>
 8001c5a:	e792      	b.n	8001b82 <main+0x8e>
			}
			else{ // Se for um tipo válido...
				if(type_of_drink==5 || type_of_drink==2){
 8001c5c:	7a7b      	ldrb	r3, [r7, #9]
 8001c5e:	2b05      	cmp	r3, #5
 8001c60:	d002      	beq.n	8001c68 <main+0x174>
 8001c62:	7a7b      	ldrb	r3, [r7, #9]
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d127      	bne.n	8001cb8 <main+0x1c4>
					press_co2 = HAL_GPIO_ReadPin(GPIOC, PRESS_CO2_Pin);
 8001c68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c6c:	482c      	ldr	r0, [pc, #176]	; (8001d20 <main+0x22c>)
 8001c6e:	f002 f99f 	bl	8003fb0 <HAL_GPIO_ReadPin>
 8001c72:	4603      	mov	r3, r0
 8001c74:	737b      	strb	r3, [r7, #13]
					if(press_co2==0){
 8001c76:	7b7b      	ldrb	r3, [r7, #13]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d11d      	bne.n	8001cb8 <main+0x1c4>
						LCD_Clear();
 8001c7c:	f7ff fde2 	bl	8001844 <LCD_Clear>
						LCD_String_xy(1,3,"Sem CO2 no");
 8001c80:	4a2a      	ldr	r2, [pc, #168]	; (8001d2c <main+0x238>)
 8001c82:	2103      	movs	r1, #3
 8001c84:	2001      	movs	r0, #1
 8001c86:	f7ff ff06 	bl	8001a96 <LCD_String_xy>
						LCD_String_xy(2,3,"reservatório");
 8001c8a:	4a27      	ldr	r2, [pc, #156]	; (8001d28 <main+0x234>)
 8001c8c:	2103      	movs	r1, #3
 8001c8e:	2002      	movs	r0, #2
 8001c90:	f7ff ff01 	bl	8001a96 <LCD_String_xy>
						while(1){
							HAL_Delay(4000);
 8001c94:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001c98:	f001 f8c4 	bl	8002e24 <HAL_Delay>
							press_co2 = HAL_GPIO_ReadPin(GPIOC, PRESS_CO2_Pin);
 8001c9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ca0:	481f      	ldr	r0, [pc, #124]	; (8001d20 <main+0x22c>)
 8001ca2:	f002 f985 	bl	8003fb0 <HAL_GPIO_ReadPin>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	737b      	strb	r3, [r7, #13]
							if(press_co2) {
 8001caa:	7b7b      	ldrb	r3, [r7, #13]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0f1      	beq.n	8001c94 <main+0x1a0>
								LCD_Clear();
 8001cb0:	f7ff fdc8 	bl	8001844 <LCD_Clear>
								break;
 8001cb4:	bf00      	nop
							}
						}
						goto begin;
 8001cb6:	e764      	b.n	8001b82 <main+0x8e>
					}
				}
				confirm = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	723b      	strb	r3, [r7, #8]
				while(1){
					confirm = HAL_GPIO_ReadPin(GPIOB, CONFIRM_Pin); // Espera confirmação ou cancelamento
 8001cbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cc0:	481b      	ldr	r0, [pc, #108]	; (8001d30 <main+0x23c>)
 8001cc2:	f002 f975 	bl	8003fb0 <HAL_GPIO_ReadPin>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	723b      	strb	r3, [r7, #8]
					cancel = HAL_GPIO_ReadPin(GPIOB, CANCEL_Pin);
 8001cca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cce:	4818      	ldr	r0, [pc, #96]	; (8001d30 <main+0x23c>)
 8001cd0:	f002 f96e 	bl	8003fb0 <HAL_GPIO_ReadPin>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	71fb      	strb	r3, [r7, #7]
					if(confirm==1){
 8001cd8:	7a3b      	ldrb	r3, [r7, #8]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d105      	bne.n	8001cea <main+0x1f6>
						preparing(type_of_drink, &hadc1);
 8001cde:	7a7b      	ldrb	r3, [r7, #9]
 8001ce0:	4909      	ldr	r1, [pc, #36]	; (8001d08 <main+0x214>)
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff fb9e 	bl	8001424 <preparing>
						break;
 8001ce8:	e004      	b.n	8001cf4 <main+0x200>
					}
					else if(cancel==1)	break;
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d000      	beq.n	8001cf2 <main+0x1fe>
					confirm = HAL_GPIO_ReadPin(GPIOB, CONFIRM_Pin); // Espera confirmação ou cancelamento
 8001cf0:	e7e4      	b.n	8001cbc <main+0x1c8>
					else if(cancel==1)	break;
 8001cf2:	bf00      	nop
				}
				LCD_Clear();
 8001cf4:	f7ff fda6 	bl	8001844 <LCD_Clear>
		begin:
 8001cf8:	e743      	b.n	8001b82 <main+0x8e>
 8001cfa:	bf00      	nop
 8001cfc:	2000042c 	.word	0x2000042c
 8001d00:	2000034c 	.word	0x2000034c
 8001d04:	200002f8 	.word	0x200002f8
 8001d08:	20000394 	.word	0x20000394
 8001d0c:	200002f0 	.word	0x200002f0
 8001d10:	200003c4 	.word	0x200003c4
 8001d14:	080075f4 	.word	0x080075f4
 8001d18:	20000340 	.word	0x20000340
 8001d1c:	40010800 	.word	0x40010800
 8001d20:	40011000 	.word	0x40011000
 8001d24:	08007604 	.word	0x08007604
 8001d28:	08007614 	.word	0x08007614
 8001d2c:	08007624 	.word	0x08007624
 8001d30:	40010c00 	.word	0x40010c00

08001d34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b094      	sub	sp, #80	; 0x50
 8001d38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d3e:	2228      	movs	r2, #40	; 0x28
 8001d40:	2100      	movs	r1, #0
 8001d42:	4618      	mov	r0, r3
 8001d44:	f003 ff7e 	bl	8005c44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d48:	f107 0314 	add.w	r3, r7, #20
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	609a      	str	r2, [r3, #8]
 8001d54:	60da      	str	r2, [r3, #12]
 8001d56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d58:	1d3b      	adds	r3, r7, #4
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	605a      	str	r2, [r3, #4]
 8001d60:	609a      	str	r2, [r3, #8]
 8001d62:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d64:	2302      	movs	r3, #2
 8001d66:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d6c:	2310      	movs	r3, #16
 8001d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d70:	2302      	movs	r3, #2
 8001d72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001d74:	2300      	movs	r3, #0
 8001d76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL14;
 8001d78:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8001d7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d82:	4618      	mov	r0, r3
 8001d84:	f002 f95c 	bl	8004040 <HAL_RCC_OscConfig>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001d8e:	f000 fb53 	bl	8002438 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d92:	230f      	movs	r3, #15
 8001d94:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d96:	2302      	movs	r3, #2
 8001d98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001da2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001da4:	2300      	movs	r3, #0
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001da8:	f107 0314 	add.w	r3, r7, #20
 8001dac:	2102      	movs	r1, #2
 8001dae:	4618      	mov	r0, r3
 8001db0:	f002 fbc6 	bl	8004540 <HAL_RCC_ClockConfig>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001dba:	f000 fb3d 	bl	8002438 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8001dc2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001dc6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dc8:	1d3b      	adds	r3, r7, #4
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f002 fd40 	bl	8004850 <HAL_RCCEx_PeriphCLKConfig>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001dd6:	f000 fb2f 	bl	8002438 <Error_Handler>
  }
}
 8001dda:	bf00      	nop
 8001ddc:	3750      	adds	r7, #80	; 0x50
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001dea:	1d3b      	adds	r3, r7, #4
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001df4:	4b74      	ldr	r3, [pc, #464]	; (8001fc8 <MX_ADC1_Init+0x1e4>)
 8001df6:	4a75      	ldr	r2, [pc, #468]	; (8001fcc <MX_ADC1_Init+0x1e8>)
 8001df8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001dfa:	4b73      	ldr	r3, [pc, #460]	; (8001fc8 <MX_ADC1_Init+0x1e4>)
 8001dfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e00:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001e02:	4b71      	ldr	r3, [pc, #452]	; (8001fc8 <MX_ADC1_Init+0x1e4>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e08:	4b6f      	ldr	r3, [pc, #444]	; (8001fc8 <MX_ADC1_Init+0x1e4>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e0e:	4b6e      	ldr	r3, [pc, #440]	; (8001fc8 <MX_ADC1_Init+0x1e4>)
 8001e10:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001e14:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e16:	4b6c      	ldr	r3, [pc, #432]	; (8001fc8 <MX_ADC1_Init+0x1e4>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 16;
 8001e1c:	4b6a      	ldr	r3, [pc, #424]	; (8001fc8 <MX_ADC1_Init+0x1e4>)
 8001e1e:	2210      	movs	r2, #16
 8001e20:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e22:	4869      	ldr	r0, [pc, #420]	; (8001fc8 <MX_ADC1_Init+0x1e4>)
 8001e24:	f001 f820 	bl	8002e68 <HAL_ADC_Init>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001e2e:	f000 fb03 	bl	8002438 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001e32:	2303      	movs	r3, #3
 8001e34:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e36:	2301      	movs	r3, #1
 8001e38:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e3e:	1d3b      	adds	r3, r7, #4
 8001e40:	4619      	mov	r1, r3
 8001e42:	4861      	ldr	r0, [pc, #388]	; (8001fc8 <MX_ADC1_Init+0x1e4>)
 8001e44:	f001 f9d8 	bl	80031f8 <HAL_ADC_ConfigChannel>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001e4e:	f000 faf3 	bl	8002438 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001e52:	2302      	movs	r3, #2
 8001e54:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e56:	1d3b      	adds	r3, r7, #4
 8001e58:	4619      	mov	r1, r3
 8001e5a:	485b      	ldr	r0, [pc, #364]	; (8001fc8 <MX_ADC1_Init+0x1e4>)
 8001e5c:	f001 f9cc 	bl	80031f8 <HAL_ADC_ConfigChannel>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001e66:	f000 fae7 	bl	8002438 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e6e:	1d3b      	adds	r3, r7, #4
 8001e70:	4619      	mov	r1, r3
 8001e72:	4855      	ldr	r0, [pc, #340]	; (8001fc8 <MX_ADC1_Init+0x1e4>)
 8001e74:	f001 f9c0 	bl	80031f8 <HAL_ADC_ConfigChannel>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8001e7e:	f000 fadb 	bl	8002438 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001e82:	2304      	movs	r3, #4
 8001e84:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e86:	1d3b      	adds	r3, r7, #4
 8001e88:	4619      	mov	r1, r3
 8001e8a:	484f      	ldr	r0, [pc, #316]	; (8001fc8 <MX_ADC1_Init+0x1e4>)
 8001e8c:	f001 f9b4 	bl	80031f8 <HAL_ADC_ConfigChannel>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001e96:	f000 facf 	bl	8002438 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001e9a:	2305      	movs	r3, #5
 8001e9c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e9e:	1d3b      	adds	r3, r7, #4
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4849      	ldr	r0, [pc, #292]	; (8001fc8 <MX_ADC1_Init+0x1e4>)
 8001ea4:	f001 f9a8 	bl	80031f8 <HAL_ADC_ConfigChannel>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8001eae:	f000 fac3 	bl	8002438 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001eb2:	2306      	movs	r3, #6
 8001eb4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001eb6:	1d3b      	adds	r3, r7, #4
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4843      	ldr	r0, [pc, #268]	; (8001fc8 <MX_ADC1_Init+0x1e4>)
 8001ebc:	f001 f99c 	bl	80031f8 <HAL_ADC_ConfigChannel>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8001ec6:	f000 fab7 	bl	8002438 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001eca:	2307      	movs	r3, #7
 8001ecc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ece:	1d3b      	adds	r3, r7, #4
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	483d      	ldr	r0, [pc, #244]	; (8001fc8 <MX_ADC1_Init+0x1e4>)
 8001ed4:	f001 f990 	bl	80031f8 <HAL_ADC_ConfigChannel>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8001ede:	f000 faab 	bl	8002438 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001ee2:	2308      	movs	r3, #8
 8001ee4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ee6:	1d3b      	adds	r3, r7, #4
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4837      	ldr	r0, [pc, #220]	; (8001fc8 <MX_ADC1_Init+0x1e4>)
 8001eec:	f001 f984 	bl	80031f8 <HAL_ADC_ConfigChannel>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001ef6:	f000 fa9f 	bl	8002438 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001efa:	2304      	movs	r3, #4
 8001efc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001efe:	2309      	movs	r3, #9
 8001f00:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f02:	1d3b      	adds	r3, r7, #4
 8001f04:	4619      	mov	r1, r3
 8001f06:	4830      	ldr	r0, [pc, #192]	; (8001fc8 <MX_ADC1_Init+0x1e4>)
 8001f08:	f001 f976 	bl	80031f8 <HAL_ADC_ConfigChannel>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8001f12:	f000 fa91 	bl	8002438 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001f16:	230a      	movs	r3, #10
 8001f18:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f1a:	1d3b      	adds	r3, r7, #4
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	482a      	ldr	r0, [pc, #168]	; (8001fc8 <MX_ADC1_Init+0x1e4>)
 8001f20:	f001 f96a 	bl	80031f8 <HAL_ADC_ConfigChannel>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <MX_ADC1_Init+0x14a>
  {
    Error_Handler();
 8001f2a:	f000 fa85 	bl	8002438 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8001f2e:	230b      	movs	r3, #11
 8001f30:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f32:	1d3b      	adds	r3, r7, #4
 8001f34:	4619      	mov	r1, r3
 8001f36:	4824      	ldr	r0, [pc, #144]	; (8001fc8 <MX_ADC1_Init+0x1e4>)
 8001f38:	f001 f95e 	bl	80031f8 <HAL_ADC_ConfigChannel>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <MX_ADC1_Init+0x162>
  {
    Error_Handler();
 8001f42:	f000 fa79 	bl	8002438 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8001f46:	230c      	movs	r3, #12
 8001f48:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f4a:	1d3b      	adds	r3, r7, #4
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	481e      	ldr	r0, [pc, #120]	; (8001fc8 <MX_ADC1_Init+0x1e4>)
 8001f50:	f001 f952 	bl	80031f8 <HAL_ADC_ConfigChannel>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_ADC1_Init+0x17a>
  {
    Error_Handler();
 8001f5a:	f000 fa6d 	bl	8002438 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8001f5e:	230d      	movs	r3, #13
 8001f60:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f62:	1d3b      	adds	r3, r7, #4
 8001f64:	4619      	mov	r1, r3
 8001f66:	4818      	ldr	r0, [pc, #96]	; (8001fc8 <MX_ADC1_Init+0x1e4>)
 8001f68:	f001 f946 	bl	80031f8 <HAL_ADC_ConfigChannel>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_ADC1_Init+0x192>
  {
    Error_Handler();
 8001f72:	f000 fa61 	bl	8002438 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8001f76:	230e      	movs	r3, #14
 8001f78:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f7a:	1d3b      	adds	r3, r7, #4
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4812      	ldr	r0, [pc, #72]	; (8001fc8 <MX_ADC1_Init+0x1e4>)
 8001f80:	f001 f93a 	bl	80031f8 <HAL_ADC_ConfigChannel>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_ADC1_Init+0x1aa>
  {
    Error_Handler();
 8001f8a:	f000 fa55 	bl	8002438 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_15;
 8001f8e:	230f      	movs	r3, #15
 8001f90:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f92:	1d3b      	adds	r3, r7, #4
 8001f94:	4619      	mov	r1, r3
 8001f96:	480c      	ldr	r0, [pc, #48]	; (8001fc8 <MX_ADC1_Init+0x1e4>)
 8001f98:	f001 f92e 	bl	80031f8 <HAL_ADC_ConfigChannel>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_ADC1_Init+0x1c2>
  {
    Error_Handler();
 8001fa2:	f000 fa49 	bl	8002438 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_16;
 8001fa6:	2310      	movs	r3, #16
 8001fa8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001faa:	1d3b      	adds	r3, r7, #4
 8001fac:	4619      	mov	r1, r3
 8001fae:	4806      	ldr	r0, [pc, #24]	; (8001fc8 <MX_ADC1_Init+0x1e4>)
 8001fb0:	f001 f922 	bl	80031f8 <HAL_ADC_ConfigChannel>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_ADC1_Init+0x1da>
  {
    Error_Handler();
 8001fba:	f000 fa3d 	bl	8002438 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001fbe:	bf00      	nop
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000394 	.word	0x20000394
 8001fcc:	40012400 	.word	0x40012400

08001fd0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b08e      	sub	sp, #56	; 0x38
 8001fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	605a      	str	r2, [r3, #4]
 8001fe0:	609a      	str	r2, [r3, #8]
 8001fe2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fe4:	f107 0320 	add.w	r3, r7, #32
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fee:	1d3b      	adds	r3, r7, #4
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	611a      	str	r2, [r3, #16]
 8001ffc:	615a      	str	r2, [r3, #20]
 8001ffe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002000:	4b38      	ldr	r3, [pc, #224]	; (80020e4 <MX_TIM2_Init+0x114>)
 8002002:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002006:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002008:	4b36      	ldr	r3, [pc, #216]	; (80020e4 <MX_TIM2_Init+0x114>)
 800200a:	2200      	movs	r2, #0
 800200c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800200e:	4b35      	ldr	r3, [pc, #212]	; (80020e4 <MX_TIM2_Init+0x114>)
 8002010:	2200      	movs	r2, #0
 8002012:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000-1;
 8002014:	4b33      	ldr	r3, [pc, #204]	; (80020e4 <MX_TIM2_Init+0x114>)
 8002016:	f640 729f 	movw	r2, #3999	; 0xf9f
 800201a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800201c:	4b31      	ldr	r3, [pc, #196]	; (80020e4 <MX_TIM2_Init+0x114>)
 800201e:	2200      	movs	r2, #0
 8002020:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002022:	4b30      	ldr	r3, [pc, #192]	; (80020e4 <MX_TIM2_Init+0x114>)
 8002024:	2280      	movs	r2, #128	; 0x80
 8002026:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002028:	482e      	ldr	r0, [pc, #184]	; (80020e4 <MX_TIM2_Init+0x114>)
 800202a:	f002 fd83 	bl	8004b34 <HAL_TIM_Base_Init>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002034:	f000 fa00 	bl	8002438 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800203c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800203e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002042:	4619      	mov	r1, r3
 8002044:	4827      	ldr	r0, [pc, #156]	; (80020e4 <MX_TIM2_Init+0x114>)
 8002046:	f003 f8d7 	bl	80051f8 <HAL_TIM_ConfigClockSource>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002050:	f000 f9f2 	bl	8002438 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002054:	4823      	ldr	r0, [pc, #140]	; (80020e4 <MX_TIM2_Init+0x114>)
 8002056:	f002 fe0f 	bl	8004c78 <HAL_TIM_PWM_Init>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002060:	f000 f9ea 	bl	8002438 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002064:	2300      	movs	r3, #0
 8002066:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002068:	2300      	movs	r3, #0
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800206c:	f107 0320 	add.w	r3, r7, #32
 8002070:	4619      	mov	r1, r3
 8002072:	481c      	ldr	r0, [pc, #112]	; (80020e4 <MX_TIM2_Init+0x114>)
 8002074:	f003 fc40 	bl	80058f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800207e:	f000 f9db 	bl	8002438 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002082:	2360      	movs	r3, #96	; 0x60
 8002084:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002086:	2300      	movs	r3, #0
 8002088:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800208e:	2300      	movs	r3, #0
 8002090:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002092:	1d3b      	adds	r3, r7, #4
 8002094:	2200      	movs	r2, #0
 8002096:	4619      	mov	r1, r3
 8002098:	4812      	ldr	r0, [pc, #72]	; (80020e4 <MX_TIM2_Init+0x114>)
 800209a:	f002 ffef 	bl	800507c <HAL_TIM_PWM_ConfigChannel>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80020a4:	f000 f9c8 	bl	8002438 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020a8:	1d3b      	adds	r3, r7, #4
 80020aa:	2204      	movs	r2, #4
 80020ac:	4619      	mov	r1, r3
 80020ae:	480d      	ldr	r0, [pc, #52]	; (80020e4 <MX_TIM2_Init+0x114>)
 80020b0:	f002 ffe4 	bl	800507c <HAL_TIM_PWM_ConfigChannel>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80020ba:	f000 f9bd 	bl	8002438 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020be:	1d3b      	adds	r3, r7, #4
 80020c0:	2208      	movs	r2, #8
 80020c2:	4619      	mov	r1, r3
 80020c4:	4807      	ldr	r0, [pc, #28]	; (80020e4 <MX_TIM2_Init+0x114>)
 80020c6:	f002 ffd9 	bl	800507c <HAL_TIM_PWM_ConfigChannel>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 80020d0:	f000 f9b2 	bl	8002438 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80020d4:	4803      	ldr	r0, [pc, #12]	; (80020e4 <MX_TIM2_Init+0x114>)
 80020d6:	f000 fd69 	bl	8002bac <HAL_TIM_MspPostInit>

}
 80020da:	bf00      	nop
 80020dc:	3738      	adds	r7, #56	; 0x38
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	2000042c 	.word	0x2000042c

080020e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ee:	f107 0308 	add.w	r3, r7, #8
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	605a      	str	r2, [r3, #4]
 80020f8:	609a      	str	r2, [r3, #8]
 80020fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020fc:	463b      	mov	r3, r7
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002104:	4b1d      	ldr	r3, [pc, #116]	; (800217c <MX_TIM3_Init+0x94>)
 8002106:	4a1e      	ldr	r2, [pc, #120]	; (8002180 <MX_TIM3_Init+0x98>)
 8002108:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000;
 800210a:	4b1c      	ldr	r3, [pc, #112]	; (800217c <MX_TIM3_Init+0x94>)
 800210c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002110:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002112:	4b1a      	ldr	r3, [pc, #104]	; (800217c <MX_TIM3_Init+0x94>)
 8002114:	2200      	movs	r2, #0
 8002116:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16800-1;
 8002118:	4b18      	ldr	r3, [pc, #96]	; (800217c <MX_TIM3_Init+0x94>)
 800211a:	f244 129f 	movw	r2, #16799	; 0x419f
 800211e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002120:	4b16      	ldr	r3, [pc, #88]	; (800217c <MX_TIM3_Init+0x94>)
 8002122:	2200      	movs	r2, #0
 8002124:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002126:	4b15      	ldr	r3, [pc, #84]	; (800217c <MX_TIM3_Init+0x94>)
 8002128:	2200      	movs	r2, #0
 800212a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800212c:	4813      	ldr	r0, [pc, #76]	; (800217c <MX_TIM3_Init+0x94>)
 800212e:	f002 fd01 	bl	8004b34 <HAL_TIM_Base_Init>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002138:	f000 f97e 	bl	8002438 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800213c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002140:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002142:	f107 0308 	add.w	r3, r7, #8
 8002146:	4619      	mov	r1, r3
 8002148:	480c      	ldr	r0, [pc, #48]	; (800217c <MX_TIM3_Init+0x94>)
 800214a:	f003 f855 	bl	80051f8 <HAL_TIM_ConfigClockSource>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002154:	f000 f970 	bl	8002438 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002158:	2300      	movs	r3, #0
 800215a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800215c:	2300      	movs	r3, #0
 800215e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002160:	463b      	mov	r3, r7
 8002162:	4619      	mov	r1, r3
 8002164:	4805      	ldr	r0, [pc, #20]	; (800217c <MX_TIM3_Init+0x94>)
 8002166:	f003 fbc7 	bl	80058f8 <HAL_TIMEx_MasterConfigSynchronization>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002170:	f000 f962 	bl	8002438 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002174:	bf00      	nop
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	2000034c 	.word	0x2000034c
 8002180:	40000400 	.word	0x40000400

08002184 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800218a:	f107 0308 	add.w	r3, r7, #8
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	605a      	str	r2, [r3, #4]
 8002194:	609a      	str	r2, [r3, #8]
 8002196:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002198:	463b      	mov	r3, r7
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80021a0:	4b1d      	ldr	r3, [pc, #116]	; (8002218 <MX_TIM4_Init+0x94>)
 80021a2:	4a1e      	ldr	r2, [pc, #120]	; (800221c <MX_TIM4_Init+0x98>)
 80021a4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2000;
 80021a6:	4b1c      	ldr	r3, [pc, #112]	; (8002218 <MX_TIM4_Init+0x94>)
 80021a8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80021ac:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ae:	4b1a      	ldr	r3, [pc, #104]	; (8002218 <MX_TIM4_Init+0x94>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 28000-1;
 80021b4:	4b18      	ldr	r3, [pc, #96]	; (8002218 <MX_TIM4_Init+0x94>)
 80021b6:	f646 525f 	movw	r2, #27999	; 0x6d5f
 80021ba:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021bc:	4b16      	ldr	r3, [pc, #88]	; (8002218 <MX_TIM4_Init+0x94>)
 80021be:	2200      	movs	r2, #0
 80021c0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c2:	4b15      	ldr	r3, [pc, #84]	; (8002218 <MX_TIM4_Init+0x94>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80021c8:	4813      	ldr	r0, [pc, #76]	; (8002218 <MX_TIM4_Init+0x94>)
 80021ca:	f002 fcb3 	bl	8004b34 <HAL_TIM_Base_Init>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80021d4:	f000 f930 	bl	8002438 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80021de:	f107 0308 	add.w	r3, r7, #8
 80021e2:	4619      	mov	r1, r3
 80021e4:	480c      	ldr	r0, [pc, #48]	; (8002218 <MX_TIM4_Init+0x94>)
 80021e6:	f003 f807 	bl	80051f8 <HAL_TIM_ConfigClockSource>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80021f0:	f000 f922 	bl	8002438 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021f4:	2300      	movs	r3, #0
 80021f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021f8:	2300      	movs	r3, #0
 80021fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80021fc:	463b      	mov	r3, r7
 80021fe:	4619      	mov	r1, r3
 8002200:	4805      	ldr	r0, [pc, #20]	; (8002218 <MX_TIM4_Init+0x94>)
 8002202:	f003 fb79 	bl	80058f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800220c:	f000 f914 	bl	8002438 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002210:	bf00      	nop
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	200002f8 	.word	0x200002f8
 800221c:	40000800 	.word	0x40000800

08002220 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002226:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <MX_DMA_Init+0x38>)
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	4a0b      	ldr	r2, [pc, #44]	; (8002258 <MX_DMA_Init+0x38>)
 800222c:	f043 0301 	orr.w	r3, r3, #1
 8002230:	6153      	str	r3, [r2, #20]
 8002232:	4b09      	ldr	r3, [pc, #36]	; (8002258 <MX_DMA_Init+0x38>)
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	607b      	str	r3, [r7, #4]
 800223c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800223e:	2200      	movs	r2, #0
 8002240:	2100      	movs	r1, #0
 8002242:	200b      	movs	r0, #11
 8002244:	f001 fb35 	bl	80038b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002248:	200b      	movs	r0, #11
 800224a:	f001 fb4e 	bl	80038ea <HAL_NVIC_EnableIRQ>

}
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40021000 	.word	0x40021000

0800225c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b088      	sub	sp, #32
 8002260:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002262:	f107 0310 	add.w	r3, r7, #16
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	605a      	str	r2, [r3, #4]
 800226c:	609a      	str	r2, [r3, #8]
 800226e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002270:	4b4c      	ldr	r3, [pc, #304]	; (80023a4 <MX_GPIO_Init+0x148>)
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	4a4b      	ldr	r2, [pc, #300]	; (80023a4 <MX_GPIO_Init+0x148>)
 8002276:	f043 0310 	orr.w	r3, r3, #16
 800227a:	6193      	str	r3, [r2, #24]
 800227c:	4b49      	ldr	r3, [pc, #292]	; (80023a4 <MX_GPIO_Init+0x148>)
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	f003 0310 	and.w	r3, r3, #16
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002288:	4b46      	ldr	r3, [pc, #280]	; (80023a4 <MX_GPIO_Init+0x148>)
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	4a45      	ldr	r2, [pc, #276]	; (80023a4 <MX_GPIO_Init+0x148>)
 800228e:	f043 0320 	orr.w	r3, r3, #32
 8002292:	6193      	str	r3, [r2, #24]
 8002294:	4b43      	ldr	r3, [pc, #268]	; (80023a4 <MX_GPIO_Init+0x148>)
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	f003 0320 	and.w	r3, r3, #32
 800229c:	60bb      	str	r3, [r7, #8]
 800229e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a0:	4b40      	ldr	r3, [pc, #256]	; (80023a4 <MX_GPIO_Init+0x148>)
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	4a3f      	ldr	r2, [pc, #252]	; (80023a4 <MX_GPIO_Init+0x148>)
 80022a6:	f043 0304 	orr.w	r3, r3, #4
 80022aa:	6193      	str	r3, [r2, #24]
 80022ac:	4b3d      	ldr	r3, [pc, #244]	; (80023a4 <MX_GPIO_Init+0x148>)
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	607b      	str	r3, [r7, #4]
 80022b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b8:	4b3a      	ldr	r3, [pc, #232]	; (80023a4 <MX_GPIO_Init+0x148>)
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	4a39      	ldr	r2, [pc, #228]	; (80023a4 <MX_GPIO_Init+0x148>)
 80022be:	f043 0308 	orr.w	r3, r3, #8
 80022c2:	6193      	str	r3, [r2, #24]
 80022c4:	4b37      	ldr	r3, [pc, #220]	; (80023a4 <MX_GPIO_Init+0x148>)
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	f003 0308 	and.w	r3, r3, #8
 80022cc:	603b      	str	r3, [r7, #0]
 80022ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80022d0:	2200      	movs	r2, #0
 80022d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022d6:	4834      	ldr	r0, [pc, #208]	; (80023a8 <MX_GPIO_Init+0x14c>)
 80022d8:	f001 fe81 	bl	8003fde <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, VALV_WATER_Pin|VALV_CO2_Pin|VALV_HOT_WATER_Pin|VALV_COLD_WATER_Pin
 80022dc:	2200      	movs	r2, #0
 80022de:	f640 71fb 	movw	r1, #4091	; 0xffb
 80022e2:	4832      	ldr	r0, [pc, #200]	; (80023ac <MX_GPIO_Init+0x150>)
 80022e4:	f001 fe7b 	bl	8003fde <HAL_GPIO_WritePin>
                          |B3_Pin|B4_Pin|B5_Pin|B6_Pin
                          |B7_Pin|RS_Pin|E_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, B0_Pin|B1_Pin|B2_Pin, GPIO_PIN_RESET);
 80022e8:	2200      	movs	r2, #0
 80022ea:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 80022ee:	4830      	ldr	r0, [pc, #192]	; (80023b0 <MX_GPIO_Init+0x154>)
 80022f0:	f001 fe75 	bl	8003fde <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80022f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022fa:	2301      	movs	r3, #1
 80022fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002302:	2302      	movs	r3, #2
 8002304:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002306:	f107 0310 	add.w	r3, r7, #16
 800230a:	4619      	mov	r1, r3
 800230c:	4826      	ldr	r0, [pc, #152]	; (80023a8 <MX_GPIO_Init+0x14c>)
 800230e:	f001 fcf5 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PRESS_WATER_Pin PRESS_CO2_Pin */
  GPIO_InitStruct.Pin = PRESS_WATER_Pin|PRESS_CO2_Pin;
 8002312:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002316:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002320:	f107 0310 	add.w	r3, r7, #16
 8002324:	4619      	mov	r1, r3
 8002326:	4820      	ldr	r0, [pc, #128]	; (80023a8 <MX_GPIO_Init+0x14c>)
 8002328:	f001 fce8 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : READ_Pin OPT_READ1_Pin OPT_READ2_Pin OPT_READ3_Pin */
  GPIO_InitStruct.Pin = READ_Pin|OPT_READ1_Pin|OPT_READ2_Pin|OPT_READ3_Pin;
 800232c:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8002330:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002332:	2300      	movs	r3, #0
 8002334:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002336:	2300      	movs	r3, #0
 8002338:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800233a:	f107 0310 	add.w	r3, r7, #16
 800233e:	4619      	mov	r1, r3
 8002340:	481b      	ldr	r0, [pc, #108]	; (80023b0 <MX_GPIO_Init+0x154>)
 8002342:	f001 fcdb 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : VALV_WATER_Pin VALV_CO2_Pin VALV_HOT_WATER_Pin VALV_COLD_WATER_Pin
                           B3_Pin B4_Pin B5_Pin B6_Pin
                           B7_Pin RS_Pin E_Pin */
  GPIO_InitStruct.Pin = VALV_WATER_Pin|VALV_CO2_Pin|VALV_HOT_WATER_Pin|VALV_COLD_WATER_Pin
 8002346:	f640 73fb 	movw	r3, #4091	; 0xffb
 800234a:	613b      	str	r3, [r7, #16]
                          |B3_Pin|B4_Pin|B5_Pin|B6_Pin
                          |B7_Pin|RS_Pin|E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800234c:	2301      	movs	r3, #1
 800234e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002350:	2300      	movs	r3, #0
 8002352:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002354:	2302      	movs	r3, #2
 8002356:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002358:	f107 0310 	add.w	r3, r7, #16
 800235c:	4619      	mov	r1, r3
 800235e:	4813      	ldr	r0, [pc, #76]	; (80023ac <MX_GPIO_Init+0x150>)
 8002360:	f001 fccc 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : CANCEL_Pin ADD_Pin SUB_Pin CONFIRM_Pin */
  GPIO_InitStruct.Pin = CANCEL_Pin|ADD_Pin|SUB_Pin|CONFIRM_Pin;
 8002364:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002368:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236e:	2300      	movs	r3, #0
 8002370:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002372:	f107 0310 	add.w	r3, r7, #16
 8002376:	4619      	mov	r1, r3
 8002378:	480c      	ldr	r0, [pc, #48]	; (80023ac <MX_GPIO_Init+0x150>)
 800237a:	f001 fcbf 	bl	8003cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : B0_Pin B1_Pin B2_Pin */
  GPIO_InitStruct.Pin = B0_Pin|B1_Pin|B2_Pin;
 800237e:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 8002382:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002384:	2301      	movs	r3, #1
 8002386:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238c:	2302      	movs	r3, #2
 800238e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002390:	f107 0310 	add.w	r3, r7, #16
 8002394:	4619      	mov	r1, r3
 8002396:	4806      	ldr	r0, [pc, #24]	; (80023b0 <MX_GPIO_Init+0x154>)
 8002398:	f001 fcb0 	bl	8003cfc <HAL_GPIO_Init>

}
 800239c:	bf00      	nop
 800239e:	3720      	adds	r7, #32
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40021000 	.word	0x40021000
 80023a8:	40011000 	.word	0x40011000
 80023ac:	40010c00 	.word	0x40010c00
 80023b0:	40010800 	.word	0x40010800

080023b4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
	if(htim == &htim3) HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a1a      	ldr	r2, [pc, #104]	; (8002428 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d104      	bne.n	80023ce <HAL_TIM_PeriodElapsedCallback+0x1a>
 80023c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023c8:	4818      	ldr	r0, [pc, #96]	; (800242c <HAL_TIM_PeriodElapsedCallback+0x78>)
 80023ca:	f001 fe20 	bl	800400e <HAL_GPIO_TogglePin>
	if(htim == &htim4){
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a17      	ldr	r2, [pc, #92]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d123      	bne.n	800241e <HAL_TIM_PeriodElapsedCallback+0x6a>
		tm.tm_sec++;
 80023d6:	4b17      	ldr	r3, [pc, #92]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	3301      	adds	r3, #1
 80023dc:	4a15      	ldr	r2, [pc, #84]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80023de:	6013      	str	r3, [r2, #0]
		if(tm.tm_sec>=60){
 80023e0:	4b14      	ldr	r3, [pc, #80]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b3b      	cmp	r3, #59	; 0x3b
 80023e6:	dd07      	ble.n	80023f8 <HAL_TIM_PeriodElapsedCallback+0x44>
			tm.tm_sec=0;
 80023e8:	4b12      	ldr	r3, [pc, #72]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
			tm.tm_min+=1;
 80023ee:	4b11      	ldr	r3, [pc, #68]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	3301      	adds	r3, #1
 80023f4:	4a0f      	ldr	r2, [pc, #60]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80023f6:	6053      	str	r3, [r2, #4]
		}
		if(tm.tm_min>=60){
 80023f8:	4b0e      	ldr	r3, [pc, #56]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	2b3b      	cmp	r3, #59	; 0x3b
 80023fe:	dd07      	ble.n	8002410 <HAL_TIM_PeriodElapsedCallback+0x5c>
			tm.tm_min=0;
 8002400:	4b0c      	ldr	r3, [pc, #48]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002402:	2200      	movs	r2, #0
 8002404:	605a      	str	r2, [r3, #4]
			tm.tm_hour+=1;
 8002406:	4b0b      	ldr	r3, [pc, #44]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	3301      	adds	r3, #1
 800240c:	4a09      	ldr	r2, [pc, #36]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800240e:	6093      	str	r3, [r2, #8]
		}
		if(tm.tm_hour>=24){
 8002410:	4b08      	ldr	r3, [pc, #32]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	2b17      	cmp	r3, #23
 8002416:	dd02      	ble.n	800241e <HAL_TIM_PeriodElapsedCallback+0x6a>
			tm.tm_hour=0;
 8002418:	4b06      	ldr	r3, [pc, #24]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800241a:	2200      	movs	r2, #0
 800241c:	609a      	str	r2, [r3, #8]
		}
	}
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	2000034c 	.word	0x2000034c
 800242c:	40011000 	.word	0x40011000
 8002430:	200002f8 	.word	0x200002f8
 8002434:	200003c4 	.word	0x200003c4

08002438 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr

08002444 <add_water>:
uint32_t adcData[16];
float adc1, temperature1;
float adc2, temperature2;
uint32_t dutyCycle = 0, flag = 0;

void add_water(int time, int type){ // Type 0 - Natural, Type 1 - Quente, Type 2 = Gelada
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
	if(type == 0)HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d105      	bne.n	8002460 <add_water+0x1c>
 8002454:	2201      	movs	r2, #1
 8002456:	2101      	movs	r1, #1
 8002458:	4838      	ldr	r0, [pc, #224]	; (800253c <add_water+0xf8>)
 800245a:	f001 fdc0 	bl	8003fde <HAL_GPIO_WritePin>
 800245e:	e012      	b.n	8002486 <add_water+0x42>
	else if (type == 1) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d106      	bne.n	8002474 <add_water+0x30>
 8002466:	2201      	movs	r2, #1
 8002468:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800246c:	4833      	ldr	r0, [pc, #204]	; (800253c <add_water+0xf8>)
 800246e:	f001 fdb6 	bl	8003fde <HAL_GPIO_WritePin>
 8002472:	e008      	b.n	8002486 <add_water+0x42>
	else if (type == 2) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	2b02      	cmp	r3, #2
 8002478:	d105      	bne.n	8002486 <add_water+0x42>
 800247a:	2201      	movs	r2, #1
 800247c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002480:	482e      	ldr	r0, [pc, #184]	; (800253c <add_water+0xf8>)
 8002482:	f001 fdac 	bl	8003fde <HAL_GPIO_WritePin>
	LCD_String_xy(2,2,"Adic. água...");
 8002486:	4a2e      	ldr	r2, [pc, #184]	; (8002540 <add_water+0xfc>)
 8002488:	2102      	movs	r1, #2
 800248a:	2002      	movs	r0, #2
 800248c:	f7ff fb03 	bl	8001a96 <LCD_String_xy>
	while(dutyCycle < 200){ // 0.2 ms para rampa de subida
 8002490:	e010      	b.n	80024b4 <add_water+0x70>
		TIM2->CCR1 = dutyCycle*20;
 8002492:	4b2c      	ldr	r3, [pc, #176]	; (8002544 <add_water+0x100>)
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800249a:	4613      	mov	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	634b      	str	r3, [r1, #52]	; 0x34
		dutyCycle +=1;
 80024a4:	4b27      	ldr	r3, [pc, #156]	; (8002544 <add_water+0x100>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	3301      	adds	r3, #1
 80024aa:	4a26      	ldr	r2, [pc, #152]	; (8002544 <add_water+0x100>)
 80024ac:	6013      	str	r3, [r2, #0]
		HAL_Delay(1);
 80024ae:	2001      	movs	r0, #1
 80024b0:	f000 fcb8 	bl	8002e24 <HAL_Delay>
	while(dutyCycle < 200){ // 0.2 ms para rampa de subida
 80024b4:	4b23      	ldr	r3, [pc, #140]	; (8002544 <add_water+0x100>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2bc7      	cmp	r3, #199	; 0xc7
 80024ba:	d9ea      	bls.n	8002492 <add_water+0x4e>
	}
	HAL_Delay(time-450); // permanece o tempo necessário com a bomba aberta
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f5a3 73e1 	sub.w	r3, r3, #450	; 0x1c2
 80024c2:	4618      	mov	r0, r3
 80024c4:	f000 fcae 	bl	8002e24 <HAL_Delay>
	dutyCycle = 250;
 80024c8:	4b1e      	ldr	r3, [pc, #120]	; (8002544 <add_water+0x100>)
 80024ca:	22fa      	movs	r2, #250	; 0xfa
 80024cc:	601a      	str	r2, [r3, #0]
	while(dutyCycle>0){ // 0.25 para rampa de descida
 80024ce:	e00d      	b.n	80024ec <add_water+0xa8>
		TIM2->CCR1 = dutyCycle * 16;
 80024d0:	4b1c      	ldr	r3, [pc, #112]	; (8002544 <add_water+0x100>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024d8:	011b      	lsls	r3, r3, #4
 80024da:	6353      	str	r3, [r2, #52]	; 0x34
		dutyCycle -=1;
 80024dc:	4b19      	ldr	r3, [pc, #100]	; (8002544 <add_water+0x100>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	3b01      	subs	r3, #1
 80024e2:	4a18      	ldr	r2, [pc, #96]	; (8002544 <add_water+0x100>)
 80024e4:	6013      	str	r3, [r2, #0]
		HAL_Delay(1);
 80024e6:	2001      	movs	r0, #1
 80024e8:	f000 fc9c 	bl	8002e24 <HAL_Delay>
	while(dutyCycle>0){ // 0.25 para rampa de descida
 80024ec:	4b15      	ldr	r3, [pc, #84]	; (8002544 <add_water+0x100>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1ed      	bne.n	80024d0 <add_water+0x8c>
	}
	TIM2->CCR1 = 0;
 80024f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024f8:	2200      	movs	r2, #0
 80024fa:	635a      	str	r2, [r3, #52]	; 0x34
	if(type == 0)HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d105      	bne.n	800250e <add_water+0xca>
 8002502:	2200      	movs	r2, #0
 8002504:	2101      	movs	r1, #1
 8002506:	480d      	ldr	r0, [pc, #52]	; (800253c <add_water+0xf8>)
 8002508:	f001 fd69 	bl	8003fde <HAL_GPIO_WritePin>
	else if (type == 1) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
	else if (type == 2) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
}
 800250c:	e012      	b.n	8002534 <add_water+0xf0>
	else if (type == 1) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d106      	bne.n	8002522 <add_water+0xde>
 8002514:	2200      	movs	r2, #0
 8002516:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800251a:	4808      	ldr	r0, [pc, #32]	; (800253c <add_water+0xf8>)
 800251c:	f001 fd5f 	bl	8003fde <HAL_GPIO_WritePin>
}
 8002520:	e008      	b.n	8002534 <add_water+0xf0>
	else if (type == 2) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	2b02      	cmp	r3, #2
 8002526:	d105      	bne.n	8002534 <add_water+0xf0>
 8002528:	2200      	movs	r2, #0
 800252a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800252e:	4803      	ldr	r0, [pc, #12]	; (800253c <add_water+0xf8>)
 8002530:	f001 fd55 	bl	8003fde <HAL_GPIO_WritePin>
}
 8002534:	bf00      	nop
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40010c00 	.word	0x40010c00
 8002540:	08007630 	.word	0x08007630
 8002544:	200002b4 	.word	0x200002b4

08002548 <add_co2>:

void add_co2(int time){
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
	LCD_String_xy(2,2,"Adic. CO2...");
 8002550:	4a0b      	ldr	r2, [pc, #44]	; (8002580 <add_co2+0x38>)
 8002552:	2102      	movs	r1, #2
 8002554:	2002      	movs	r0, #2
 8002556:	f7ff fa9e 	bl	8001a96 <LCD_String_xy>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800255a:	2201      	movs	r2, #1
 800255c:	2102      	movs	r1, #2
 800255e:	4809      	ldr	r0, [pc, #36]	; (8002584 <add_co2+0x3c>)
 8002560:	f001 fd3d 	bl	8003fde <HAL_GPIO_WritePin>
	HAL_Delay(time);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4618      	mov	r0, r3
 8002568:	f000 fc5c 	bl	8002e24 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 800256c:	2200      	movs	r2, #0
 800256e:	2102      	movs	r1, #2
 8002570:	4804      	ldr	r0, [pc, #16]	; (8002584 <add_co2+0x3c>)
 8002572:	f001 fd34 	bl	8003fde <HAL_GPIO_WritePin>
}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	08007640 	.word	0x08007640
 8002584:	40010c00 	.word	0x40010c00

08002588 <heater>:

void heater(float desired_temperature, ADC_HandleTypeDef* hadc1){
 8002588:	b590      	push	{r4, r7, lr}
 800258a:	b089      	sub	sp, #36	; 0x24
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
	int i, j, kp=40;
 8002592:	2328      	movs	r3, #40	; 0x28
 8002594:	617b      	str	r3, [r7, #20]
	char string_t[4];
	float error;
	LCD_Clear();
 8002596:	f7ff f955 	bl	8001844 <LCD_Clear>
	LCD_String_xy(1,2,"Aquecendo...");
 800259a:	4a75      	ldr	r2, [pc, #468]	; (8002770 <heater+0x1e8>)
 800259c:	2102      	movs	r1, #2
 800259e:	2001      	movs	r0, #1
 80025a0:	f7ff fa79 	bl	8001a96 <LCD_String_xy>
	LCD_String_xy(2,1,"Até ");
 80025a4:	4a73      	ldr	r2, [pc, #460]	; (8002774 <heater+0x1ec>)
 80025a6:	2101      	movs	r1, #1
 80025a8:	2002      	movs	r0, #2
 80025aa:	f7ff fa74 	bl	8001a96 <LCD_String_xy>
	LCD_String_xy(2,7,"°C");
 80025ae:	4a72      	ldr	r2, [pc, #456]	; (8002778 <heater+0x1f0>)
 80025b0:	2107      	movs	r1, #7
 80025b2:	2002      	movs	r0, #2
 80025b4:	f7ff fa6f 	bl	8001a96 <LCD_String_xy>
	LCD_String_xy(2,10,"T=");
 80025b8:	4a70      	ldr	r2, [pc, #448]	; (800277c <heater+0x1f4>)
 80025ba:	210a      	movs	r1, #10
 80025bc:	2002      	movs	r0, #2
 80025be:	f7ff fa6a 	bl	8001a96 <LCD_String_xy>
	LCD_String_xy(2,14,"°C");
 80025c2:	4a6d      	ldr	r2, [pc, #436]	; (8002778 <heater+0x1f0>)
 80025c4:	210e      	movs	r1, #14
 80025c6:	2002      	movs	r0, #2
 80025c8:	f7ff fa65 	bl	8001a96 <LCD_String_xy>
	sprintf(string_t, "%02d", (int)desired_temperature);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f7fe fcc3 	bl	8000f58 <__aeabi_f2iz>
 80025d2:	4602      	mov	r2, r0
 80025d4:	f107 030c 	add.w	r3, r7, #12
 80025d8:	4969      	ldr	r1, [pc, #420]	; (8002780 <heater+0x1f8>)
 80025da:	4618      	mov	r0, r3
 80025dc:	f003 fbf0 	bl	8005dc0 <siprintf>
	LCD_String_xy(2,5,string_t);
 80025e0:	f107 030c 	add.w	r3, r7, #12
 80025e4:	461a      	mov	r2, r3
 80025e6:	2105      	movs	r1, #5
 80025e8:	2002      	movs	r0, #2
 80025ea:	f7ff fa54 	bl	8001a96 <LCD_String_xy>
	while(1){
		adc1=0;
 80025ee:	4b65      	ldr	r3, [pc, #404]	; (8002784 <heater+0x1fc>)
 80025f0:	f04f 0200 	mov.w	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]
		for(i=0;i<4;i++){
 80025f6:	2300      	movs	r3, #0
 80025f8:	61fb      	str	r3, [r7, #28]
 80025fa:	e02a      	b.n	8002652 <heater+0xca>
			HAL_ADC_Start_DMA(hadc1, adcData, CONVERSION);// lê temperatura 4x16 vezes em dois canais (32)
 80025fc:	2210      	movs	r2, #16
 80025fe:	4962      	ldr	r1, [pc, #392]	; (8002788 <heater+0x200>)
 8002600:	6838      	ldr	r0, [r7, #0]
 8002602:	f000 fd09 	bl	8003018 <HAL_ADC_Start_DMA>
			while(flag==0);
 8002606:	bf00      	nop
 8002608:	4b60      	ldr	r3, [pc, #384]	; (800278c <heater+0x204>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0fb      	beq.n	8002608 <heater+0x80>
			flag=0;
 8002610:	4b5e      	ldr	r3, [pc, #376]	; (800278c <heater+0x204>)
 8002612:	2200      	movs	r2, #0
 8002614:	601a      	str	r2, [r3, #0]
			for(j=0;j<CONVERSION/2;j++){ // Acumula apenas do canal 1 (A3)
 8002616:	2300      	movs	r3, #0
 8002618:	61bb      	str	r3, [r7, #24]
 800261a:	e014      	b.n	8002646 <heater+0xbe>
				adc1+=adcData[j];
 800261c:	4a5a      	ldr	r2, [pc, #360]	; (8002788 <heater+0x200>)
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002624:	4618      	mov	r0, r3
 8002626:	f7fe fa79 	bl	8000b1c <__aeabi_ui2f>
 800262a:	4602      	mov	r2, r0
 800262c:	4b55      	ldr	r3, [pc, #340]	; (8002784 <heater+0x1fc>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4619      	mov	r1, r3
 8002632:	4610      	mov	r0, r2
 8002634:	f7fe f9c2 	bl	80009bc <__addsf3>
 8002638:	4603      	mov	r3, r0
 800263a:	461a      	mov	r2, r3
 800263c:	4b51      	ldr	r3, [pc, #324]	; (8002784 <heater+0x1fc>)
 800263e:	601a      	str	r2, [r3, #0]
			for(j=0;j<CONVERSION/2;j++){ // Acumula apenas do canal 1 (A3)
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	3301      	adds	r3, #1
 8002644:	61bb      	str	r3, [r7, #24]
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	2b07      	cmp	r3, #7
 800264a:	dde7      	ble.n	800261c <heater+0x94>
		for(i=0;i<4;i++){
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	3301      	adds	r3, #1
 8002650:	61fb      	str	r3, [r7, #28]
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	2b03      	cmp	r3, #3
 8002656:	ddd1      	ble.n	80025fc <heater+0x74>
			}
		}
		temperature1 = (adc1/(CONVERSION*2))*ADC_SCALE; // média canal 1 em volts
 8002658:	4b4a      	ldr	r3, [pc, #296]	; (8002784 <heater+0x1fc>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 8002660:	4618      	mov	r0, r3
 8002662:	f7fe fb67 	bl	8000d34 <__aeabi_fdiv>
 8002666:	4603      	mov	r3, r0
 8002668:	4618      	mov	r0, r3
 800266a:	f7fd fee7 	bl	800043c <__aeabi_f2d>
 800266e:	a33c      	add	r3, pc, #240	; (adr r3, 8002760 <heater+0x1d8>)
 8002670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002674:	f7fd ff3a 	bl	80004ec <__aeabi_dmul>
 8002678:	4603      	mov	r3, r0
 800267a:	460c      	mov	r4, r1
 800267c:	4618      	mov	r0, r3
 800267e:	4621      	mov	r1, r4
 8002680:	f7fe f946 	bl	8000910 <__aeabi_d2f>
 8002684:	4602      	mov	r2, r0
 8002686:	4b42      	ldr	r3, [pc, #264]	; (8002790 <heater+0x208>)
 8002688:	601a      	str	r2, [r3, #0]
		temperature1 /= DEGREE_CONVERSION; // converte para graus
 800268a:	4b41      	ldr	r3, [pc, #260]	; (8002790 <heater+0x208>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f7fd fed4 	bl	800043c <__aeabi_f2d>
 8002694:	a334      	add	r3, pc, #208	; (adr r3, 8002768 <heater+0x1e0>)
 8002696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269a:	f7fe f851 	bl	8000740 <__aeabi_ddiv>
 800269e:	4603      	mov	r3, r0
 80026a0:	460c      	mov	r4, r1
 80026a2:	4618      	mov	r0, r3
 80026a4:	4621      	mov	r1, r4
 80026a6:	f7fe f933 	bl	8000910 <__aeabi_d2f>
 80026aa:	4602      	mov	r2, r0
 80026ac:	4b38      	ldr	r3, [pc, #224]	; (8002790 <heater+0x208>)
 80026ae:	601a      	str	r2, [r3, #0]
		if(temperature1>100) temperature1 = 100;
 80026b0:	4b37      	ldr	r3, [pc, #220]	; (8002790 <heater+0x208>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4937      	ldr	r1, [pc, #220]	; (8002794 <heater+0x20c>)
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fe fc44 	bl	8000f44 <__aeabi_fcmpgt>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d002      	beq.n	80026c8 <heater+0x140>
 80026c2:	4b33      	ldr	r3, [pc, #204]	; (8002790 <heater+0x208>)
 80026c4:	4a33      	ldr	r2, [pc, #204]	; (8002794 <heater+0x20c>)
 80026c6:	601a      	str	r2, [r3, #0]
		if(temperature1<5) temperature1 = 5;
 80026c8:	4b31      	ldr	r3, [pc, #196]	; (8002790 <heater+0x208>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4932      	ldr	r1, [pc, #200]	; (8002798 <heater+0x210>)
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fe fc1a 	bl	8000f08 <__aeabi_fcmplt>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d002      	beq.n	80026e0 <heater+0x158>
 80026da:	4b2d      	ldr	r3, [pc, #180]	; (8002790 <heater+0x208>)
 80026dc:	4a2e      	ldr	r2, [pc, #184]	; (8002798 <heater+0x210>)
 80026de:	601a      	str	r2, [r3, #0]
		sprintf(string_t, "%02d", (int)temperature1);
 80026e0:	4b2b      	ldr	r3, [pc, #172]	; (8002790 <heater+0x208>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fe fc37 	bl	8000f58 <__aeabi_f2iz>
 80026ea:	4602      	mov	r2, r0
 80026ec:	f107 030c 	add.w	r3, r7, #12
 80026f0:	4923      	ldr	r1, [pc, #140]	; (8002780 <heater+0x1f8>)
 80026f2:	4618      	mov	r0, r3
 80026f4:	f003 fb64 	bl	8005dc0 <siprintf>
		LCD_String_xy(2,12,string_t);
 80026f8:	f107 030c 	add.w	r3, r7, #12
 80026fc:	461a      	mov	r2, r3
 80026fe:	210c      	movs	r1, #12
 8002700:	2002      	movs	r0, #2
 8002702:	f7ff f9c8 	bl	8001a96 <LCD_String_xy>
		// controle
		error = desired_temperature - temperature1;
 8002706:	4b22      	ldr	r3, [pc, #136]	; (8002790 <heater+0x208>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4619      	mov	r1, r3
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f7fe f953 	bl	80009b8 <__aeabi_fsub>
 8002712:	4603      	mov	r3, r0
 8002714:	613b      	str	r3, [r7, #16]
		if(error<0) break;
 8002716:	f04f 0100 	mov.w	r1, #0
 800271a:	6938      	ldr	r0, [r7, #16]
 800271c:	f7fe fbf4 	bl	8000f08 <__aeabi_fcmplt>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d113      	bne.n	800274e <heater+0x1c6>
		else{
			TIM2->CCR2 = error * kp;
 8002726:	6978      	ldr	r0, [r7, #20]
 8002728:	f7fe f9fc 	bl	8000b24 <__aeabi_i2f>
 800272c:	4603      	mov	r3, r0
 800272e:	6939      	ldr	r1, [r7, #16]
 8002730:	4618      	mov	r0, r3
 8002732:	f7fe fa4b 	bl	8000bcc <__aeabi_fmul>
 8002736:	4603      	mov	r3, r0
 8002738:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800273c:	4618      	mov	r0, r3
 800273e:	f7fe fc31 	bl	8000fa4 <__aeabi_f2uiz>
 8002742:	4603      	mov	r3, r0
 8002744:	63a3      	str	r3, [r4, #56]	; 0x38
		}
		HAL_Delay(50);
 8002746:	2032      	movs	r0, #50	; 0x32
 8002748:	f000 fb6c 	bl	8002e24 <HAL_Delay>
		adc1=0;
 800274c:	e74f      	b.n	80025ee <heater+0x66>
		if(error<0) break;
 800274e:	bf00      	nop
	}
	TIM2->CCR2 = 0;
 8002750:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002754:	2200      	movs	r2, #0
 8002756:	639a      	str	r2, [r3, #56]	; 0x38

}
 8002758:	bf00      	nop
 800275a:	3724      	adds	r7, #36	; 0x24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd90      	pop	{r4, r7, pc}
 8002760:	e734d9b4 	.word	0xe734d9b4
 8002764:	3f4a680c 	.word	0x3f4a680c
 8002768:	47ae147b 	.word	0x47ae147b
 800276c:	3f747ae1 	.word	0x3f747ae1
 8002770:	08007650 	.word	0x08007650
 8002774:	08007660 	.word	0x08007660
 8002778:	08007668 	.word	0x08007668
 800277c:	0800766c 	.word	0x0800766c
 8002780:	08007670 	.word	0x08007670
 8002784:	20000478 	.word	0x20000478
 8002788:	20000480 	.word	0x20000480
 800278c:	200002b8 	.word	0x200002b8
 8002790:	20000474 	.word	0x20000474
 8002794:	42c80000 	.word	0x42c80000
 8002798:	40a00000 	.word	0x40a00000
 800279c:	00000000 	.word	0x00000000

080027a0 <cooler>:

void cooler(float desired_temperature, ADC_HandleTypeDef* hadc1){
 80027a0:	b590      	push	{r4, r7, lr}
 80027a2:	b089      	sub	sp, #36	; 0x24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]

	int i, j, kp=100;
 80027aa:	2364      	movs	r3, #100	; 0x64
 80027ac:	617b      	str	r3, [r7, #20]
	char string_t[4];
	float error;
	LCD_Clear();
 80027ae:	f7ff f849 	bl	8001844 <LCD_Clear>
	LCD_String_xy(1,2,"Resfriando...");
 80027b2:	4a75      	ldr	r2, [pc, #468]	; (8002988 <cooler+0x1e8>)
 80027b4:	2102      	movs	r1, #2
 80027b6:	2001      	movs	r0, #1
 80027b8:	f7ff f96d 	bl	8001a96 <LCD_String_xy>
	LCD_String_xy(2,1,"Até ");
 80027bc:	4a73      	ldr	r2, [pc, #460]	; (800298c <cooler+0x1ec>)
 80027be:	2101      	movs	r1, #1
 80027c0:	2002      	movs	r0, #2
 80027c2:	f7ff f968 	bl	8001a96 <LCD_String_xy>
	LCD_String_xy(2,7,"°C");
 80027c6:	4a72      	ldr	r2, [pc, #456]	; (8002990 <cooler+0x1f0>)
 80027c8:	2107      	movs	r1, #7
 80027ca:	2002      	movs	r0, #2
 80027cc:	f7ff f963 	bl	8001a96 <LCD_String_xy>
	LCD_String_xy(2,10,"T=");
 80027d0:	4a70      	ldr	r2, [pc, #448]	; (8002994 <cooler+0x1f4>)
 80027d2:	210a      	movs	r1, #10
 80027d4:	2002      	movs	r0, #2
 80027d6:	f7ff f95e 	bl	8001a96 <LCD_String_xy>
	LCD_String_xy(2,14,"°C");
 80027da:	4a6d      	ldr	r2, [pc, #436]	; (8002990 <cooler+0x1f0>)
 80027dc:	210e      	movs	r1, #14
 80027de:	2002      	movs	r0, #2
 80027e0:	f7ff f959 	bl	8001a96 <LCD_String_xy>
	sprintf(string_t, "%02d", (int)desired_temperature);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f7fe fbb7 	bl	8000f58 <__aeabi_f2iz>
 80027ea:	4602      	mov	r2, r0
 80027ec:	f107 030c 	add.w	r3, r7, #12
 80027f0:	4969      	ldr	r1, [pc, #420]	; (8002998 <cooler+0x1f8>)
 80027f2:	4618      	mov	r0, r3
 80027f4:	f003 fae4 	bl	8005dc0 <siprintf>
	LCD_String_xy(2,5,string_t);
 80027f8:	f107 030c 	add.w	r3, r7, #12
 80027fc:	461a      	mov	r2, r3
 80027fe:	2105      	movs	r1, #5
 8002800:	2002      	movs	r0, #2
 8002802:	f7ff f948 	bl	8001a96 <LCD_String_xy>
	while(1){
		adc2=0;
 8002806:	4b65      	ldr	r3, [pc, #404]	; (800299c <cooler+0x1fc>)
 8002808:	f04f 0200 	mov.w	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
		for(i=0;i<4;i++){
 800280e:	2300      	movs	r3, #0
 8002810:	61fb      	str	r3, [r7, #28]
 8002812:	e02a      	b.n	800286a <cooler+0xca>
			HAL_ADC_Start_DMA(hadc1, adcData, CONVERSION);// lê temperatura 4x16 vezes em dois canais (32)
 8002814:	2210      	movs	r2, #16
 8002816:	4962      	ldr	r1, [pc, #392]	; (80029a0 <cooler+0x200>)
 8002818:	6838      	ldr	r0, [r7, #0]
 800281a:	f000 fbfd 	bl	8003018 <HAL_ADC_Start_DMA>
			while(flag==0);
 800281e:	bf00      	nop
 8002820:	4b60      	ldr	r3, [pc, #384]	; (80029a4 <cooler+0x204>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0fb      	beq.n	8002820 <cooler+0x80>
			flag=0;
 8002828:	4b5e      	ldr	r3, [pc, #376]	; (80029a4 <cooler+0x204>)
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]
			for(j=CONVERSION/2;j<CONVERSION;j++){ // Acumula apenas do canal 1 (A3)
 800282e:	2308      	movs	r3, #8
 8002830:	61bb      	str	r3, [r7, #24]
 8002832:	e014      	b.n	800285e <cooler+0xbe>
				adc2+=adcData[j];
 8002834:	4a5a      	ldr	r2, [pc, #360]	; (80029a0 <cooler+0x200>)
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800283c:	4618      	mov	r0, r3
 800283e:	f7fe f96d 	bl	8000b1c <__aeabi_ui2f>
 8002842:	4602      	mov	r2, r0
 8002844:	4b55      	ldr	r3, [pc, #340]	; (800299c <cooler+0x1fc>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4619      	mov	r1, r3
 800284a:	4610      	mov	r0, r2
 800284c:	f7fe f8b6 	bl	80009bc <__addsf3>
 8002850:	4603      	mov	r3, r0
 8002852:	461a      	mov	r2, r3
 8002854:	4b51      	ldr	r3, [pc, #324]	; (800299c <cooler+0x1fc>)
 8002856:	601a      	str	r2, [r3, #0]
			for(j=CONVERSION/2;j<CONVERSION;j++){ // Acumula apenas do canal 1 (A3)
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	3301      	adds	r3, #1
 800285c:	61bb      	str	r3, [r7, #24]
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	2b0f      	cmp	r3, #15
 8002862:	dde7      	ble.n	8002834 <cooler+0x94>
		for(i=0;i<4;i++){
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	3301      	adds	r3, #1
 8002868:	61fb      	str	r3, [r7, #28]
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	2b03      	cmp	r3, #3
 800286e:	ddd1      	ble.n	8002814 <cooler+0x74>
			}
		}
		temperature2 = (adc2/(CONVERSION*2))*ADC_SCALE; // média canal 1 em volts
 8002870:	4b4a      	ldr	r3, [pc, #296]	; (800299c <cooler+0x1fc>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 8002878:	4618      	mov	r0, r3
 800287a:	f7fe fa5b 	bl	8000d34 <__aeabi_fdiv>
 800287e:	4603      	mov	r3, r0
 8002880:	4618      	mov	r0, r3
 8002882:	f7fd fddb 	bl	800043c <__aeabi_f2d>
 8002886:	a33c      	add	r3, pc, #240	; (adr r3, 8002978 <cooler+0x1d8>)
 8002888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800288c:	f7fd fe2e 	bl	80004ec <__aeabi_dmul>
 8002890:	4603      	mov	r3, r0
 8002892:	460c      	mov	r4, r1
 8002894:	4618      	mov	r0, r3
 8002896:	4621      	mov	r1, r4
 8002898:	f7fe f83a 	bl	8000910 <__aeabi_d2f>
 800289c:	4602      	mov	r2, r0
 800289e:	4b42      	ldr	r3, [pc, #264]	; (80029a8 <cooler+0x208>)
 80028a0:	601a      	str	r2, [r3, #0]
		temperature2 /= DEGREE_CONVERSION; // converte para graus
 80028a2:	4b41      	ldr	r3, [pc, #260]	; (80029a8 <cooler+0x208>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7fd fdc8 	bl	800043c <__aeabi_f2d>
 80028ac:	a334      	add	r3, pc, #208	; (adr r3, 8002980 <cooler+0x1e0>)
 80028ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b2:	f7fd ff45 	bl	8000740 <__aeabi_ddiv>
 80028b6:	4603      	mov	r3, r0
 80028b8:	460c      	mov	r4, r1
 80028ba:	4618      	mov	r0, r3
 80028bc:	4621      	mov	r1, r4
 80028be:	f7fe f827 	bl	8000910 <__aeabi_d2f>
 80028c2:	4602      	mov	r2, r0
 80028c4:	4b38      	ldr	r3, [pc, #224]	; (80029a8 <cooler+0x208>)
 80028c6:	601a      	str	r2, [r3, #0]
		if(temperature2>50) temperature2 = 50;
 80028c8:	4b37      	ldr	r3, [pc, #220]	; (80029a8 <cooler+0x208>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4937      	ldr	r1, [pc, #220]	; (80029ac <cooler+0x20c>)
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7fe fb38 	bl	8000f44 <__aeabi_fcmpgt>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d002      	beq.n	80028e0 <cooler+0x140>
 80028da:	4b33      	ldr	r3, [pc, #204]	; (80029a8 <cooler+0x208>)
 80028dc:	4a33      	ldr	r2, [pc, #204]	; (80029ac <cooler+0x20c>)
 80028de:	601a      	str	r2, [r3, #0]
		if(temperature2<5) temperature2 = 5;
 80028e0:	4b31      	ldr	r3, [pc, #196]	; (80029a8 <cooler+0x208>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4932      	ldr	r1, [pc, #200]	; (80029b0 <cooler+0x210>)
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7fe fb0e 	bl	8000f08 <__aeabi_fcmplt>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d002      	beq.n	80028f8 <cooler+0x158>
 80028f2:	4b2d      	ldr	r3, [pc, #180]	; (80029a8 <cooler+0x208>)
 80028f4:	4a2e      	ldr	r2, [pc, #184]	; (80029b0 <cooler+0x210>)
 80028f6:	601a      	str	r2, [r3, #0]
		sprintf(string_t, "%02d", (int)temperature2);
 80028f8:	4b2b      	ldr	r3, [pc, #172]	; (80029a8 <cooler+0x208>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7fe fb2b 	bl	8000f58 <__aeabi_f2iz>
 8002902:	4602      	mov	r2, r0
 8002904:	f107 030c 	add.w	r3, r7, #12
 8002908:	4923      	ldr	r1, [pc, #140]	; (8002998 <cooler+0x1f8>)
 800290a:	4618      	mov	r0, r3
 800290c:	f003 fa58 	bl	8005dc0 <siprintf>
		LCD_String_xy(2,12,string_t);
 8002910:	f107 030c 	add.w	r3, r7, #12
 8002914:	461a      	mov	r2, r3
 8002916:	210c      	movs	r1, #12
 8002918:	2002      	movs	r0, #2
 800291a:	f7ff f8bc 	bl	8001a96 <LCD_String_xy>
		// controle
		error = temperature2 - desired_temperature;
 800291e:	4b22      	ldr	r3, [pc, #136]	; (80029a8 <cooler+0x208>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	4618      	mov	r0, r3
 8002926:	f7fe f847 	bl	80009b8 <__aeabi_fsub>
 800292a:	4603      	mov	r3, r0
 800292c:	613b      	str	r3, [r7, #16]
		if(error<0) break;
 800292e:	f04f 0100 	mov.w	r1, #0
 8002932:	6938      	ldr	r0, [r7, #16]
 8002934:	f7fe fae8 	bl	8000f08 <__aeabi_fcmplt>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d113      	bne.n	8002966 <cooler+0x1c6>
		else{
			TIM2->CCR3 = error * kp;
 800293e:	6978      	ldr	r0, [r7, #20]
 8002940:	f7fe f8f0 	bl	8000b24 <__aeabi_i2f>
 8002944:	4603      	mov	r3, r0
 8002946:	6939      	ldr	r1, [r7, #16]
 8002948:	4618      	mov	r0, r3
 800294a:	f7fe f93f 	bl	8000bcc <__aeabi_fmul>
 800294e:	4603      	mov	r3, r0
 8002950:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002954:	4618      	mov	r0, r3
 8002956:	f7fe fb25 	bl	8000fa4 <__aeabi_f2uiz>
 800295a:	4603      	mov	r3, r0
 800295c:	63e3      	str	r3, [r4, #60]	; 0x3c
		}
		HAL_Delay(50);
 800295e:	2032      	movs	r0, #50	; 0x32
 8002960:	f000 fa60 	bl	8002e24 <HAL_Delay>
		adc2=0;
 8002964:	e74f      	b.n	8002806 <cooler+0x66>
		if(error<0) break;
 8002966:	bf00      	nop
	}
	TIM2->CCR3 = 0;
 8002968:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800296c:	2200      	movs	r2, #0
 800296e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002970:	bf00      	nop
 8002972:	3724      	adds	r7, #36	; 0x24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd90      	pop	{r4, r7, pc}
 8002978:	e734d9b4 	.word	0xe734d9b4
 800297c:	3f4a680c 	.word	0x3f4a680c
 8002980:	47ae147b 	.word	0x47ae147b
 8002984:	3f747ae1 	.word	0x3f747ae1
 8002988:	08007678 	.word	0x08007678
 800298c:	08007660 	.word	0x08007660
 8002990:	08007668 	.word	0x08007668
 8002994:	0800766c 	.word	0x0800766c
 8002998:	08007670 	.word	0x08007670
 800299c:	2000047c 	.word	0x2000047c
 80029a0:	20000480 	.word	0x20000480
 80029a4:	200002b8 	.word	0x200002b8
 80029a8:	200004c0 	.word	0x200004c0
 80029ac:	42480000 	.word	0x42480000
 80029b0:	40a00000 	.word	0x40a00000

080029b4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
	flag = 1;
 80029bc:	4b03      	ldr	r3, [pc, #12]	; (80029cc <HAL_ADC_ConvCpltCallback+0x18>)
 80029be:	2201      	movs	r2, #1
 80029c0:	601a      	str	r2, [r3, #0]
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr
 80029cc:	200002b8 	.word	0x200002b8

080029d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80029d6:	4b15      	ldr	r3, [pc, #84]	; (8002a2c <HAL_MspInit+0x5c>)
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	4a14      	ldr	r2, [pc, #80]	; (8002a2c <HAL_MspInit+0x5c>)
 80029dc:	f043 0301 	orr.w	r3, r3, #1
 80029e0:	6193      	str	r3, [r2, #24]
 80029e2:	4b12      	ldr	r3, [pc, #72]	; (8002a2c <HAL_MspInit+0x5c>)
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	60bb      	str	r3, [r7, #8]
 80029ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029ee:	4b0f      	ldr	r3, [pc, #60]	; (8002a2c <HAL_MspInit+0x5c>)
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	4a0e      	ldr	r2, [pc, #56]	; (8002a2c <HAL_MspInit+0x5c>)
 80029f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f8:	61d3      	str	r3, [r2, #28]
 80029fa:	4b0c      	ldr	r3, [pc, #48]	; (8002a2c <HAL_MspInit+0x5c>)
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a02:	607b      	str	r3, [r7, #4]
 8002a04:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002a06:	4b0a      	ldr	r3, [pc, #40]	; (8002a30 <HAL_MspInit+0x60>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	4a04      	ldr	r2, [pc, #16]	; (8002a30 <HAL_MspInit+0x60>)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a22:	bf00      	nop
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	40010000 	.word	0x40010000

08002a34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b088      	sub	sp, #32
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a3c:	f107 0310 	add.w	r3, r7, #16
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	609a      	str	r2, [r3, #8]
 8002a48:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a28      	ldr	r2, [pc, #160]	; (8002af0 <HAL_ADC_MspInit+0xbc>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d149      	bne.n	8002ae8 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a54:	4b27      	ldr	r3, [pc, #156]	; (8002af4 <HAL_ADC_MspInit+0xc0>)
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	4a26      	ldr	r2, [pc, #152]	; (8002af4 <HAL_ADC_MspInit+0xc0>)
 8002a5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a5e:	6193      	str	r3, [r2, #24]
 8002a60:	4b24      	ldr	r3, [pc, #144]	; (8002af4 <HAL_ADC_MspInit+0xc0>)
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a6c:	4b21      	ldr	r3, [pc, #132]	; (8002af4 <HAL_ADC_MspInit+0xc0>)
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	4a20      	ldr	r2, [pc, #128]	; (8002af4 <HAL_ADC_MspInit+0xc0>)
 8002a72:	f043 0304 	orr.w	r3, r3, #4
 8002a76:	6193      	str	r3, [r2, #24]
 8002a78:	4b1e      	ldr	r3, [pc, #120]	; (8002af4 <HAL_ADC_MspInit+0xc0>)
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	60bb      	str	r3, [r7, #8]
 8002a82:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002a84:	2318      	movs	r3, #24
 8002a86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a8c:	f107 0310 	add.w	r3, r7, #16
 8002a90:	4619      	mov	r1, r3
 8002a92:	4819      	ldr	r0, [pc, #100]	; (8002af8 <HAL_ADC_MspInit+0xc4>)
 8002a94:	f001 f932 	bl	8003cfc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002a98:	4b18      	ldr	r3, [pc, #96]	; (8002afc <HAL_ADC_MspInit+0xc8>)
 8002a9a:	4a19      	ldr	r2, [pc, #100]	; (8002b00 <HAL_ADC_MspInit+0xcc>)
 8002a9c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a9e:	4b17      	ldr	r3, [pc, #92]	; (8002afc <HAL_ADC_MspInit+0xc8>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aa4:	4b15      	ldr	r3, [pc, #84]	; (8002afc <HAL_ADC_MspInit+0xc8>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002aaa:	4b14      	ldr	r3, [pc, #80]	; (8002afc <HAL_ADC_MspInit+0xc8>)
 8002aac:	2280      	movs	r2, #128	; 0x80
 8002aae:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ab0:	4b12      	ldr	r3, [pc, #72]	; (8002afc <HAL_ADC_MspInit+0xc8>)
 8002ab2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ab6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ab8:	4b10      	ldr	r3, [pc, #64]	; (8002afc <HAL_ADC_MspInit+0xc8>)
 8002aba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002abe:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002ac0:	4b0e      	ldr	r3, [pc, #56]	; (8002afc <HAL_ADC_MspInit+0xc8>)
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002ac6:	4b0d      	ldr	r3, [pc, #52]	; (8002afc <HAL_ADC_MspInit+0xc8>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002acc:	480b      	ldr	r0, [pc, #44]	; (8002afc <HAL_ADC_MspInit+0xc8>)
 8002ace:	f000 ff27 	bl	8003920 <HAL_DMA_Init>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002ad8:	f7ff fcae 	bl	8002438 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a07      	ldr	r2, [pc, #28]	; (8002afc <HAL_ADC_MspInit+0xc8>)
 8002ae0:	621a      	str	r2, [r3, #32]
 8002ae2:	4a06      	ldr	r2, [pc, #24]	; (8002afc <HAL_ADC_MspInit+0xc8>)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002ae8:	bf00      	nop
 8002aea:	3720      	adds	r7, #32
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40012400 	.word	0x40012400
 8002af4:	40021000 	.word	0x40021000
 8002af8:	40010800 	.word	0x40010800
 8002afc:	200003e8 	.word	0x200003e8
 8002b00:	40020008 	.word	0x40020008

08002b04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b14:	d10c      	bne.n	8002b30 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b16:	4b22      	ldr	r3, [pc, #136]	; (8002ba0 <HAL_TIM_Base_MspInit+0x9c>)
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	4a21      	ldr	r2, [pc, #132]	; (8002ba0 <HAL_TIM_Base_MspInit+0x9c>)
 8002b1c:	f043 0301 	orr.w	r3, r3, #1
 8002b20:	61d3      	str	r3, [r2, #28]
 8002b22:	4b1f      	ldr	r3, [pc, #124]	; (8002ba0 <HAL_TIM_Base_MspInit+0x9c>)
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	617b      	str	r3, [r7, #20]
 8002b2c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002b2e:	e032      	b.n	8002b96 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a1b      	ldr	r2, [pc, #108]	; (8002ba4 <HAL_TIM_Base_MspInit+0xa0>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d114      	bne.n	8002b64 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b3a:	4b19      	ldr	r3, [pc, #100]	; (8002ba0 <HAL_TIM_Base_MspInit+0x9c>)
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	4a18      	ldr	r2, [pc, #96]	; (8002ba0 <HAL_TIM_Base_MspInit+0x9c>)
 8002b40:	f043 0302 	orr.w	r3, r3, #2
 8002b44:	61d3      	str	r3, [r2, #28]
 8002b46:	4b16      	ldr	r3, [pc, #88]	; (8002ba0 <HAL_TIM_Base_MspInit+0x9c>)
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	613b      	str	r3, [r7, #16]
 8002b50:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002b52:	2200      	movs	r2, #0
 8002b54:	2100      	movs	r1, #0
 8002b56:	201d      	movs	r0, #29
 8002b58:	f000 feab 	bl	80038b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002b5c:	201d      	movs	r0, #29
 8002b5e:	f000 fec4 	bl	80038ea <HAL_NVIC_EnableIRQ>
}
 8002b62:	e018      	b.n	8002b96 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a0f      	ldr	r2, [pc, #60]	; (8002ba8 <HAL_TIM_Base_MspInit+0xa4>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d113      	bne.n	8002b96 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ba0 <HAL_TIM_Base_MspInit+0x9c>)
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	4a0b      	ldr	r2, [pc, #44]	; (8002ba0 <HAL_TIM_Base_MspInit+0x9c>)
 8002b74:	f043 0304 	orr.w	r3, r3, #4
 8002b78:	61d3      	str	r3, [r2, #28]
 8002b7a:	4b09      	ldr	r3, [pc, #36]	; (8002ba0 <HAL_TIM_Base_MspInit+0x9c>)
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	f003 0304 	and.w	r3, r3, #4
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002b86:	2200      	movs	r2, #0
 8002b88:	2100      	movs	r1, #0
 8002b8a:	201e      	movs	r0, #30
 8002b8c:	f000 fe91 	bl	80038b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002b90:	201e      	movs	r0, #30
 8002b92:	f000 feaa 	bl	80038ea <HAL_NVIC_EnableIRQ>
}
 8002b96:	bf00      	nop
 8002b98:	3718      	adds	r7, #24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	40000400 	.word	0x40000400
 8002ba8:	40000800 	.word	0x40000800

08002bac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b088      	sub	sp, #32
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb4:	f107 0310 	add.w	r3, r7, #16
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	605a      	str	r2, [r3, #4]
 8002bbe:	609a      	str	r2, [r3, #8]
 8002bc0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bca:	d117      	bne.n	8002bfc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bcc:	4b0d      	ldr	r3, [pc, #52]	; (8002c04 <HAL_TIM_MspPostInit+0x58>)
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	4a0c      	ldr	r2, [pc, #48]	; (8002c04 <HAL_TIM_MspPostInit+0x58>)
 8002bd2:	f043 0304 	orr.w	r3, r3, #4
 8002bd6:	6193      	str	r3, [r2, #24]
 8002bd8:	4b0a      	ldr	r3, [pc, #40]	; (8002c04 <HAL_TIM_MspPostInit+0x58>)
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002be4:	2307      	movs	r3, #7
 8002be6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be8:	2302      	movs	r3, #2
 8002bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bec:	2302      	movs	r3, #2
 8002bee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bf0:	f107 0310 	add.w	r3, r7, #16
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4804      	ldr	r0, [pc, #16]	; (8002c08 <HAL_TIM_MspPostInit+0x5c>)
 8002bf8:	f001 f880 	bl	8003cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002bfc:	bf00      	nop
 8002bfe:	3720      	adds	r7, #32
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40021000 	.word	0x40021000
 8002c08:	40010800 	.word	0x40010800

08002c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002c10:	bf00      	nop
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr

08002c18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c1c:	e7fe      	b.n	8002c1c <HardFault_Handler+0x4>

08002c1e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c22:	e7fe      	b.n	8002c22 <MemManage_Handler+0x4>

08002c24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c28:	e7fe      	b.n	8002c28 <BusFault_Handler+0x4>

08002c2a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c2e:	e7fe      	b.n	8002c2e <UsageFault_Handler+0x4>

08002c30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c34:	bf00      	nop
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr

08002c3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c40:	bf00      	nop
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr

08002c48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c4c:	bf00      	nop
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr

08002c54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c58:	f000 f8c8 	bl	8002dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c5c:	bf00      	nop
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002c64:	4802      	ldr	r0, [pc, #8]	; (8002c70 <DMA1_Channel1_IRQHandler+0x10>)
 8002c66:	f000 ff15 	bl	8003a94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	200003e8 	.word	0x200003e8

08002c74 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002c78:	4802      	ldr	r0, [pc, #8]	; (8002c84 <TIM3_IRQHandler+0x10>)
 8002c7a:	f002 f8f7 	bl	8004e6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	2000034c 	.word	0x2000034c

08002c88 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002c8c:	4802      	ldr	r0, [pc, #8]	; (8002c98 <TIM4_IRQHandler+0x10>)
 8002c8e:	f002 f8ed 	bl	8004e6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002c92:	bf00      	nop
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	200002f8 	.word	0x200002f8

08002c9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ca4:	4a14      	ldr	r2, [pc, #80]	; (8002cf8 <_sbrk+0x5c>)
 8002ca6:	4b15      	ldr	r3, [pc, #84]	; (8002cfc <_sbrk+0x60>)
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cb0:	4b13      	ldr	r3, [pc, #76]	; (8002d00 <_sbrk+0x64>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d102      	bne.n	8002cbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cb8:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <_sbrk+0x64>)
 8002cba:	4a12      	ldr	r2, [pc, #72]	; (8002d04 <_sbrk+0x68>)
 8002cbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cbe:	4b10      	ldr	r3, [pc, #64]	; (8002d00 <_sbrk+0x64>)
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d207      	bcs.n	8002cdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ccc:	f002 fe84 	bl	80059d8 <__errno>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	230c      	movs	r3, #12
 8002cd4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cda:	e009      	b.n	8002cf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cdc:	4b08      	ldr	r3, [pc, #32]	; (8002d00 <_sbrk+0x64>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ce2:	4b07      	ldr	r3, [pc, #28]	; (8002d00 <_sbrk+0x64>)
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4413      	add	r3, r2
 8002cea:	4a05      	ldr	r2, [pc, #20]	; (8002d00 <_sbrk+0x64>)
 8002cec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cee:	68fb      	ldr	r3, [r7, #12]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3718      	adds	r7, #24
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	20005000 	.word	0x20005000
 8002cfc:	00000400 	.word	0x00000400
 8002d00:	200002c0 	.word	0x200002c0
 8002d04:	200004d0 	.word	0x200004d0

08002d08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d0c:	bf00      	nop
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr

08002d14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002d14:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002d16:	e003      	b.n	8002d20 <LoopCopyDataInit>

08002d18 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002d18:	4b0b      	ldr	r3, [pc, #44]	; (8002d48 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002d1a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002d1c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002d1e:	3104      	adds	r1, #4

08002d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002d20:	480a      	ldr	r0, [pc, #40]	; (8002d4c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002d22:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002d24:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002d26:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002d28:	d3f6      	bcc.n	8002d18 <CopyDataInit>
  ldr r2, =_sbss
 8002d2a:	4a0a      	ldr	r2, [pc, #40]	; (8002d54 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002d2c:	e002      	b.n	8002d34 <LoopFillZerobss>

08002d2e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002d2e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002d30:	f842 3b04 	str.w	r3, [r2], #4

08002d34 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002d34:	4b08      	ldr	r3, [pc, #32]	; (8002d58 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002d36:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002d38:	d3f9      	bcc.n	8002d2e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d3a:	f7ff ffe5 	bl	8002d08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d3e:	f002 fe51 	bl	80059e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d42:	f7fe fed7 	bl	8001af4 <main>
  bx lr
 8002d46:	4770      	bx	lr
  ldr r3, =_sidata
 8002d48:	0800793c 	.word	0x0800793c
  ldr r0, =_sdata
 8002d4c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002d50:	20000294 	.word	0x20000294
  ldr r2, =_sbss
 8002d54:	20000298 	.word	0x20000298
  ldr r3, = _ebss
 8002d58:	200004cc 	.word	0x200004cc

08002d5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d5c:	e7fe      	b.n	8002d5c <ADC1_2_IRQHandler>
	...

08002d60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d64:	4b08      	ldr	r3, [pc, #32]	; (8002d88 <HAL_Init+0x28>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a07      	ldr	r2, [pc, #28]	; (8002d88 <HAL_Init+0x28>)
 8002d6a:	f043 0310 	orr.w	r3, r3, #16
 8002d6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d70:	2003      	movs	r0, #3
 8002d72:	f000 fd93 	bl	800389c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d76:	2000      	movs	r0, #0
 8002d78:	f000 f808 	bl	8002d8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d7c:	f7ff fe28 	bl	80029d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40022000 	.word	0x40022000

08002d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d94:	4b12      	ldr	r3, [pc, #72]	; (8002de0 <HAL_InitTick+0x54>)
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	4b12      	ldr	r3, [pc, #72]	; (8002de4 <HAL_InitTick+0x58>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002daa:	4618      	mov	r0, r3
 8002dac:	f000 fdab 	bl	8003906 <HAL_SYSTICK_Config>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e00e      	b.n	8002dd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b0f      	cmp	r3, #15
 8002dbe:	d80a      	bhi.n	8002dd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc8:	f000 fd73 	bl	80038b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dcc:	4a06      	ldr	r2, [pc, #24]	; (8002de8 <HAL_InitTick+0x5c>)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	e000      	b.n	8002dd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	20000058 	.word	0x20000058
 8002de4:	20000060 	.word	0x20000060
 8002de8:	2000005c 	.word	0x2000005c

08002dec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002df0:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <HAL_IncTick+0x1c>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	461a      	mov	r2, r3
 8002df6:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <HAL_IncTick+0x20>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	4a03      	ldr	r2, [pc, #12]	; (8002e0c <HAL_IncTick+0x20>)
 8002dfe:	6013      	str	r3, [r2, #0]
}
 8002e00:	bf00      	nop
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr
 8002e08:	20000060 	.word	0x20000060
 8002e0c:	200004c4 	.word	0x200004c4

08002e10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  return uwTick;
 8002e14:	4b02      	ldr	r3, [pc, #8]	; (8002e20 <HAL_GetTick+0x10>)
 8002e16:	681b      	ldr	r3, [r3, #0]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr
 8002e20:	200004c4 	.word	0x200004c4

08002e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e2c:	f7ff fff0 	bl	8002e10 <HAL_GetTick>
 8002e30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e3c:	d005      	beq.n	8002e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e3e:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <HAL_Delay+0x40>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	461a      	mov	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	4413      	add	r3, r2
 8002e48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e4a:	bf00      	nop
 8002e4c:	f7ff ffe0 	bl	8002e10 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d8f7      	bhi.n	8002e4c <HAL_Delay+0x28>
  {
  }
}
 8002e5c:	bf00      	nop
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	20000060 	.word	0x20000060

08002e68 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e70:	2300      	movs	r3, #0
 8002e72:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002e74:	2300      	movs	r3, #0
 8002e76:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e0be      	b.n	8003008 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d109      	bne.n	8002eac <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7ff fdc4 	bl	8002a34 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 faed 	bl	800348c <ADC_ConversionStop_Disable>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eba:	f003 0310 	and.w	r3, r3, #16
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f040 8099 	bne.w	8002ff6 <HAL_ADC_Init+0x18e>
 8002ec4:	7dfb      	ldrb	r3, [r7, #23]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f040 8095 	bne.w	8002ff6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ed4:	f023 0302 	bic.w	r3, r3, #2
 8002ed8:	f043 0202 	orr.w	r2, r3, #2
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ee8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	7b1b      	ldrb	r3, [r3, #12]
 8002eee:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ef0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f00:	d003      	beq.n	8002f0a <HAL_ADC_Init+0xa2>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d102      	bne.n	8002f10 <HAL_ADC_Init+0xa8>
 8002f0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f0e:	e000      	b.n	8002f12 <HAL_ADC_Init+0xaa>
 8002f10:	2300      	movs	r3, #0
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	7d1b      	ldrb	r3, [r3, #20]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d119      	bne.n	8002f54 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	7b1b      	ldrb	r3, [r3, #12]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d109      	bne.n	8002f3c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	035a      	lsls	r2, r3, #13
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f38:	613b      	str	r3, [r7, #16]
 8002f3a:	e00b      	b.n	8002f54 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f40:	f043 0220 	orr.w	r2, r3, #32
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4c:	f043 0201 	orr.w	r2, r3, #1
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	4b28      	ldr	r3, [pc, #160]	; (8003010 <HAL_ADC_Init+0x1a8>)
 8002f70:	4013      	ands	r3, r2
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	6812      	ldr	r2, [r2, #0]
 8002f76:	68b9      	ldr	r1, [r7, #8]
 8002f78:	430b      	orrs	r3, r1
 8002f7a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f84:	d003      	beq.n	8002f8e <HAL_ADC_Init+0x126>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d104      	bne.n	8002f98 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	3b01      	subs	r3, #1
 8002f94:	051b      	lsls	r3, r3, #20
 8002f96:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	4b18      	ldr	r3, [pc, #96]	; (8003014 <HAL_ADC_Init+0x1ac>)
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d10b      	bne.n	8002fd4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc6:	f023 0303 	bic.w	r3, r3, #3
 8002fca:	f043 0201 	orr.w	r2, r3, #1
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002fd2:	e018      	b.n	8003006 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd8:	f023 0312 	bic.w	r3, r3, #18
 8002fdc:	f043 0210 	orr.w	r2, r3, #16
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe8:	f043 0201 	orr.w	r2, r3, #1
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ff4:	e007      	b.n	8003006 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffa:	f043 0210 	orr.w	r2, r3, #16
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003006:	7dfb      	ldrb	r3, [r7, #23]
}
 8003008:	4618      	mov	r0, r3
 800300a:	3718      	adds	r7, #24
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	ffe1f7fd 	.word	0xffe1f7fd
 8003014:	ff1f0efe 	.word	0xff1f0efe

08003018 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003024:	2300      	movs	r3, #0
 8003026:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a64      	ldr	r2, [pc, #400]	; (80031c0 <HAL_ADC_Start_DMA+0x1a8>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d004      	beq.n	800303c <HAL_ADC_Start_DMA+0x24>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a63      	ldr	r2, [pc, #396]	; (80031c4 <HAL_ADC_Start_DMA+0x1ac>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d106      	bne.n	800304a <HAL_ADC_Start_DMA+0x32>
 800303c:	4b60      	ldr	r3, [pc, #384]	; (80031c0 <HAL_ADC_Start_DMA+0x1a8>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003044:	2b00      	cmp	r3, #0
 8003046:	f040 80b3 	bne.w	80031b0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003050:	2b01      	cmp	r3, #1
 8003052:	d101      	bne.n	8003058 <HAL_ADC_Start_DMA+0x40>
 8003054:	2302      	movs	r3, #2
 8003056:	e0ae      	b.n	80031b6 <HAL_ADC_Start_DMA+0x19e>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 f9c1 	bl	80033e8 <ADC_Enable>
 8003066:	4603      	mov	r3, r0
 8003068:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800306a:	7dfb      	ldrb	r3, [r7, #23]
 800306c:	2b00      	cmp	r3, #0
 800306e:	f040 809a 	bne.w	80031a6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003076:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800307a:	f023 0301 	bic.w	r3, r3, #1
 800307e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a4e      	ldr	r2, [pc, #312]	; (80031c4 <HAL_ADC_Start_DMA+0x1ac>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d105      	bne.n	800309c <HAL_ADC_Start_DMA+0x84>
 8003090:	4b4b      	ldr	r3, [pc, #300]	; (80031c0 <HAL_ADC_Start_DMA+0x1a8>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d115      	bne.n	80030c8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d026      	beq.n	8003104 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030c6:	e01d      	b.n	8003104 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030cc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a39      	ldr	r2, [pc, #228]	; (80031c0 <HAL_ADC_Start_DMA+0x1a8>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d004      	beq.n	80030e8 <HAL_ADC_Start_DMA+0xd0>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a38      	ldr	r2, [pc, #224]	; (80031c4 <HAL_ADC_Start_DMA+0x1ac>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d10d      	bne.n	8003104 <HAL_ADC_Start_DMA+0xec>
 80030e8:	4b35      	ldr	r3, [pc, #212]	; (80031c0 <HAL_ADC_Start_DMA+0x1a8>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d007      	beq.n	8003104 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030fc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003108:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d006      	beq.n	800311e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003114:	f023 0206 	bic.w	r2, r3, #6
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	62da      	str	r2, [r3, #44]	; 0x2c
 800311c:	e002      	b.n	8003124 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	4a25      	ldr	r2, [pc, #148]	; (80031c8 <HAL_ADC_Start_DMA+0x1b0>)
 8003132:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	4a24      	ldr	r2, [pc, #144]	; (80031cc <HAL_ADC_Start_DMA+0x1b4>)
 800313a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	4a23      	ldr	r2, [pc, #140]	; (80031d0 <HAL_ADC_Start_DMA+0x1b8>)
 8003142:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f06f 0202 	mvn.w	r2, #2
 800314c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800315c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6a18      	ldr	r0, [r3, #32]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	334c      	adds	r3, #76	; 0x4c
 8003168:	4619      	mov	r1, r3
 800316a:	68ba      	ldr	r2, [r7, #8]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f000 fc31 	bl	80039d4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800317c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003180:	d108      	bne.n	8003194 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689a      	ldr	r2, [r3, #8]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003190:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003192:	e00f      	b.n	80031b4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689a      	ldr	r2, [r3, #8]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80031a2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80031a4:	e006      	b.n	80031b4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80031ae:	e001      	b.n	80031b4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80031b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	40012400 	.word	0x40012400
 80031c4:	40012800 	.word	0x40012800
 80031c8:	08003501 	.word	0x08003501
 80031cc:	0800357d 	.word	0x0800357d
 80031d0:	08003599 	.word	0x08003599

080031d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bc80      	pop	{r7}
 80031e4:	4770      	bx	lr

080031e6 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80031ee:	bf00      	nop
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr

080031f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003202:	2300      	movs	r3, #0
 8003204:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003206:	2300      	movs	r3, #0
 8003208:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003210:	2b01      	cmp	r3, #1
 8003212:	d101      	bne.n	8003218 <HAL_ADC_ConfigChannel+0x20>
 8003214:	2302      	movs	r3, #2
 8003216:	e0dc      	b.n	80033d2 <HAL_ADC_ConfigChannel+0x1da>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	2b06      	cmp	r3, #6
 8003226:	d81c      	bhi.n	8003262 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	4613      	mov	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4413      	add	r3, r2
 8003238:	3b05      	subs	r3, #5
 800323a:	221f      	movs	r2, #31
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	43db      	mvns	r3, r3
 8003242:	4019      	ands	r1, r3
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	6818      	ldr	r0, [r3, #0]
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	4613      	mov	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	3b05      	subs	r3, #5
 8003254:	fa00 f203 	lsl.w	r2, r0, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	635a      	str	r2, [r3, #52]	; 0x34
 8003260:	e03c      	b.n	80032dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b0c      	cmp	r3, #12
 8003268:	d81c      	bhi.n	80032a4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	4613      	mov	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	3b23      	subs	r3, #35	; 0x23
 800327c:	221f      	movs	r2, #31
 800327e:	fa02 f303 	lsl.w	r3, r2, r3
 8003282:	43db      	mvns	r3, r3
 8003284:	4019      	ands	r1, r3
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	6818      	ldr	r0, [r3, #0]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	4613      	mov	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4413      	add	r3, r2
 8003294:	3b23      	subs	r3, #35	; 0x23
 8003296:	fa00 f203 	lsl.w	r2, r0, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	430a      	orrs	r2, r1
 80032a0:	631a      	str	r2, [r3, #48]	; 0x30
 80032a2:	e01b      	b.n	80032dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	4613      	mov	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	3b41      	subs	r3, #65	; 0x41
 80032b6:	221f      	movs	r2, #31
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	43db      	mvns	r3, r3
 80032be:	4019      	ands	r1, r3
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	6818      	ldr	r0, [r3, #0]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	4613      	mov	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	3b41      	subs	r3, #65	; 0x41
 80032d0:	fa00 f203 	lsl.w	r2, r0, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	430a      	orrs	r2, r1
 80032da:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2b09      	cmp	r3, #9
 80032e2:	d91c      	bls.n	800331e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68d9      	ldr	r1, [r3, #12]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	4613      	mov	r3, r2
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	4413      	add	r3, r2
 80032f4:	3b1e      	subs	r3, #30
 80032f6:	2207      	movs	r2, #7
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	43db      	mvns	r3, r3
 80032fe:	4019      	ands	r1, r3
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	6898      	ldr	r0, [r3, #8]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	4613      	mov	r3, r2
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	4413      	add	r3, r2
 800330e:	3b1e      	subs	r3, #30
 8003310:	fa00 f203 	lsl.w	r2, r0, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	60da      	str	r2, [r3, #12]
 800331c:	e019      	b.n	8003352 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6919      	ldr	r1, [r3, #16]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	4613      	mov	r3, r2
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	4413      	add	r3, r2
 800332e:	2207      	movs	r2, #7
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	43db      	mvns	r3, r3
 8003336:	4019      	ands	r1, r3
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	6898      	ldr	r0, [r3, #8]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	4613      	mov	r3, r2
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	4413      	add	r3, r2
 8003346:	fa00 f203 	lsl.w	r2, r0, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2b10      	cmp	r3, #16
 8003358:	d003      	beq.n	8003362 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800335e:	2b11      	cmp	r3, #17
 8003360:	d132      	bne.n	80033c8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a1d      	ldr	r2, [pc, #116]	; (80033dc <HAL_ADC_ConfigChannel+0x1e4>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d125      	bne.n	80033b8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d126      	bne.n	80033c8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003388:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2b10      	cmp	r3, #16
 8003390:	d11a      	bne.n	80033c8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003392:	4b13      	ldr	r3, [pc, #76]	; (80033e0 <HAL_ADC_ConfigChannel+0x1e8>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a13      	ldr	r2, [pc, #76]	; (80033e4 <HAL_ADC_ConfigChannel+0x1ec>)
 8003398:	fba2 2303 	umull	r2, r3, r2, r3
 800339c:	0c9a      	lsrs	r2, r3, #18
 800339e:	4613      	mov	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4413      	add	r3, r2
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033a8:	e002      	b.n	80033b0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	3b01      	subs	r3, #1
 80033ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1f9      	bne.n	80033aa <HAL_ADC_ConfigChannel+0x1b2>
 80033b6:	e007      	b.n	80033c8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033bc:	f043 0220 	orr.w	r2, r3, #32
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80033d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3714      	adds	r7, #20
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bc80      	pop	{r7}
 80033da:	4770      	bx	lr
 80033dc:	40012400 	.word	0x40012400
 80033e0:	20000058 	.word	0x20000058
 80033e4:	431bde83 	.word	0x431bde83

080033e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033f0:	2300      	movs	r3, #0
 80033f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80033f4:	2300      	movs	r3, #0
 80033f6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b01      	cmp	r3, #1
 8003404:	d039      	beq.n	800347a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f042 0201 	orr.w	r2, r2, #1
 8003414:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003416:	4b1b      	ldr	r3, [pc, #108]	; (8003484 <ADC_Enable+0x9c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a1b      	ldr	r2, [pc, #108]	; (8003488 <ADC_Enable+0xa0>)
 800341c:	fba2 2303 	umull	r2, r3, r2, r3
 8003420:	0c9b      	lsrs	r3, r3, #18
 8003422:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003424:	e002      	b.n	800342c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	3b01      	subs	r3, #1
 800342a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1f9      	bne.n	8003426 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003432:	f7ff fced 	bl	8002e10 <HAL_GetTick>
 8003436:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003438:	e018      	b.n	800346c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800343a:	f7ff fce9 	bl	8002e10 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d911      	bls.n	800346c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344c:	f043 0210 	orr.w	r2, r3, #16
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003458:	f043 0201 	orr.w	r2, r3, #1
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e007      	b.n	800347c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b01      	cmp	r3, #1
 8003478:	d1df      	bne.n	800343a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	20000058 	.word	0x20000058
 8003488:	431bde83 	.word	0x431bde83

0800348c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003494:	2300      	movs	r3, #0
 8003496:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d127      	bne.n	80034f6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0201 	bic.w	r2, r2, #1
 80034b4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80034b6:	f7ff fcab 	bl	8002e10 <HAL_GetTick>
 80034ba:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80034bc:	e014      	b.n	80034e8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80034be:	f7ff fca7 	bl	8002e10 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d90d      	bls.n	80034e8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d0:	f043 0210 	orr.w	r2, r3, #16
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034dc:	f043 0201 	orr.w	r2, r3, #1
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e007      	b.n	80034f8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d0e3      	beq.n	80034be <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003512:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003516:	2b00      	cmp	r3, #0
 8003518:	d127      	bne.n	800356a <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003530:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003534:	d115      	bne.n	8003562 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800353a:	2b00      	cmp	r3, #0
 800353c:	d111      	bne.n	8003562 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003542:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d105      	bne.n	8003562 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355a:	f043 0201 	orr.w	r2, r3, #1
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f7ff fa26 	bl	80029b4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003568:	e004      	b.n	8003574 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	4798      	blx	r3
}
 8003574:	bf00      	nop
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003588:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f7ff fe22 	bl	80031d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003590:	bf00      	nop
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b6:	f043 0204 	orr.w	r2, r3, #4
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f7ff fe11 	bl	80031e6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035c4:	bf00      	nop
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80035cc:	b590      	push	{r4, r7, lr}
 80035ce:	b087      	sub	sp, #28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035d4:	2300      	movs	r3, #0
 80035d6:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80035d8:	2300      	movs	r3, #0
 80035da:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d101      	bne.n	80035ea <HAL_ADCEx_Calibration_Start+0x1e>
 80035e6:	2302      	movs	r3, #2
 80035e8:	e086      	b.n	80036f8 <HAL_ADCEx_Calibration_Start+0x12c>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7ff ff4a 	bl	800348c <ADC_ConversionStop_Disable>
 80035f8:	4603      	mov	r3, r0
 80035fa:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80035fc:	7dfb      	ldrb	r3, [r7, #23]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d175      	bne.n	80036ee <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003606:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800360a:	f023 0302 	bic.w	r3, r3, #2
 800360e:	f043 0202 	orr.w	r2, r3, #2
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003616:	4b3a      	ldr	r3, [pc, #232]	; (8003700 <HAL_ADCEx_Calibration_Start+0x134>)
 8003618:	681c      	ldr	r4, [r3, #0]
 800361a:	2002      	movs	r0, #2
 800361c:	f001 f9ce 	bl	80049bc <HAL_RCCEx_GetPeriphCLKFreq>
 8003620:	4603      	mov	r3, r0
 8003622:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003626:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003628:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800362a:	e002      	b.n	8003632 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	3b01      	subs	r3, #1
 8003630:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1f9      	bne.n	800362c <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f7ff fed5 	bl	80033e8 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f042 0208 	orr.w	r2, r2, #8
 800364c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800364e:	f7ff fbdf 	bl	8002e10 <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003654:	e014      	b.n	8003680 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003656:	f7ff fbdb 	bl	8002e10 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b0a      	cmp	r3, #10
 8003662:	d90d      	bls.n	8003680 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003668:	f023 0312 	bic.w	r3, r3, #18
 800366c:	f043 0210 	orr.w	r2, r3, #16
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e03b      	b.n	80036f8 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 0308 	and.w	r3, r3, #8
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1e3      	bne.n	8003656 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f042 0204 	orr.w	r2, r2, #4
 800369c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800369e:	f7ff fbb7 	bl	8002e10 <HAL_GetTick>
 80036a2:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80036a4:	e014      	b.n	80036d0 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80036a6:	f7ff fbb3 	bl	8002e10 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b0a      	cmp	r3, #10
 80036b2:	d90d      	bls.n	80036d0 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b8:	f023 0312 	bic.w	r3, r3, #18
 80036bc:	f043 0210 	orr.w	r2, r3, #16
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e013      	b.n	80036f8 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 0304 	and.w	r3, r3, #4
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1e3      	bne.n	80036a6 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e2:	f023 0303 	bic.w	r3, r3, #3
 80036e6:	f043 0201 	orr.w	r2, r3, #1
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80036f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	371c      	adds	r7, #28
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd90      	pop	{r4, r7, pc}
 8003700:	20000058 	.word	0x20000058

08003704 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f003 0307 	and.w	r3, r3, #7
 8003712:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003714:	4b0c      	ldr	r3, [pc, #48]	; (8003748 <__NVIC_SetPriorityGrouping+0x44>)
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003720:	4013      	ands	r3, r2
 8003722:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800372c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003734:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003736:	4a04      	ldr	r2, [pc, #16]	; (8003748 <__NVIC_SetPriorityGrouping+0x44>)
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	60d3      	str	r3, [r2, #12]
}
 800373c:	bf00      	nop
 800373e:	3714      	adds	r7, #20
 8003740:	46bd      	mov	sp, r7
 8003742:	bc80      	pop	{r7}
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	e000ed00 	.word	0xe000ed00

0800374c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003750:	4b04      	ldr	r3, [pc, #16]	; (8003764 <__NVIC_GetPriorityGrouping+0x18>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	0a1b      	lsrs	r3, r3, #8
 8003756:	f003 0307 	and.w	r3, r3, #7
}
 800375a:	4618      	mov	r0, r3
 800375c:	46bd      	mov	sp, r7
 800375e:	bc80      	pop	{r7}
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	e000ed00 	.word	0xe000ed00

08003768 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	4603      	mov	r3, r0
 8003770:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003776:	2b00      	cmp	r3, #0
 8003778:	db0b      	blt.n	8003792 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800377a:	79fb      	ldrb	r3, [r7, #7]
 800377c:	f003 021f 	and.w	r2, r3, #31
 8003780:	4906      	ldr	r1, [pc, #24]	; (800379c <__NVIC_EnableIRQ+0x34>)
 8003782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003786:	095b      	lsrs	r3, r3, #5
 8003788:	2001      	movs	r0, #1
 800378a:	fa00 f202 	lsl.w	r2, r0, r2
 800378e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003792:	bf00      	nop
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	bc80      	pop	{r7}
 800379a:	4770      	bx	lr
 800379c:	e000e100 	.word	0xe000e100

080037a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	4603      	mov	r3, r0
 80037a8:	6039      	str	r1, [r7, #0]
 80037aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	db0a      	blt.n	80037ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	b2da      	uxtb	r2, r3
 80037b8:	490c      	ldr	r1, [pc, #48]	; (80037ec <__NVIC_SetPriority+0x4c>)
 80037ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037be:	0112      	lsls	r2, r2, #4
 80037c0:	b2d2      	uxtb	r2, r2
 80037c2:	440b      	add	r3, r1
 80037c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037c8:	e00a      	b.n	80037e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	4908      	ldr	r1, [pc, #32]	; (80037f0 <__NVIC_SetPriority+0x50>)
 80037d0:	79fb      	ldrb	r3, [r7, #7]
 80037d2:	f003 030f 	and.w	r3, r3, #15
 80037d6:	3b04      	subs	r3, #4
 80037d8:	0112      	lsls	r2, r2, #4
 80037da:	b2d2      	uxtb	r2, r2
 80037dc:	440b      	add	r3, r1
 80037de:	761a      	strb	r2, [r3, #24]
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bc80      	pop	{r7}
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	e000e100 	.word	0xe000e100
 80037f0:	e000ed00 	.word	0xe000ed00

080037f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b089      	sub	sp, #36	; 0x24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f003 0307 	and.w	r3, r3, #7
 8003806:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	f1c3 0307 	rsb	r3, r3, #7
 800380e:	2b04      	cmp	r3, #4
 8003810:	bf28      	it	cs
 8003812:	2304      	movcs	r3, #4
 8003814:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	3304      	adds	r3, #4
 800381a:	2b06      	cmp	r3, #6
 800381c:	d902      	bls.n	8003824 <NVIC_EncodePriority+0x30>
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	3b03      	subs	r3, #3
 8003822:	e000      	b.n	8003826 <NVIC_EncodePriority+0x32>
 8003824:	2300      	movs	r3, #0
 8003826:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003828:	f04f 32ff 	mov.w	r2, #4294967295
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	fa02 f303 	lsl.w	r3, r2, r3
 8003832:	43da      	mvns	r2, r3
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	401a      	ands	r2, r3
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800383c:	f04f 31ff 	mov.w	r1, #4294967295
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	fa01 f303 	lsl.w	r3, r1, r3
 8003846:	43d9      	mvns	r1, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800384c:	4313      	orrs	r3, r2
         );
}
 800384e:	4618      	mov	r0, r3
 8003850:	3724      	adds	r7, #36	; 0x24
 8003852:	46bd      	mov	sp, r7
 8003854:	bc80      	pop	{r7}
 8003856:	4770      	bx	lr

08003858 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3b01      	subs	r3, #1
 8003864:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003868:	d301      	bcc.n	800386e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800386a:	2301      	movs	r3, #1
 800386c:	e00f      	b.n	800388e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800386e:	4a0a      	ldr	r2, [pc, #40]	; (8003898 <SysTick_Config+0x40>)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	3b01      	subs	r3, #1
 8003874:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003876:	210f      	movs	r1, #15
 8003878:	f04f 30ff 	mov.w	r0, #4294967295
 800387c:	f7ff ff90 	bl	80037a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003880:	4b05      	ldr	r3, [pc, #20]	; (8003898 <SysTick_Config+0x40>)
 8003882:	2200      	movs	r2, #0
 8003884:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003886:	4b04      	ldr	r3, [pc, #16]	; (8003898 <SysTick_Config+0x40>)
 8003888:	2207      	movs	r2, #7
 800388a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	e000e010 	.word	0xe000e010

0800389c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7ff ff2d 	bl	8003704 <__NVIC_SetPriorityGrouping>
}
 80038aa:	bf00      	nop
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b086      	sub	sp, #24
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	4603      	mov	r3, r0
 80038ba:	60b9      	str	r1, [r7, #8]
 80038bc:	607a      	str	r2, [r7, #4]
 80038be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038c0:	2300      	movs	r3, #0
 80038c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038c4:	f7ff ff42 	bl	800374c <__NVIC_GetPriorityGrouping>
 80038c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	68b9      	ldr	r1, [r7, #8]
 80038ce:	6978      	ldr	r0, [r7, #20]
 80038d0:	f7ff ff90 	bl	80037f4 <NVIC_EncodePriority>
 80038d4:	4602      	mov	r2, r0
 80038d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038da:	4611      	mov	r1, r2
 80038dc:	4618      	mov	r0, r3
 80038de:	f7ff ff5f 	bl	80037a0 <__NVIC_SetPriority>
}
 80038e2:	bf00      	nop
 80038e4:	3718      	adds	r7, #24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b082      	sub	sp, #8
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	4603      	mov	r3, r0
 80038f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7ff ff35 	bl	8003768 <__NVIC_EnableIRQ>
}
 80038fe:	bf00      	nop
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b082      	sub	sp, #8
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7ff ffa2 	bl	8003858 <SysTick_Config>
 8003914:	4603      	mov	r3, r0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
	...

08003920 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003928:	2300      	movs	r3, #0
 800392a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e043      	b.n	80039be <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	461a      	mov	r2, r3
 800393c:	4b22      	ldr	r3, [pc, #136]	; (80039c8 <HAL_DMA_Init+0xa8>)
 800393e:	4413      	add	r3, r2
 8003940:	4a22      	ldr	r2, [pc, #136]	; (80039cc <HAL_DMA_Init+0xac>)
 8003942:	fba2 2303 	umull	r2, r3, r2, r3
 8003946:	091b      	lsrs	r3, r3, #4
 8003948:	009a      	lsls	r2, r3, #2
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a1f      	ldr	r2, [pc, #124]	; (80039d0 <HAL_DMA_Init+0xb0>)
 8003952:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2202      	movs	r2, #2
 8003958:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800396a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800396e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003978:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003984:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003990:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	4313      	orrs	r3, r2
 800399c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3714      	adds	r7, #20
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bc80      	pop	{r7}
 80039c6:	4770      	bx	lr
 80039c8:	bffdfff8 	.word	0xbffdfff8
 80039cc:	cccccccd 	.word	0xcccccccd
 80039d0:	40020000 	.word	0x40020000

080039d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
 80039e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039e2:	2300      	movs	r3, #0
 80039e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d101      	bne.n	80039f4 <HAL_DMA_Start_IT+0x20>
 80039f0:	2302      	movs	r3, #2
 80039f2:	e04a      	b.n	8003a8a <HAL_DMA_Start_IT+0xb6>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d13a      	bne.n	8003a7c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2202      	movs	r2, #2
 8003a0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f022 0201 	bic.w	r2, r2, #1
 8003a22:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	68b9      	ldr	r1, [r7, #8]
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 f938 	bl	8003ca0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d008      	beq.n	8003a4a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 020e 	orr.w	r2, r2, #14
 8003a46:	601a      	str	r2, [r3, #0]
 8003a48:	e00f      	b.n	8003a6a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 0204 	bic.w	r2, r2, #4
 8003a58:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f042 020a 	orr.w	r2, r2, #10
 8003a68:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f042 0201 	orr.w	r2, r2, #1
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	e005      	b.n	8003a88 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003a84:	2302      	movs	r3, #2
 8003a86:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003a88:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3718      	adds	r7, #24
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
	...

08003a94 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab0:	2204      	movs	r2, #4
 8003ab2:	409a      	lsls	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d04f      	beq.n	8003b5c <HAL_DMA_IRQHandler+0xc8>
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	f003 0304 	and.w	r3, r3, #4
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d04a      	beq.n	8003b5c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0320 	and.w	r3, r3, #32
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d107      	bne.n	8003ae4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 0204 	bic.w	r2, r2, #4
 8003ae2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a66      	ldr	r2, [pc, #408]	; (8003c84 <HAL_DMA_IRQHandler+0x1f0>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d029      	beq.n	8003b42 <HAL_DMA_IRQHandler+0xae>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a65      	ldr	r2, [pc, #404]	; (8003c88 <HAL_DMA_IRQHandler+0x1f4>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d022      	beq.n	8003b3e <HAL_DMA_IRQHandler+0xaa>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a63      	ldr	r2, [pc, #396]	; (8003c8c <HAL_DMA_IRQHandler+0x1f8>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d01a      	beq.n	8003b38 <HAL_DMA_IRQHandler+0xa4>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a62      	ldr	r2, [pc, #392]	; (8003c90 <HAL_DMA_IRQHandler+0x1fc>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d012      	beq.n	8003b32 <HAL_DMA_IRQHandler+0x9e>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a60      	ldr	r2, [pc, #384]	; (8003c94 <HAL_DMA_IRQHandler+0x200>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d00a      	beq.n	8003b2c <HAL_DMA_IRQHandler+0x98>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a5f      	ldr	r2, [pc, #380]	; (8003c98 <HAL_DMA_IRQHandler+0x204>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d102      	bne.n	8003b26 <HAL_DMA_IRQHandler+0x92>
 8003b20:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b24:	e00e      	b.n	8003b44 <HAL_DMA_IRQHandler+0xb0>
 8003b26:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003b2a:	e00b      	b.n	8003b44 <HAL_DMA_IRQHandler+0xb0>
 8003b2c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003b30:	e008      	b.n	8003b44 <HAL_DMA_IRQHandler+0xb0>
 8003b32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b36:	e005      	b.n	8003b44 <HAL_DMA_IRQHandler+0xb0>
 8003b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b3c:	e002      	b.n	8003b44 <HAL_DMA_IRQHandler+0xb0>
 8003b3e:	2340      	movs	r3, #64	; 0x40
 8003b40:	e000      	b.n	8003b44 <HAL_DMA_IRQHandler+0xb0>
 8003b42:	2304      	movs	r3, #4
 8003b44:	4a55      	ldr	r2, [pc, #340]	; (8003c9c <HAL_DMA_IRQHandler+0x208>)
 8003b46:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 8094 	beq.w	8003c7a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003b5a:	e08e      	b.n	8003c7a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b60:	2202      	movs	r2, #2
 8003b62:	409a      	lsls	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	4013      	ands	r3, r2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d056      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x186>
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d051      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0320 	and.w	r3, r3, #32
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10b      	bne.n	8003b9c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 020a 	bic.w	r2, r2, #10
 8003b92:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a38      	ldr	r2, [pc, #224]	; (8003c84 <HAL_DMA_IRQHandler+0x1f0>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d029      	beq.n	8003bfa <HAL_DMA_IRQHandler+0x166>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a37      	ldr	r2, [pc, #220]	; (8003c88 <HAL_DMA_IRQHandler+0x1f4>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d022      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0x162>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a35      	ldr	r2, [pc, #212]	; (8003c8c <HAL_DMA_IRQHandler+0x1f8>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d01a      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x15c>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a34      	ldr	r2, [pc, #208]	; (8003c90 <HAL_DMA_IRQHandler+0x1fc>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d012      	beq.n	8003bea <HAL_DMA_IRQHandler+0x156>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a32      	ldr	r2, [pc, #200]	; (8003c94 <HAL_DMA_IRQHandler+0x200>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d00a      	beq.n	8003be4 <HAL_DMA_IRQHandler+0x150>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a31      	ldr	r2, [pc, #196]	; (8003c98 <HAL_DMA_IRQHandler+0x204>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d102      	bne.n	8003bde <HAL_DMA_IRQHandler+0x14a>
 8003bd8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003bdc:	e00e      	b.n	8003bfc <HAL_DMA_IRQHandler+0x168>
 8003bde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003be2:	e00b      	b.n	8003bfc <HAL_DMA_IRQHandler+0x168>
 8003be4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003be8:	e008      	b.n	8003bfc <HAL_DMA_IRQHandler+0x168>
 8003bea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bee:	e005      	b.n	8003bfc <HAL_DMA_IRQHandler+0x168>
 8003bf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bf4:	e002      	b.n	8003bfc <HAL_DMA_IRQHandler+0x168>
 8003bf6:	2320      	movs	r3, #32
 8003bf8:	e000      	b.n	8003bfc <HAL_DMA_IRQHandler+0x168>
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	4a27      	ldr	r2, [pc, #156]	; (8003c9c <HAL_DMA_IRQHandler+0x208>)
 8003bfe:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d034      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003c18:	e02f      	b.n	8003c7a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	2208      	movs	r2, #8
 8003c20:	409a      	lsls	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	4013      	ands	r3, r2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d028      	beq.n	8003c7c <HAL_DMA_IRQHandler+0x1e8>
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	f003 0308 	and.w	r3, r3, #8
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d023      	beq.n	8003c7c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 020e 	bic.w	r2, r2, #14
 8003c42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c52:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d004      	beq.n	8003c7c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	4798      	blx	r3
    }
  }
  return;
 8003c7a:	bf00      	nop
 8003c7c:	bf00      	nop
}
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40020008 	.word	0x40020008
 8003c88:	4002001c 	.word	0x4002001c
 8003c8c:	40020030 	.word	0x40020030
 8003c90:	40020044 	.word	0x40020044
 8003c94:	40020058 	.word	0x40020058
 8003c98:	4002006c 	.word	0x4002006c
 8003c9c:	40020000 	.word	0x40020000

08003ca0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
 8003cac:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cbc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	2b10      	cmp	r3, #16
 8003ccc:	d108      	bne.n	8003ce0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68ba      	ldr	r2, [r7, #8]
 8003cdc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003cde:	e007      	b.n	8003cf0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68ba      	ldr	r2, [r7, #8]
 8003ce6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	60da      	str	r2, [r3, #12]
}
 8003cf0:	bf00      	nop
 8003cf2:	3714      	adds	r7, #20
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bc80      	pop	{r7}
 8003cf8:	4770      	bx	lr
	...

08003cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b08b      	sub	sp, #44	; 0x2c
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d06:	2300      	movs	r3, #0
 8003d08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d0e:	e127      	b.n	8003f60 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003d10:	2201      	movs	r2, #1
 8003d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d14:	fa02 f303 	lsl.w	r3, r2, r3
 8003d18:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	69fa      	ldr	r2, [r7, #28]
 8003d20:	4013      	ands	r3, r2
 8003d22:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	f040 8116 	bne.w	8003f5a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	2b12      	cmp	r3, #18
 8003d34:	d034      	beq.n	8003da0 <HAL_GPIO_Init+0xa4>
 8003d36:	2b12      	cmp	r3, #18
 8003d38:	d80d      	bhi.n	8003d56 <HAL_GPIO_Init+0x5a>
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d02b      	beq.n	8003d96 <HAL_GPIO_Init+0x9a>
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d804      	bhi.n	8003d4c <HAL_GPIO_Init+0x50>
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d031      	beq.n	8003daa <HAL_GPIO_Init+0xae>
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d01c      	beq.n	8003d84 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003d4a:	e048      	b.n	8003dde <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003d4c:	2b03      	cmp	r3, #3
 8003d4e:	d043      	beq.n	8003dd8 <HAL_GPIO_Init+0xdc>
 8003d50:	2b11      	cmp	r3, #17
 8003d52:	d01b      	beq.n	8003d8c <HAL_GPIO_Init+0x90>
          break;
 8003d54:	e043      	b.n	8003dde <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003d56:	4a89      	ldr	r2, [pc, #548]	; (8003f7c <HAL_GPIO_Init+0x280>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d026      	beq.n	8003daa <HAL_GPIO_Init+0xae>
 8003d5c:	4a87      	ldr	r2, [pc, #540]	; (8003f7c <HAL_GPIO_Init+0x280>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d806      	bhi.n	8003d70 <HAL_GPIO_Init+0x74>
 8003d62:	4a87      	ldr	r2, [pc, #540]	; (8003f80 <HAL_GPIO_Init+0x284>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d020      	beq.n	8003daa <HAL_GPIO_Init+0xae>
 8003d68:	4a86      	ldr	r2, [pc, #536]	; (8003f84 <HAL_GPIO_Init+0x288>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d01d      	beq.n	8003daa <HAL_GPIO_Init+0xae>
          break;
 8003d6e:	e036      	b.n	8003dde <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003d70:	4a85      	ldr	r2, [pc, #532]	; (8003f88 <HAL_GPIO_Init+0x28c>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d019      	beq.n	8003daa <HAL_GPIO_Init+0xae>
 8003d76:	4a85      	ldr	r2, [pc, #532]	; (8003f8c <HAL_GPIO_Init+0x290>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d016      	beq.n	8003daa <HAL_GPIO_Init+0xae>
 8003d7c:	4a84      	ldr	r2, [pc, #528]	; (8003f90 <HAL_GPIO_Init+0x294>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d013      	beq.n	8003daa <HAL_GPIO_Init+0xae>
          break;
 8003d82:	e02c      	b.n	8003dde <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	623b      	str	r3, [r7, #32]
          break;
 8003d8a:	e028      	b.n	8003dde <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	3304      	adds	r3, #4
 8003d92:	623b      	str	r3, [r7, #32]
          break;
 8003d94:	e023      	b.n	8003dde <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	3308      	adds	r3, #8
 8003d9c:	623b      	str	r3, [r7, #32]
          break;
 8003d9e:	e01e      	b.n	8003dde <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	330c      	adds	r3, #12
 8003da6:	623b      	str	r3, [r7, #32]
          break;
 8003da8:	e019      	b.n	8003dde <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d102      	bne.n	8003db8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003db2:	2304      	movs	r3, #4
 8003db4:	623b      	str	r3, [r7, #32]
          break;
 8003db6:	e012      	b.n	8003dde <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d105      	bne.n	8003dcc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003dc0:	2308      	movs	r3, #8
 8003dc2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	69fa      	ldr	r2, [r7, #28]
 8003dc8:	611a      	str	r2, [r3, #16]
          break;
 8003dca:	e008      	b.n	8003dde <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003dcc:	2308      	movs	r3, #8
 8003dce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	69fa      	ldr	r2, [r7, #28]
 8003dd4:	615a      	str	r2, [r3, #20]
          break;
 8003dd6:	e002      	b.n	8003dde <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	623b      	str	r3, [r7, #32]
          break;
 8003ddc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	2bff      	cmp	r3, #255	; 0xff
 8003de2:	d801      	bhi.n	8003de8 <HAL_GPIO_Init+0xec>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	e001      	b.n	8003dec <HAL_GPIO_Init+0xf0>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3304      	adds	r3, #4
 8003dec:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	2bff      	cmp	r3, #255	; 0xff
 8003df2:	d802      	bhi.n	8003dfa <HAL_GPIO_Init+0xfe>
 8003df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	e002      	b.n	8003e00 <HAL_GPIO_Init+0x104>
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	3b08      	subs	r3, #8
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	210f      	movs	r1, #15
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e0e:	43db      	mvns	r3, r3
 8003e10:	401a      	ands	r2, r3
 8003e12:	6a39      	ldr	r1, [r7, #32]
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	fa01 f303 	lsl.w	r3, r1, r3
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 8096 	beq.w	8003f5a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003e2e:	4b59      	ldr	r3, [pc, #356]	; (8003f94 <HAL_GPIO_Init+0x298>)
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	4a58      	ldr	r2, [pc, #352]	; (8003f94 <HAL_GPIO_Init+0x298>)
 8003e34:	f043 0301 	orr.w	r3, r3, #1
 8003e38:	6193      	str	r3, [r2, #24]
 8003e3a:	4b56      	ldr	r3, [pc, #344]	; (8003f94 <HAL_GPIO_Init+0x298>)
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	60bb      	str	r3, [r7, #8]
 8003e44:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003e46:	4a54      	ldr	r2, [pc, #336]	; (8003f98 <HAL_GPIO_Init+0x29c>)
 8003e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4a:	089b      	lsrs	r3, r3, #2
 8003e4c:	3302      	adds	r3, #2
 8003e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e52:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e56:	f003 0303 	and.w	r3, r3, #3
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	220f      	movs	r2, #15
 8003e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e62:	43db      	mvns	r3, r3
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	4013      	ands	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a4b      	ldr	r2, [pc, #300]	; (8003f9c <HAL_GPIO_Init+0x2a0>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d013      	beq.n	8003e9a <HAL_GPIO_Init+0x19e>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a4a      	ldr	r2, [pc, #296]	; (8003fa0 <HAL_GPIO_Init+0x2a4>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d00d      	beq.n	8003e96 <HAL_GPIO_Init+0x19a>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a49      	ldr	r2, [pc, #292]	; (8003fa4 <HAL_GPIO_Init+0x2a8>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d007      	beq.n	8003e92 <HAL_GPIO_Init+0x196>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a48      	ldr	r2, [pc, #288]	; (8003fa8 <HAL_GPIO_Init+0x2ac>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d101      	bne.n	8003e8e <HAL_GPIO_Init+0x192>
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e006      	b.n	8003e9c <HAL_GPIO_Init+0x1a0>
 8003e8e:	2304      	movs	r3, #4
 8003e90:	e004      	b.n	8003e9c <HAL_GPIO_Init+0x1a0>
 8003e92:	2302      	movs	r3, #2
 8003e94:	e002      	b.n	8003e9c <HAL_GPIO_Init+0x1a0>
 8003e96:	2301      	movs	r3, #1
 8003e98:	e000      	b.n	8003e9c <HAL_GPIO_Init+0x1a0>
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e9e:	f002 0203 	and.w	r2, r2, #3
 8003ea2:	0092      	lsls	r2, r2, #2
 8003ea4:	4093      	lsls	r3, r2
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003eac:	493a      	ldr	r1, [pc, #232]	; (8003f98 <HAL_GPIO_Init+0x29c>)
 8003eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb0:	089b      	lsrs	r3, r3, #2
 8003eb2:	3302      	adds	r3, #2
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d006      	beq.n	8003ed4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003ec6:	4b39      	ldr	r3, [pc, #228]	; (8003fac <HAL_GPIO_Init+0x2b0>)
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	4938      	ldr	r1, [pc, #224]	; (8003fac <HAL_GPIO_Init+0x2b0>)
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	600b      	str	r3, [r1, #0]
 8003ed2:	e006      	b.n	8003ee2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003ed4:	4b35      	ldr	r3, [pc, #212]	; (8003fac <HAL_GPIO_Init+0x2b0>)
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	43db      	mvns	r3, r3
 8003edc:	4933      	ldr	r1, [pc, #204]	; (8003fac <HAL_GPIO_Init+0x2b0>)
 8003ede:	4013      	ands	r3, r2
 8003ee0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d006      	beq.n	8003efc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003eee:	4b2f      	ldr	r3, [pc, #188]	; (8003fac <HAL_GPIO_Init+0x2b0>)
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	492e      	ldr	r1, [pc, #184]	; (8003fac <HAL_GPIO_Init+0x2b0>)
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	604b      	str	r3, [r1, #4]
 8003efa:	e006      	b.n	8003f0a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003efc:	4b2b      	ldr	r3, [pc, #172]	; (8003fac <HAL_GPIO_Init+0x2b0>)
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	43db      	mvns	r3, r3
 8003f04:	4929      	ldr	r1, [pc, #164]	; (8003fac <HAL_GPIO_Init+0x2b0>)
 8003f06:	4013      	ands	r3, r2
 8003f08:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d006      	beq.n	8003f24 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003f16:	4b25      	ldr	r3, [pc, #148]	; (8003fac <HAL_GPIO_Init+0x2b0>)
 8003f18:	689a      	ldr	r2, [r3, #8]
 8003f1a:	4924      	ldr	r1, [pc, #144]	; (8003fac <HAL_GPIO_Init+0x2b0>)
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	608b      	str	r3, [r1, #8]
 8003f22:	e006      	b.n	8003f32 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003f24:	4b21      	ldr	r3, [pc, #132]	; (8003fac <HAL_GPIO_Init+0x2b0>)
 8003f26:	689a      	ldr	r2, [r3, #8]
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	43db      	mvns	r3, r3
 8003f2c:	491f      	ldr	r1, [pc, #124]	; (8003fac <HAL_GPIO_Init+0x2b0>)
 8003f2e:	4013      	ands	r3, r2
 8003f30:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d006      	beq.n	8003f4c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003f3e:	4b1b      	ldr	r3, [pc, #108]	; (8003fac <HAL_GPIO_Init+0x2b0>)
 8003f40:	68da      	ldr	r2, [r3, #12]
 8003f42:	491a      	ldr	r1, [pc, #104]	; (8003fac <HAL_GPIO_Init+0x2b0>)
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	60cb      	str	r3, [r1, #12]
 8003f4a:	e006      	b.n	8003f5a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003f4c:	4b17      	ldr	r3, [pc, #92]	; (8003fac <HAL_GPIO_Init+0x2b0>)
 8003f4e:	68da      	ldr	r2, [r3, #12]
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	43db      	mvns	r3, r3
 8003f54:	4915      	ldr	r1, [pc, #84]	; (8003fac <HAL_GPIO_Init+0x2b0>)
 8003f56:	4013      	ands	r3, r2
 8003f58:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	fa22 f303 	lsr.w	r3, r2, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f47f aed0 	bne.w	8003d10 <HAL_GPIO_Init+0x14>
  }
}
 8003f70:	bf00      	nop
 8003f72:	372c      	adds	r7, #44	; 0x2c
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bc80      	pop	{r7}
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	10210000 	.word	0x10210000
 8003f80:	10110000 	.word	0x10110000
 8003f84:	10120000 	.word	0x10120000
 8003f88:	10310000 	.word	0x10310000
 8003f8c:	10320000 	.word	0x10320000
 8003f90:	10220000 	.word	0x10220000
 8003f94:	40021000 	.word	0x40021000
 8003f98:	40010000 	.word	0x40010000
 8003f9c:	40010800 	.word	0x40010800
 8003fa0:	40010c00 	.word	0x40010c00
 8003fa4:	40011000 	.word	0x40011000
 8003fa8:	40011400 	.word	0x40011400
 8003fac:	40010400 	.word	0x40010400

08003fb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	460b      	mov	r3, r1
 8003fba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689a      	ldr	r2, [r3, #8]
 8003fc0:	887b      	ldrh	r3, [r7, #2]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d002      	beq.n	8003fce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	73fb      	strb	r3, [r7, #15]
 8003fcc:	e001      	b.n	8003fd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3714      	adds	r7, #20
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bc80      	pop	{r7}
 8003fdc:	4770      	bx	lr

08003fde <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b083      	sub	sp, #12
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	807b      	strh	r3, [r7, #2]
 8003fea:	4613      	mov	r3, r2
 8003fec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fee:	787b      	ldrb	r3, [r7, #1]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d003      	beq.n	8003ffc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ff4:	887a      	ldrh	r2, [r7, #2]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003ffa:	e003      	b.n	8004004 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ffc:	887b      	ldrh	r3, [r7, #2]
 8003ffe:	041a      	lsls	r2, r3, #16
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	611a      	str	r2, [r3, #16]
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	bc80      	pop	{r7}
 800400c:	4770      	bx	lr

0800400e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800400e:	b480      	push	{r7}
 8004010:	b085      	sub	sp, #20
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
 8004016:	460b      	mov	r3, r1
 8004018:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004020:	887a      	ldrh	r2, [r7, #2]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	4013      	ands	r3, r2
 8004026:	041a      	lsls	r2, r3, #16
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	43d9      	mvns	r1, r3
 800402c:	887b      	ldrh	r3, [r7, #2]
 800402e:	400b      	ands	r3, r1
 8004030:	431a      	orrs	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	611a      	str	r2, [r3, #16]
}
 8004036:	bf00      	nop
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	bc80      	pop	{r7}
 800403e:	4770      	bx	lr

08004040 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e26c      	b.n	800452c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	f000 8087 	beq.w	800416e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004060:	4b92      	ldr	r3, [pc, #584]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f003 030c 	and.w	r3, r3, #12
 8004068:	2b04      	cmp	r3, #4
 800406a:	d00c      	beq.n	8004086 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800406c:	4b8f      	ldr	r3, [pc, #572]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f003 030c 	and.w	r3, r3, #12
 8004074:	2b08      	cmp	r3, #8
 8004076:	d112      	bne.n	800409e <HAL_RCC_OscConfig+0x5e>
 8004078:	4b8c      	ldr	r3, [pc, #560]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004084:	d10b      	bne.n	800409e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004086:	4b89      	ldr	r3, [pc, #548]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d06c      	beq.n	800416c <HAL_RCC_OscConfig+0x12c>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d168      	bne.n	800416c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e246      	b.n	800452c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040a6:	d106      	bne.n	80040b6 <HAL_RCC_OscConfig+0x76>
 80040a8:	4b80      	ldr	r3, [pc, #512]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a7f      	ldr	r2, [pc, #508]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 80040ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b2:	6013      	str	r3, [r2, #0]
 80040b4:	e02e      	b.n	8004114 <HAL_RCC_OscConfig+0xd4>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d10c      	bne.n	80040d8 <HAL_RCC_OscConfig+0x98>
 80040be:	4b7b      	ldr	r3, [pc, #492]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a7a      	ldr	r2, [pc, #488]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 80040c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040c8:	6013      	str	r3, [r2, #0]
 80040ca:	4b78      	ldr	r3, [pc, #480]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a77      	ldr	r2, [pc, #476]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 80040d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040d4:	6013      	str	r3, [r2, #0]
 80040d6:	e01d      	b.n	8004114 <HAL_RCC_OscConfig+0xd4>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040e0:	d10c      	bne.n	80040fc <HAL_RCC_OscConfig+0xbc>
 80040e2:	4b72      	ldr	r3, [pc, #456]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a71      	ldr	r2, [pc, #452]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 80040e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040ec:	6013      	str	r3, [r2, #0]
 80040ee:	4b6f      	ldr	r3, [pc, #444]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a6e      	ldr	r2, [pc, #440]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 80040f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f8:	6013      	str	r3, [r2, #0]
 80040fa:	e00b      	b.n	8004114 <HAL_RCC_OscConfig+0xd4>
 80040fc:	4b6b      	ldr	r3, [pc, #428]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a6a      	ldr	r2, [pc, #424]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 8004102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004106:	6013      	str	r3, [r2, #0]
 8004108:	4b68      	ldr	r3, [pc, #416]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a67      	ldr	r2, [pc, #412]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 800410e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004112:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d013      	beq.n	8004144 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800411c:	f7fe fe78 	bl	8002e10 <HAL_GetTick>
 8004120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004124:	f7fe fe74 	bl	8002e10 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b64      	cmp	r3, #100	; 0x64
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e1fa      	b.n	800452c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004136:	4b5d      	ldr	r3, [pc, #372]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d0f0      	beq.n	8004124 <HAL_RCC_OscConfig+0xe4>
 8004142:	e014      	b.n	800416e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004144:	f7fe fe64 	bl	8002e10 <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800414c:	f7fe fe60 	bl	8002e10 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b64      	cmp	r3, #100	; 0x64
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e1e6      	b.n	800452c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800415e:	4b53      	ldr	r3, [pc, #332]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1f0      	bne.n	800414c <HAL_RCC_OscConfig+0x10c>
 800416a:	e000      	b.n	800416e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800416c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d063      	beq.n	8004242 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800417a:	4b4c      	ldr	r3, [pc, #304]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f003 030c 	and.w	r3, r3, #12
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00b      	beq.n	800419e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004186:	4b49      	ldr	r3, [pc, #292]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f003 030c 	and.w	r3, r3, #12
 800418e:	2b08      	cmp	r3, #8
 8004190:	d11c      	bne.n	80041cc <HAL_RCC_OscConfig+0x18c>
 8004192:	4b46      	ldr	r3, [pc, #280]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d116      	bne.n	80041cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800419e:	4b43      	ldr	r3, [pc, #268]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d005      	beq.n	80041b6 <HAL_RCC_OscConfig+0x176>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d001      	beq.n	80041b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e1ba      	b.n	800452c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041b6:	4b3d      	ldr	r3, [pc, #244]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	4939      	ldr	r1, [pc, #228]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ca:	e03a      	b.n	8004242 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d020      	beq.n	8004216 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041d4:	4b36      	ldr	r3, [pc, #216]	; (80042b0 <HAL_RCC_OscConfig+0x270>)
 80041d6:	2201      	movs	r2, #1
 80041d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041da:	f7fe fe19 	bl	8002e10 <HAL_GetTick>
 80041de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041e0:	e008      	b.n	80041f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041e2:	f7fe fe15 	bl	8002e10 <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d901      	bls.n	80041f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e19b      	b.n	800452c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f4:	4b2d      	ldr	r3, [pc, #180]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d0f0      	beq.n	80041e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004200:	4b2a      	ldr	r3, [pc, #168]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	00db      	lsls	r3, r3, #3
 800420e:	4927      	ldr	r1, [pc, #156]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 8004210:	4313      	orrs	r3, r2
 8004212:	600b      	str	r3, [r1, #0]
 8004214:	e015      	b.n	8004242 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004216:	4b26      	ldr	r3, [pc, #152]	; (80042b0 <HAL_RCC_OscConfig+0x270>)
 8004218:	2200      	movs	r2, #0
 800421a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800421c:	f7fe fdf8 	bl	8002e10 <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004222:	e008      	b.n	8004236 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004224:	f7fe fdf4 	bl	8002e10 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e17a      	b.n	800452c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004236:	4b1d      	ldr	r3, [pc, #116]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1f0      	bne.n	8004224 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0308 	and.w	r3, r3, #8
 800424a:	2b00      	cmp	r3, #0
 800424c:	d03a      	beq.n	80042c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d019      	beq.n	800428a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004256:	4b17      	ldr	r3, [pc, #92]	; (80042b4 <HAL_RCC_OscConfig+0x274>)
 8004258:	2201      	movs	r2, #1
 800425a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800425c:	f7fe fdd8 	bl	8002e10 <HAL_GetTick>
 8004260:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004262:	e008      	b.n	8004276 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004264:	f7fe fdd4 	bl	8002e10 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b02      	cmp	r3, #2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e15a      	b.n	800452c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004276:	4b0d      	ldr	r3, [pc, #52]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d0f0      	beq.n	8004264 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004282:	2001      	movs	r0, #1
 8004284:	f000 fac6 	bl	8004814 <RCC_Delay>
 8004288:	e01c      	b.n	80042c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800428a:	4b0a      	ldr	r3, [pc, #40]	; (80042b4 <HAL_RCC_OscConfig+0x274>)
 800428c:	2200      	movs	r2, #0
 800428e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004290:	f7fe fdbe 	bl	8002e10 <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004296:	e00f      	b.n	80042b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004298:	f7fe fdba 	bl	8002e10 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d908      	bls.n	80042b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e140      	b.n	800452c <HAL_RCC_OscConfig+0x4ec>
 80042aa:	bf00      	nop
 80042ac:	40021000 	.word	0x40021000
 80042b0:	42420000 	.word	0x42420000
 80042b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042b8:	4b9e      	ldr	r3, [pc, #632]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1e9      	bne.n	8004298 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0304 	and.w	r3, r3, #4
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 80a6 	beq.w	800441e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042d2:	2300      	movs	r3, #0
 80042d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042d6:	4b97      	ldr	r3, [pc, #604]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10d      	bne.n	80042fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042e2:	4b94      	ldr	r3, [pc, #592]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	4a93      	ldr	r2, [pc, #588]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 80042e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ec:	61d3      	str	r3, [r2, #28]
 80042ee:	4b91      	ldr	r3, [pc, #580]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f6:	60bb      	str	r3, [r7, #8]
 80042f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042fa:	2301      	movs	r3, #1
 80042fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042fe:	4b8e      	ldr	r3, [pc, #568]	; (8004538 <HAL_RCC_OscConfig+0x4f8>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004306:	2b00      	cmp	r3, #0
 8004308:	d118      	bne.n	800433c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800430a:	4b8b      	ldr	r3, [pc, #556]	; (8004538 <HAL_RCC_OscConfig+0x4f8>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a8a      	ldr	r2, [pc, #552]	; (8004538 <HAL_RCC_OscConfig+0x4f8>)
 8004310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004314:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004316:	f7fe fd7b 	bl	8002e10 <HAL_GetTick>
 800431a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800431c:	e008      	b.n	8004330 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800431e:	f7fe fd77 	bl	8002e10 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b64      	cmp	r3, #100	; 0x64
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e0fd      	b.n	800452c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004330:	4b81      	ldr	r3, [pc, #516]	; (8004538 <HAL_RCC_OscConfig+0x4f8>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0f0      	beq.n	800431e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d106      	bne.n	8004352 <HAL_RCC_OscConfig+0x312>
 8004344:	4b7b      	ldr	r3, [pc, #492]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 8004346:	6a1b      	ldr	r3, [r3, #32]
 8004348:	4a7a      	ldr	r2, [pc, #488]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 800434a:	f043 0301 	orr.w	r3, r3, #1
 800434e:	6213      	str	r3, [r2, #32]
 8004350:	e02d      	b.n	80043ae <HAL_RCC_OscConfig+0x36e>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10c      	bne.n	8004374 <HAL_RCC_OscConfig+0x334>
 800435a:	4b76      	ldr	r3, [pc, #472]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	4a75      	ldr	r2, [pc, #468]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 8004360:	f023 0301 	bic.w	r3, r3, #1
 8004364:	6213      	str	r3, [r2, #32]
 8004366:	4b73      	ldr	r3, [pc, #460]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	4a72      	ldr	r2, [pc, #456]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 800436c:	f023 0304 	bic.w	r3, r3, #4
 8004370:	6213      	str	r3, [r2, #32]
 8004372:	e01c      	b.n	80043ae <HAL_RCC_OscConfig+0x36e>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	2b05      	cmp	r3, #5
 800437a:	d10c      	bne.n	8004396 <HAL_RCC_OscConfig+0x356>
 800437c:	4b6d      	ldr	r3, [pc, #436]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	4a6c      	ldr	r2, [pc, #432]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 8004382:	f043 0304 	orr.w	r3, r3, #4
 8004386:	6213      	str	r3, [r2, #32]
 8004388:	4b6a      	ldr	r3, [pc, #424]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	4a69      	ldr	r2, [pc, #420]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 800438e:	f043 0301 	orr.w	r3, r3, #1
 8004392:	6213      	str	r3, [r2, #32]
 8004394:	e00b      	b.n	80043ae <HAL_RCC_OscConfig+0x36e>
 8004396:	4b67      	ldr	r3, [pc, #412]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	4a66      	ldr	r2, [pc, #408]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 800439c:	f023 0301 	bic.w	r3, r3, #1
 80043a0:	6213      	str	r3, [r2, #32]
 80043a2:	4b64      	ldr	r3, [pc, #400]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	4a63      	ldr	r2, [pc, #396]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 80043a8:	f023 0304 	bic.w	r3, r3, #4
 80043ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d015      	beq.n	80043e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043b6:	f7fe fd2b 	bl	8002e10 <HAL_GetTick>
 80043ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043bc:	e00a      	b.n	80043d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043be:	f7fe fd27 	bl	8002e10 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d901      	bls.n	80043d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e0ab      	b.n	800452c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d4:	4b57      	ldr	r3, [pc, #348]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 80043d6:	6a1b      	ldr	r3, [r3, #32]
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0ee      	beq.n	80043be <HAL_RCC_OscConfig+0x37e>
 80043e0:	e014      	b.n	800440c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043e2:	f7fe fd15 	bl	8002e10 <HAL_GetTick>
 80043e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043e8:	e00a      	b.n	8004400 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ea:	f7fe fd11 	bl	8002e10 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d901      	bls.n	8004400 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e095      	b.n	800452c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004400:	4b4c      	ldr	r3, [pc, #304]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1ee      	bne.n	80043ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800440c:	7dfb      	ldrb	r3, [r7, #23]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d105      	bne.n	800441e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004412:	4b48      	ldr	r3, [pc, #288]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	4a47      	ldr	r2, [pc, #284]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 8004418:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800441c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 8081 	beq.w	800452a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004428:	4b42      	ldr	r3, [pc, #264]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f003 030c 	and.w	r3, r3, #12
 8004430:	2b08      	cmp	r3, #8
 8004432:	d061      	beq.n	80044f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	2b02      	cmp	r3, #2
 800443a:	d146      	bne.n	80044ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800443c:	4b3f      	ldr	r3, [pc, #252]	; (800453c <HAL_RCC_OscConfig+0x4fc>)
 800443e:	2200      	movs	r2, #0
 8004440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004442:	f7fe fce5 	bl	8002e10 <HAL_GetTick>
 8004446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004448:	e008      	b.n	800445c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800444a:	f7fe fce1 	bl	8002e10 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	2b02      	cmp	r3, #2
 8004456:	d901      	bls.n	800445c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e067      	b.n	800452c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800445c:	4b35      	ldr	r3, [pc, #212]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1f0      	bne.n	800444a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a1b      	ldr	r3, [r3, #32]
 800446c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004470:	d108      	bne.n	8004484 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004472:	4b30      	ldr	r3, [pc, #192]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	492d      	ldr	r1, [pc, #180]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 8004480:	4313      	orrs	r3, r2
 8004482:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004484:	4b2b      	ldr	r3, [pc, #172]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a19      	ldr	r1, [r3, #32]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004494:	430b      	orrs	r3, r1
 8004496:	4927      	ldr	r1, [pc, #156]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 8004498:	4313      	orrs	r3, r2
 800449a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800449c:	4b27      	ldr	r3, [pc, #156]	; (800453c <HAL_RCC_OscConfig+0x4fc>)
 800449e:	2201      	movs	r2, #1
 80044a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a2:	f7fe fcb5 	bl	8002e10 <HAL_GetTick>
 80044a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044a8:	e008      	b.n	80044bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044aa:	f7fe fcb1 	bl	8002e10 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d901      	bls.n	80044bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e037      	b.n	800452c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044bc:	4b1d      	ldr	r3, [pc, #116]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d0f0      	beq.n	80044aa <HAL_RCC_OscConfig+0x46a>
 80044c8:	e02f      	b.n	800452a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ca:	4b1c      	ldr	r3, [pc, #112]	; (800453c <HAL_RCC_OscConfig+0x4fc>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d0:	f7fe fc9e 	bl	8002e10 <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044d8:	f7fe fc9a 	bl	8002e10 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e020      	b.n	800452c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044ea:	4b12      	ldr	r3, [pc, #72]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1f0      	bne.n	80044d8 <HAL_RCC_OscConfig+0x498>
 80044f6:	e018      	b.n	800452a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	69db      	ldr	r3, [r3, #28]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d101      	bne.n	8004504 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e013      	b.n	800452c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004504:	4b0b      	ldr	r3, [pc, #44]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	429a      	cmp	r2, r3
 8004516:	d106      	bne.n	8004526 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004522:	429a      	cmp	r2, r3
 8004524:	d001      	beq.n	800452a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e000      	b.n	800452c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3718      	adds	r7, #24
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	40021000 	.word	0x40021000
 8004538:	40007000 	.word	0x40007000
 800453c:	42420060 	.word	0x42420060

08004540 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d101      	bne.n	8004554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e0d0      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004554:	4b6a      	ldr	r3, [pc, #424]	; (8004700 <HAL_RCC_ClockConfig+0x1c0>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0307 	and.w	r3, r3, #7
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	429a      	cmp	r2, r3
 8004560:	d910      	bls.n	8004584 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004562:	4b67      	ldr	r3, [pc, #412]	; (8004700 <HAL_RCC_ClockConfig+0x1c0>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f023 0207 	bic.w	r2, r3, #7
 800456a:	4965      	ldr	r1, [pc, #404]	; (8004700 <HAL_RCC_ClockConfig+0x1c0>)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	4313      	orrs	r3, r2
 8004570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004572:	4b63      	ldr	r3, [pc, #396]	; (8004700 <HAL_RCC_ClockConfig+0x1c0>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	429a      	cmp	r2, r3
 800457e:	d001      	beq.n	8004584 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e0b8      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d020      	beq.n	80045d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0304 	and.w	r3, r3, #4
 8004598:	2b00      	cmp	r3, #0
 800459a:	d005      	beq.n	80045a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800459c:	4b59      	ldr	r3, [pc, #356]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	4a58      	ldr	r2, [pc, #352]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 80045a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80045a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0308 	and.w	r3, r3, #8
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d005      	beq.n	80045c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045b4:	4b53      	ldr	r3, [pc, #332]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	4a52      	ldr	r2, [pc, #328]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 80045ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80045be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045c0:	4b50      	ldr	r3, [pc, #320]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	494d      	ldr	r1, [pc, #308]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d040      	beq.n	8004660 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d107      	bne.n	80045f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045e6:	4b47      	ldr	r3, [pc, #284]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d115      	bne.n	800461e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e07f      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d107      	bne.n	800460e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045fe:	4b41      	ldr	r3, [pc, #260]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d109      	bne.n	800461e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e073      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800460e:	4b3d      	ldr	r3, [pc, #244]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e06b      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800461e:	4b39      	ldr	r3, [pc, #228]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f023 0203 	bic.w	r2, r3, #3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	4936      	ldr	r1, [pc, #216]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 800462c:	4313      	orrs	r3, r2
 800462e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004630:	f7fe fbee 	bl	8002e10 <HAL_GetTick>
 8004634:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004636:	e00a      	b.n	800464e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004638:	f7fe fbea 	bl	8002e10 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	f241 3288 	movw	r2, #5000	; 0x1388
 8004646:	4293      	cmp	r3, r2
 8004648:	d901      	bls.n	800464e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e053      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800464e:	4b2d      	ldr	r3, [pc, #180]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f003 020c 	and.w	r2, r3, #12
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	429a      	cmp	r2, r3
 800465e:	d1eb      	bne.n	8004638 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004660:	4b27      	ldr	r3, [pc, #156]	; (8004700 <HAL_RCC_ClockConfig+0x1c0>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0307 	and.w	r3, r3, #7
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	429a      	cmp	r2, r3
 800466c:	d210      	bcs.n	8004690 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800466e:	4b24      	ldr	r3, [pc, #144]	; (8004700 <HAL_RCC_ClockConfig+0x1c0>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f023 0207 	bic.w	r2, r3, #7
 8004676:	4922      	ldr	r1, [pc, #136]	; (8004700 <HAL_RCC_ClockConfig+0x1c0>)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	4313      	orrs	r3, r2
 800467c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800467e:	4b20      	ldr	r3, [pc, #128]	; (8004700 <HAL_RCC_ClockConfig+0x1c0>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0307 	and.w	r3, r3, #7
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	429a      	cmp	r2, r3
 800468a:	d001      	beq.n	8004690 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e032      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0304 	and.w	r3, r3, #4
 8004698:	2b00      	cmp	r3, #0
 800469a:	d008      	beq.n	80046ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800469c:	4b19      	ldr	r3, [pc, #100]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	4916      	ldr	r1, [pc, #88]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0308 	and.w	r3, r3, #8
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d009      	beq.n	80046ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046ba:	4b12      	ldr	r3, [pc, #72]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	00db      	lsls	r3, r3, #3
 80046c8:	490e      	ldr	r1, [pc, #56]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046ce:	f000 f821 	bl	8004714 <HAL_RCC_GetSysClockFreq>
 80046d2:	4601      	mov	r1, r0
 80046d4:	4b0b      	ldr	r3, [pc, #44]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	091b      	lsrs	r3, r3, #4
 80046da:	f003 030f 	and.w	r3, r3, #15
 80046de:	4a0a      	ldr	r2, [pc, #40]	; (8004708 <HAL_RCC_ClockConfig+0x1c8>)
 80046e0:	5cd3      	ldrb	r3, [r2, r3]
 80046e2:	fa21 f303 	lsr.w	r3, r1, r3
 80046e6:	4a09      	ldr	r2, [pc, #36]	; (800470c <HAL_RCC_ClockConfig+0x1cc>)
 80046e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80046ea:	4b09      	ldr	r3, [pc, #36]	; (8004710 <HAL_RCC_ClockConfig+0x1d0>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7fe fb4c 	bl	8002d8c <HAL_InitTick>

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	40022000 	.word	0x40022000
 8004704:	40021000 	.word	0x40021000
 8004708:	080076bc 	.word	0x080076bc
 800470c:	20000058 	.word	0x20000058
 8004710:	2000005c 	.word	0x2000005c

08004714 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004714:	b490      	push	{r4, r7}
 8004716:	b08a      	sub	sp, #40	; 0x28
 8004718:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800471a:	4b2a      	ldr	r3, [pc, #168]	; (80047c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800471c:	1d3c      	adds	r4, r7, #4
 800471e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004720:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004724:	4b28      	ldr	r3, [pc, #160]	; (80047c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004726:	881b      	ldrh	r3, [r3, #0]
 8004728:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800472a:	2300      	movs	r3, #0
 800472c:	61fb      	str	r3, [r7, #28]
 800472e:	2300      	movs	r3, #0
 8004730:	61bb      	str	r3, [r7, #24]
 8004732:	2300      	movs	r3, #0
 8004734:	627b      	str	r3, [r7, #36]	; 0x24
 8004736:	2300      	movs	r3, #0
 8004738:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800473a:	2300      	movs	r3, #0
 800473c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800473e:	4b23      	ldr	r3, [pc, #140]	; (80047cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	f003 030c 	and.w	r3, r3, #12
 800474a:	2b04      	cmp	r3, #4
 800474c:	d002      	beq.n	8004754 <HAL_RCC_GetSysClockFreq+0x40>
 800474e:	2b08      	cmp	r3, #8
 8004750:	d003      	beq.n	800475a <HAL_RCC_GetSysClockFreq+0x46>
 8004752:	e02d      	b.n	80047b0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004754:	4b1e      	ldr	r3, [pc, #120]	; (80047d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004756:	623b      	str	r3, [r7, #32]
      break;
 8004758:	e02d      	b.n	80047b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	0c9b      	lsrs	r3, r3, #18
 800475e:	f003 030f 	and.w	r3, r3, #15
 8004762:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004766:	4413      	add	r3, r2
 8004768:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800476c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d013      	beq.n	80047a0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004778:	4b14      	ldr	r3, [pc, #80]	; (80047cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	0c5b      	lsrs	r3, r3, #17
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004786:	4413      	add	r3, r2
 8004788:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800478c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	4a0f      	ldr	r2, [pc, #60]	; (80047d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004792:	fb02 f203 	mul.w	r2, r2, r3
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	fbb2 f3f3 	udiv	r3, r2, r3
 800479c:	627b      	str	r3, [r7, #36]	; 0x24
 800479e:	e004      	b.n	80047aa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	4a0c      	ldr	r2, [pc, #48]	; (80047d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80047a4:	fb02 f303 	mul.w	r3, r2, r3
 80047a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	623b      	str	r3, [r7, #32]
      break;
 80047ae:	e002      	b.n	80047b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80047b0:	4b07      	ldr	r3, [pc, #28]	; (80047d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80047b2:	623b      	str	r3, [r7, #32]
      break;
 80047b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047b6:	6a3b      	ldr	r3, [r7, #32]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3728      	adds	r7, #40	; 0x28
 80047bc:	46bd      	mov	sp, r7
 80047be:	bc90      	pop	{r4, r7}
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	08007688 	.word	0x08007688
 80047c8:	08007698 	.word	0x08007698
 80047cc:	40021000 	.word	0x40021000
 80047d0:	007a1200 	.word	0x007a1200
 80047d4:	003d0900 	.word	0x003d0900

080047d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047d8:	b480      	push	{r7}
 80047da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047dc:	4b02      	ldr	r3, [pc, #8]	; (80047e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80047de:	681b      	ldr	r3, [r3, #0]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bc80      	pop	{r7}
 80047e6:	4770      	bx	lr
 80047e8:	20000058 	.word	0x20000058

080047ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80047f0:	f7ff fff2 	bl	80047d8 <HAL_RCC_GetHCLKFreq>
 80047f4:	4601      	mov	r1, r0
 80047f6:	4b05      	ldr	r3, [pc, #20]	; (800480c <HAL_RCC_GetPCLK2Freq+0x20>)
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	0adb      	lsrs	r3, r3, #11
 80047fc:	f003 0307 	and.w	r3, r3, #7
 8004800:	4a03      	ldr	r2, [pc, #12]	; (8004810 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004802:	5cd3      	ldrb	r3, [r2, r3]
 8004804:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004808:	4618      	mov	r0, r3
 800480a:	bd80      	pop	{r7, pc}
 800480c:	40021000 	.word	0x40021000
 8004810:	080076cc 	.word	0x080076cc

08004814 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800481c:	4b0a      	ldr	r3, [pc, #40]	; (8004848 <RCC_Delay+0x34>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a0a      	ldr	r2, [pc, #40]	; (800484c <RCC_Delay+0x38>)
 8004822:	fba2 2303 	umull	r2, r3, r2, r3
 8004826:	0a5b      	lsrs	r3, r3, #9
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	fb02 f303 	mul.w	r3, r2, r3
 800482e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004830:	bf00      	nop
  }
  while (Delay --);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	1e5a      	subs	r2, r3, #1
 8004836:	60fa      	str	r2, [r7, #12]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1f9      	bne.n	8004830 <RCC_Delay+0x1c>
}
 800483c:	bf00      	nop
 800483e:	3714      	adds	r7, #20
 8004840:	46bd      	mov	sp, r7
 8004842:	bc80      	pop	{r7}
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	20000058 	.word	0x20000058
 800484c:	10624dd3 	.word	0x10624dd3

08004850 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004858:	2300      	movs	r3, #0
 800485a:	613b      	str	r3, [r7, #16]
 800485c:	2300      	movs	r3, #0
 800485e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0301 	and.w	r3, r3, #1
 8004868:	2b00      	cmp	r3, #0
 800486a:	d07d      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800486c:	2300      	movs	r3, #0
 800486e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004870:	4b4f      	ldr	r3, [pc, #316]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004872:	69db      	ldr	r3, [r3, #28]
 8004874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10d      	bne.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800487c:	4b4c      	ldr	r3, [pc, #304]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800487e:	69db      	ldr	r3, [r3, #28]
 8004880:	4a4b      	ldr	r2, [pc, #300]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004882:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004886:	61d3      	str	r3, [r2, #28]
 8004888:	4b49      	ldr	r3, [pc, #292]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800488a:	69db      	ldr	r3, [r3, #28]
 800488c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004890:	60bb      	str	r3, [r7, #8]
 8004892:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004894:	2301      	movs	r3, #1
 8004896:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004898:	4b46      	ldr	r3, [pc, #280]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d118      	bne.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048a4:	4b43      	ldr	r3, [pc, #268]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a42      	ldr	r2, [pc, #264]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048b0:	f7fe faae 	bl	8002e10 <HAL_GetTick>
 80048b4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048b6:	e008      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048b8:	f7fe faaa 	bl	8002e10 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b64      	cmp	r3, #100	; 0x64
 80048c4:	d901      	bls.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e06d      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ca:	4b3a      	ldr	r3, [pc, #232]	; (80049b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0f0      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048d6:	4b36      	ldr	r3, [pc, #216]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048de:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d02e      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d027      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048f4:	4b2e      	ldr	r3, [pc, #184]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048fc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048fe:	4b2e      	ldr	r3, [pc, #184]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004900:	2201      	movs	r2, #1
 8004902:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004904:	4b2c      	ldr	r3, [pc, #176]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004906:	2200      	movs	r2, #0
 8004908:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800490a:	4a29      	ldr	r2, [pc, #164]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d014      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800491a:	f7fe fa79 	bl	8002e10 <HAL_GetTick>
 800491e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004920:	e00a      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004922:	f7fe fa75 	bl	8002e10 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004930:	4293      	cmp	r3, r2
 8004932:	d901      	bls.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e036      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004938:	4b1d      	ldr	r3, [pc, #116]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d0ee      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004944:	4b1a      	ldr	r3, [pc, #104]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	4917      	ldr	r1, [pc, #92]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004952:	4313      	orrs	r3, r2
 8004954:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004956:	7dfb      	ldrb	r3, [r7, #23]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d105      	bne.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800495c:	4b14      	ldr	r3, [pc, #80]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800495e:	69db      	ldr	r3, [r3, #28]
 8004960:	4a13      	ldr	r2, [pc, #76]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004962:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004966:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d008      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004974:	4b0e      	ldr	r3, [pc, #56]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	490b      	ldr	r1, [pc, #44]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004982:	4313      	orrs	r3, r2
 8004984:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0310 	and.w	r3, r3, #16
 800498e:	2b00      	cmp	r3, #0
 8004990:	d008      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004992:	4b07      	ldr	r3, [pc, #28]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	4904      	ldr	r1, [pc, #16]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3718      	adds	r7, #24
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	40021000 	.word	0x40021000
 80049b4:	40007000 	.word	0x40007000
 80049b8:	42420440 	.word	0x42420440

080049bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80049bc:	b590      	push	{r4, r7, lr}
 80049be:	b08d      	sub	sp, #52	; 0x34
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80049c4:	4b55      	ldr	r3, [pc, #340]	; (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80049c6:	f107 040c 	add.w	r4, r7, #12
 80049ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80049cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80049d0:	4b53      	ldr	r3, [pc, #332]	; (8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80049d2:	881b      	ldrh	r3, [r3, #0]
 80049d4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80049d6:	2300      	movs	r3, #0
 80049d8:	627b      	str	r3, [r7, #36]	; 0x24
 80049da:	2300      	movs	r3, #0
 80049dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049de:	2300      	movs	r3, #0
 80049e0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80049e2:	2300      	movs	r3, #0
 80049e4:	61fb      	str	r3, [r7, #28]
 80049e6:	2300      	movs	r3, #0
 80049e8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d07f      	beq.n	8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80049f0:	2b10      	cmp	r3, #16
 80049f2:	d002      	beq.n	80049fa <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d048      	beq.n	8004a8a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80049f8:	e08b      	b.n	8004b12 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80049fa:	4b4a      	ldr	r3, [pc, #296]	; (8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004a00:	4b48      	ldr	r3, [pc, #288]	; (8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d07f      	beq.n	8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	0c9b      	lsrs	r3, r3, #18
 8004a10:	f003 030f 	and.w	r3, r3, #15
 8004a14:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004a18:	4413      	add	r3, r2
 8004a1a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004a1e:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d018      	beq.n	8004a5c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004a2a:	4b3e      	ldr	r3, [pc, #248]	; (8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	0c5b      	lsrs	r3, r3, #17
 8004a30:	f003 0301 	and.w	r3, r3, #1
 8004a34:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004a38:	4413      	add	r3, r2
 8004a3a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004a3e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00d      	beq.n	8004a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004a4a:	4a37      	ldr	r2, [pc, #220]	; (8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a52:	6a3b      	ldr	r3, [r7, #32]
 8004a54:	fb02 f303 	mul.w	r3, r2, r3
 8004a58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a5a:	e004      	b.n	8004a66 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
 8004a5e:	4a33      	ldr	r2, [pc, #204]	; (8004b2c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004a60:	fb02 f303 	mul.w	r3, r2, r3
 8004a64:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004a66:	4b2f      	ldr	r3, [pc, #188]	; (8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a72:	d102      	bne.n	8004a7a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8004a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a76:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004a78:	e048      	b.n	8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8004a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a7c:	005b      	lsls	r3, r3, #1
 8004a7e:	4a2c      	ldr	r2, [pc, #176]	; (8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004a80:	fba2 2303 	umull	r2, r3, r2, r3
 8004a84:	085b      	lsrs	r3, r3, #1
 8004a86:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004a88:	e040      	b.n	8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8004a8a:	4b26      	ldr	r3, [pc, #152]	; (8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a9a:	d108      	bne.n	8004aae <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8004aa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aaa:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aac:	e01f      	b.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ab4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ab8:	d109      	bne.n	8004ace <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8004aba:	4b1a      	ldr	r3, [pc, #104]	; (8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d003      	beq.n	8004ace <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8004ac6:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004aca:	62bb      	str	r3, [r7, #40]	; 0x28
 8004acc:	e00f      	b.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ad4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ad8:	d11a      	bne.n	8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8004ada:	4b12      	ldr	r3, [pc, #72]	; (8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d014      	beq.n	8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8004ae6:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004aea:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004aec:	e010      	b.n	8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8004aee:	e00f      	b.n	8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004af0:	f7ff fe7c 	bl	80047ec <HAL_RCC_GetPCLK2Freq>
 8004af4:	4602      	mov	r2, r0
 8004af6:	4b0b      	ldr	r3, [pc, #44]	; (8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	0b9b      	lsrs	r3, r3, #14
 8004afc:	f003 0303 	and.w	r3, r3, #3
 8004b00:	3301      	adds	r3, #1
 8004b02:	005b      	lsls	r3, r3, #1
 8004b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b08:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004b0a:	e002      	b.n	8004b12 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8004b0c:	bf00      	nop
 8004b0e:	e000      	b.n	8004b12 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8004b10:	bf00      	nop
    }
  }
  return (frequency);
 8004b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3734      	adds	r7, #52	; 0x34
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd90      	pop	{r4, r7, pc}
 8004b1c:	0800769c 	.word	0x0800769c
 8004b20:	080076ac 	.word	0x080076ac
 8004b24:	40021000 	.word	0x40021000
 8004b28:	007a1200 	.word	0x007a1200
 8004b2c:	003d0900 	.word	0x003d0900
 8004b30:	aaaaaaab 	.word	0xaaaaaaab

08004b34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e041      	b.n	8004bca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d106      	bne.n	8004b60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f7fd ffd2 	bl	8002b04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2202      	movs	r2, #2
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	3304      	adds	r3, #4
 8004b70:	4619      	mov	r1, r3
 8004b72:	4610      	mov	r0, r2
 8004b74:	f000 fc1c 	bl	80053b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
	...

08004bd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d001      	beq.n	8004bec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e03a      	b.n	8004c62 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2202      	movs	r2, #2
 8004bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68da      	ldr	r2, [r3, #12]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f042 0201 	orr.w	r2, r2, #1
 8004c02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a18      	ldr	r2, [pc, #96]	; (8004c6c <HAL_TIM_Base_Start_IT+0x98>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d00e      	beq.n	8004c2c <HAL_TIM_Base_Start_IT+0x58>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c16:	d009      	beq.n	8004c2c <HAL_TIM_Base_Start_IT+0x58>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a14      	ldr	r2, [pc, #80]	; (8004c70 <HAL_TIM_Base_Start_IT+0x9c>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d004      	beq.n	8004c2c <HAL_TIM_Base_Start_IT+0x58>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a13      	ldr	r2, [pc, #76]	; (8004c74 <HAL_TIM_Base_Start_IT+0xa0>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d111      	bne.n	8004c50 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 0307 	and.w	r3, r3, #7
 8004c36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2b06      	cmp	r3, #6
 8004c3c:	d010      	beq.n	8004c60 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f042 0201 	orr.w	r2, r2, #1
 8004c4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c4e:	e007      	b.n	8004c60 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f042 0201 	orr.w	r2, r2, #1
 8004c5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3714      	adds	r7, #20
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bc80      	pop	{r7}
 8004c6a:	4770      	bx	lr
 8004c6c:	40012c00 	.word	0x40012c00
 8004c70:	40000400 	.word	0x40000400
 8004c74:	40000800 	.word	0x40000800

08004c78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e041      	b.n	8004d0e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d106      	bne.n	8004ca4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f839 	bl	8004d16 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	4610      	mov	r0, r2
 8004cb8:	f000 fb7a 	bl	80053b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d16:	b480      	push	{r7}
 8004d18:	b083      	sub	sp, #12
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d1e:	bf00      	nop
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bc80      	pop	{r7}
 8004d26:	4770      	bx	lr

08004d28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d109      	bne.n	8004d4c <HAL_TIM_PWM_Start+0x24>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	bf14      	ite	ne
 8004d44:	2301      	movne	r3, #1
 8004d46:	2300      	moveq	r3, #0
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	e022      	b.n	8004d92 <HAL_TIM_PWM_Start+0x6a>
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	2b04      	cmp	r3, #4
 8004d50:	d109      	bne.n	8004d66 <HAL_TIM_PWM_Start+0x3e>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	bf14      	ite	ne
 8004d5e:	2301      	movne	r3, #1
 8004d60:	2300      	moveq	r3, #0
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	e015      	b.n	8004d92 <HAL_TIM_PWM_Start+0x6a>
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	2b08      	cmp	r3, #8
 8004d6a:	d109      	bne.n	8004d80 <HAL_TIM_PWM_Start+0x58>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	bf14      	ite	ne
 8004d78:	2301      	movne	r3, #1
 8004d7a:	2300      	moveq	r3, #0
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	e008      	b.n	8004d92 <HAL_TIM_PWM_Start+0x6a>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	bf14      	ite	ne
 8004d8c:	2301      	movne	r3, #1
 8004d8e:	2300      	moveq	r3, #0
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e05e      	b.n	8004e58 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d104      	bne.n	8004daa <HAL_TIM_PWM_Start+0x82>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2202      	movs	r2, #2
 8004da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004da8:	e013      	b.n	8004dd2 <HAL_TIM_PWM_Start+0xaa>
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2b04      	cmp	r3, #4
 8004dae:	d104      	bne.n	8004dba <HAL_TIM_PWM_Start+0x92>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2202      	movs	r2, #2
 8004db4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004db8:	e00b      	b.n	8004dd2 <HAL_TIM_PWM_Start+0xaa>
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	2b08      	cmp	r3, #8
 8004dbe:	d104      	bne.n	8004dca <HAL_TIM_PWM_Start+0xa2>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dc8:	e003      	b.n	8004dd2 <HAL_TIM_PWM_Start+0xaa>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2202      	movs	r2, #2
 8004dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	6839      	ldr	r1, [r7, #0]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 fd68 	bl	80058b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a1e      	ldr	r2, [pc, #120]	; (8004e60 <HAL_TIM_PWM_Start+0x138>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d107      	bne.n	8004dfa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004df8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a18      	ldr	r2, [pc, #96]	; (8004e60 <HAL_TIM_PWM_Start+0x138>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d00e      	beq.n	8004e22 <HAL_TIM_PWM_Start+0xfa>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e0c:	d009      	beq.n	8004e22 <HAL_TIM_PWM_Start+0xfa>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a14      	ldr	r2, [pc, #80]	; (8004e64 <HAL_TIM_PWM_Start+0x13c>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d004      	beq.n	8004e22 <HAL_TIM_PWM_Start+0xfa>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a12      	ldr	r2, [pc, #72]	; (8004e68 <HAL_TIM_PWM_Start+0x140>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d111      	bne.n	8004e46 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f003 0307 	and.w	r3, r3, #7
 8004e2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2b06      	cmp	r3, #6
 8004e32:	d010      	beq.n	8004e56 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f042 0201 	orr.w	r2, r2, #1
 8004e42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e44:	e007      	b.n	8004e56 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f042 0201 	orr.w	r2, r2, #1
 8004e54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	40012c00 	.word	0x40012c00
 8004e64:	40000400 	.word	0x40000400
 8004e68:	40000800 	.word	0x40000800

08004e6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d122      	bne.n	8004ec8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	f003 0302 	and.w	r3, r3, #2
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d11b      	bne.n	8004ec8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f06f 0202 	mvn.w	r2, #2
 8004e98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	f003 0303 	and.w	r3, r3, #3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d003      	beq.n	8004eb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 fa62 	bl	8005378 <HAL_TIM_IC_CaptureCallback>
 8004eb4:	e005      	b.n	8004ec2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 fa55 	bl	8005366 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 fa64 	bl	800538a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	f003 0304 	and.w	r3, r3, #4
 8004ed2:	2b04      	cmp	r3, #4
 8004ed4:	d122      	bne.n	8004f1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	f003 0304 	and.w	r3, r3, #4
 8004ee0:	2b04      	cmp	r3, #4
 8004ee2:	d11b      	bne.n	8004f1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f06f 0204 	mvn.w	r2, #4
 8004eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2202      	movs	r2, #2
 8004ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d003      	beq.n	8004f0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 fa38 	bl	8005378 <HAL_TIM_IC_CaptureCallback>
 8004f08:	e005      	b.n	8004f16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 fa2b 	bl	8005366 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 fa3a 	bl	800538a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	f003 0308 	and.w	r3, r3, #8
 8004f26:	2b08      	cmp	r3, #8
 8004f28:	d122      	bne.n	8004f70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	f003 0308 	and.w	r3, r3, #8
 8004f34:	2b08      	cmp	r3, #8
 8004f36:	d11b      	bne.n	8004f70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f06f 0208 	mvn.w	r2, #8
 8004f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2204      	movs	r2, #4
 8004f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	69db      	ldr	r3, [r3, #28]
 8004f4e:	f003 0303 	and.w	r3, r3, #3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d003      	beq.n	8004f5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 fa0e 	bl	8005378 <HAL_TIM_IC_CaptureCallback>
 8004f5c:	e005      	b.n	8004f6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 fa01 	bl	8005366 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 fa10 	bl	800538a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	f003 0310 	and.w	r3, r3, #16
 8004f7a:	2b10      	cmp	r3, #16
 8004f7c:	d122      	bne.n	8004fc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	f003 0310 	and.w	r3, r3, #16
 8004f88:	2b10      	cmp	r3, #16
 8004f8a:	d11b      	bne.n	8004fc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f06f 0210 	mvn.w	r2, #16
 8004f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2208      	movs	r2, #8
 8004f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f9e4 	bl	8005378 <HAL_TIM_IC_CaptureCallback>
 8004fb0:	e005      	b.n	8004fbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f9d7 	bl	8005366 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 f9e6 	bl	800538a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d10e      	bne.n	8004ff0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d107      	bne.n	8004ff0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f06f 0201 	mvn.w	r2, #1
 8004fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7fd f9e2 	bl	80023b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ffa:	2b80      	cmp	r3, #128	; 0x80
 8004ffc:	d10e      	bne.n	800501c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005008:	2b80      	cmp	r3, #128	; 0x80
 800500a:	d107      	bne.n	800501c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 fcd5 	bl	80059c6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005026:	2b40      	cmp	r3, #64	; 0x40
 8005028:	d10e      	bne.n	8005048 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005034:	2b40      	cmp	r3, #64	; 0x40
 8005036:	d107      	bne.n	8005048 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f9aa 	bl	800539c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	f003 0320 	and.w	r3, r3, #32
 8005052:	2b20      	cmp	r3, #32
 8005054:	d10e      	bne.n	8005074 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	f003 0320 	and.w	r3, r3, #32
 8005060:	2b20      	cmp	r3, #32
 8005062:	d107      	bne.n	8005074 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f06f 0220 	mvn.w	r2, #32
 800506c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 fca0 	bl	80059b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005074:	bf00      	nop
 8005076:	3708      	adds	r7, #8
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800508e:	2b01      	cmp	r3, #1
 8005090:	d101      	bne.n	8005096 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005092:	2302      	movs	r3, #2
 8005094:	e0ac      	b.n	80051f0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2b0c      	cmp	r3, #12
 80050a2:	f200 809f 	bhi.w	80051e4 <HAL_TIM_PWM_ConfigChannel+0x168>
 80050a6:	a201      	add	r2, pc, #4	; (adr r2, 80050ac <HAL_TIM_PWM_ConfigChannel+0x30>)
 80050a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ac:	080050e1 	.word	0x080050e1
 80050b0:	080051e5 	.word	0x080051e5
 80050b4:	080051e5 	.word	0x080051e5
 80050b8:	080051e5 	.word	0x080051e5
 80050bc:	08005121 	.word	0x08005121
 80050c0:	080051e5 	.word	0x080051e5
 80050c4:	080051e5 	.word	0x080051e5
 80050c8:	080051e5 	.word	0x080051e5
 80050cc:	08005163 	.word	0x08005163
 80050d0:	080051e5 	.word	0x080051e5
 80050d4:	080051e5 	.word	0x080051e5
 80050d8:	080051e5 	.word	0x080051e5
 80050dc:	080051a3 	.word	0x080051a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68b9      	ldr	r1, [r7, #8]
 80050e6:	4618      	mov	r0, r3
 80050e8:	f000 f9c4 	bl	8005474 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	699a      	ldr	r2, [r3, #24]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f042 0208 	orr.w	r2, r2, #8
 80050fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	699a      	ldr	r2, [r3, #24]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f022 0204 	bic.w	r2, r2, #4
 800510a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6999      	ldr	r1, [r3, #24]
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	691a      	ldr	r2, [r3, #16]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	430a      	orrs	r2, r1
 800511c:	619a      	str	r2, [r3, #24]
      break;
 800511e:	e062      	b.n	80051e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68b9      	ldr	r1, [r7, #8]
 8005126:	4618      	mov	r0, r3
 8005128:	f000 fa0a 	bl	8005540 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	699a      	ldr	r2, [r3, #24]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800513a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	699a      	ldr	r2, [r3, #24]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800514a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6999      	ldr	r1, [r3, #24]
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	021a      	lsls	r2, r3, #8
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	430a      	orrs	r2, r1
 800515e:	619a      	str	r2, [r3, #24]
      break;
 8005160:	e041      	b.n	80051e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68b9      	ldr	r1, [r7, #8]
 8005168:	4618      	mov	r0, r3
 800516a:	f000 fa53 	bl	8005614 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	69da      	ldr	r2, [r3, #28]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f042 0208 	orr.w	r2, r2, #8
 800517c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	69da      	ldr	r2, [r3, #28]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f022 0204 	bic.w	r2, r2, #4
 800518c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	69d9      	ldr	r1, [r3, #28]
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	691a      	ldr	r2, [r3, #16]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	430a      	orrs	r2, r1
 800519e:	61da      	str	r2, [r3, #28]
      break;
 80051a0:	e021      	b.n	80051e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68b9      	ldr	r1, [r7, #8]
 80051a8:	4618      	mov	r0, r3
 80051aa:	f000 fa9d 	bl	80056e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	69da      	ldr	r2, [r3, #28]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	69da      	ldr	r2, [r3, #28]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	69d9      	ldr	r1, [r3, #28]
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	021a      	lsls	r2, r3, #8
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	430a      	orrs	r2, r1
 80051e0:	61da      	str	r2, [r3, #28]
      break;
 80051e2:	e000      	b.n	80051e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80051e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005208:	2b01      	cmp	r3, #1
 800520a:	d101      	bne.n	8005210 <HAL_TIM_ConfigClockSource+0x18>
 800520c:	2302      	movs	r3, #2
 800520e:	e0a6      	b.n	800535e <HAL_TIM_ConfigClockSource+0x166>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2202      	movs	r2, #2
 800521c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800522e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005236:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2b40      	cmp	r3, #64	; 0x40
 8005246:	d067      	beq.n	8005318 <HAL_TIM_ConfigClockSource+0x120>
 8005248:	2b40      	cmp	r3, #64	; 0x40
 800524a:	d80b      	bhi.n	8005264 <HAL_TIM_ConfigClockSource+0x6c>
 800524c:	2b10      	cmp	r3, #16
 800524e:	d073      	beq.n	8005338 <HAL_TIM_ConfigClockSource+0x140>
 8005250:	2b10      	cmp	r3, #16
 8005252:	d802      	bhi.n	800525a <HAL_TIM_ConfigClockSource+0x62>
 8005254:	2b00      	cmp	r3, #0
 8005256:	d06f      	beq.n	8005338 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005258:	e078      	b.n	800534c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800525a:	2b20      	cmp	r3, #32
 800525c:	d06c      	beq.n	8005338 <HAL_TIM_ConfigClockSource+0x140>
 800525e:	2b30      	cmp	r3, #48	; 0x30
 8005260:	d06a      	beq.n	8005338 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005262:	e073      	b.n	800534c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005264:	2b70      	cmp	r3, #112	; 0x70
 8005266:	d00d      	beq.n	8005284 <HAL_TIM_ConfigClockSource+0x8c>
 8005268:	2b70      	cmp	r3, #112	; 0x70
 800526a:	d804      	bhi.n	8005276 <HAL_TIM_ConfigClockSource+0x7e>
 800526c:	2b50      	cmp	r3, #80	; 0x50
 800526e:	d033      	beq.n	80052d8 <HAL_TIM_ConfigClockSource+0xe0>
 8005270:	2b60      	cmp	r3, #96	; 0x60
 8005272:	d041      	beq.n	80052f8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005274:	e06a      	b.n	800534c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800527a:	d066      	beq.n	800534a <HAL_TIM_ConfigClockSource+0x152>
 800527c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005280:	d017      	beq.n	80052b2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005282:	e063      	b.n	800534c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6818      	ldr	r0, [r3, #0]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	6899      	ldr	r1, [r3, #8]
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	685a      	ldr	r2, [r3, #4]
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f000 faed 	bl	8005872 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052a6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	609a      	str	r2, [r3, #8]
      break;
 80052b0:	e04c      	b.n	800534c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6818      	ldr	r0, [r3, #0]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	6899      	ldr	r1, [r3, #8]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	685a      	ldr	r2, [r3, #4]
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	f000 fad6 	bl	8005872 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	689a      	ldr	r2, [r3, #8]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052d4:	609a      	str	r2, [r3, #8]
      break;
 80052d6:	e039      	b.n	800534c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6818      	ldr	r0, [r3, #0]
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	6859      	ldr	r1, [r3, #4]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	461a      	mov	r2, r3
 80052e6:	f000 fa4d 	bl	8005784 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2150      	movs	r1, #80	; 0x50
 80052f0:	4618      	mov	r0, r3
 80052f2:	f000 faa4 	bl	800583e <TIM_ITRx_SetConfig>
      break;
 80052f6:	e029      	b.n	800534c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6818      	ldr	r0, [r3, #0]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	6859      	ldr	r1, [r3, #4]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	461a      	mov	r2, r3
 8005306:	f000 fa6b 	bl	80057e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2160      	movs	r1, #96	; 0x60
 8005310:	4618      	mov	r0, r3
 8005312:	f000 fa94 	bl	800583e <TIM_ITRx_SetConfig>
      break;
 8005316:	e019      	b.n	800534c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6818      	ldr	r0, [r3, #0]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	6859      	ldr	r1, [r3, #4]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	461a      	mov	r2, r3
 8005326:	f000 fa2d 	bl	8005784 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2140      	movs	r1, #64	; 0x40
 8005330:	4618      	mov	r0, r3
 8005332:	f000 fa84 	bl	800583e <TIM_ITRx_SetConfig>
      break;
 8005336:	e009      	b.n	800534c <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4619      	mov	r1, r3
 8005342:	4610      	mov	r0, r2
 8005344:	f000 fa7b 	bl	800583e <TIM_ITRx_SetConfig>
        break;
 8005348:	e000      	b.n	800534c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800534a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3710      	adds	r7, #16
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}

08005366 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005366:	b480      	push	{r7}
 8005368:	b083      	sub	sp, #12
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800536e:	bf00      	nop
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	bc80      	pop	{r7}
 8005376:	4770      	bx	lr

08005378 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005380:	bf00      	nop
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	bc80      	pop	{r7}
 8005388:	4770      	bx	lr

0800538a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800538a:	b480      	push	{r7}
 800538c:	b083      	sub	sp, #12
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005392:	bf00      	nop
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	bc80      	pop	{r7}
 800539a:	4770      	bx	lr

0800539c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bc80      	pop	{r7}
 80053ac:	4770      	bx	lr
	...

080053b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a29      	ldr	r2, [pc, #164]	; (8005468 <TIM_Base_SetConfig+0xb8>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d00b      	beq.n	80053e0 <TIM_Base_SetConfig+0x30>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ce:	d007      	beq.n	80053e0 <TIM_Base_SetConfig+0x30>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a26      	ldr	r2, [pc, #152]	; (800546c <TIM_Base_SetConfig+0xbc>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d003      	beq.n	80053e0 <TIM_Base_SetConfig+0x30>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a25      	ldr	r2, [pc, #148]	; (8005470 <TIM_Base_SetConfig+0xc0>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d108      	bne.n	80053f2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a1c      	ldr	r2, [pc, #112]	; (8005468 <TIM_Base_SetConfig+0xb8>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d00b      	beq.n	8005412 <TIM_Base_SetConfig+0x62>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005400:	d007      	beq.n	8005412 <TIM_Base_SetConfig+0x62>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a19      	ldr	r2, [pc, #100]	; (800546c <TIM_Base_SetConfig+0xbc>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d003      	beq.n	8005412 <TIM_Base_SetConfig+0x62>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a18      	ldr	r2, [pc, #96]	; (8005470 <TIM_Base_SetConfig+0xc0>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d108      	bne.n	8005424 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005418:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	4313      	orrs	r3, r2
 8005422:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	4313      	orrs	r3, r2
 8005430:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	689a      	ldr	r2, [r3, #8]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a07      	ldr	r2, [pc, #28]	; (8005468 <TIM_Base_SetConfig+0xb8>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d103      	bne.n	8005458 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	691a      	ldr	r2, [r3, #16]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	615a      	str	r2, [r3, #20]
}
 800545e:	bf00      	nop
 8005460:	3714      	adds	r7, #20
 8005462:	46bd      	mov	sp, r7
 8005464:	bc80      	pop	{r7}
 8005466:	4770      	bx	lr
 8005468:	40012c00 	.word	0x40012c00
 800546c:	40000400 	.word	0x40000400
 8005470:	40000800 	.word	0x40000800

08005474 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005474:	b480      	push	{r7}
 8005476:	b087      	sub	sp, #28
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	f023 0201 	bic.w	r2, r3, #1
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f023 0303 	bic.w	r3, r3, #3
 80054aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	f023 0302 	bic.w	r3, r3, #2
 80054bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a1c      	ldr	r2, [pc, #112]	; (800553c <TIM_OC1_SetConfig+0xc8>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d10c      	bne.n	80054ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	f023 0308 	bic.w	r3, r3, #8
 80054d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	697a      	ldr	r2, [r7, #20]
 80054de:	4313      	orrs	r3, r2
 80054e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	f023 0304 	bic.w	r3, r3, #4
 80054e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a13      	ldr	r2, [pc, #76]	; (800553c <TIM_OC1_SetConfig+0xc8>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d111      	bne.n	8005516 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005500:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	4313      	orrs	r3, r2
 800550a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	4313      	orrs	r3, r2
 8005514:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	697a      	ldr	r2, [r7, #20]
 800552e:	621a      	str	r2, [r3, #32]
}
 8005530:	bf00      	nop
 8005532:	371c      	adds	r7, #28
 8005534:	46bd      	mov	sp, r7
 8005536:	bc80      	pop	{r7}
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	40012c00 	.word	0x40012c00

08005540 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005540:	b480      	push	{r7}
 8005542:	b087      	sub	sp, #28
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	f023 0210 	bic.w	r2, r3, #16
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800556e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005576:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	021b      	lsls	r3, r3, #8
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	4313      	orrs	r3, r2
 8005582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	f023 0320 	bic.w	r3, r3, #32
 800558a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	011b      	lsls	r3, r3, #4
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	4313      	orrs	r3, r2
 8005596:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a1d      	ldr	r2, [pc, #116]	; (8005610 <TIM_OC2_SetConfig+0xd0>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d10d      	bne.n	80055bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	011b      	lsls	r3, r3, #4
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a14      	ldr	r2, [pc, #80]	; (8005610 <TIM_OC2_SetConfig+0xd0>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d113      	bne.n	80055ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	695b      	ldr	r3, [r3, #20]
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	4313      	orrs	r3, r2
 80055de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	621a      	str	r2, [r3, #32]
}
 8005606:	bf00      	nop
 8005608:	371c      	adds	r7, #28
 800560a:	46bd      	mov	sp, r7
 800560c:	bc80      	pop	{r7}
 800560e:	4770      	bx	lr
 8005610:	40012c00 	.word	0x40012c00

08005614 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005614:	b480      	push	{r7}
 8005616:	b087      	sub	sp, #28
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	69db      	ldr	r3, [r3, #28]
 800563a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f023 0303 	bic.w	r3, r3, #3
 800564a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	4313      	orrs	r3, r2
 8005654:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800565c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	021b      	lsls	r3, r3, #8
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	4313      	orrs	r3, r2
 8005668:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a1d      	ldr	r2, [pc, #116]	; (80056e4 <TIM_OC3_SetConfig+0xd0>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d10d      	bne.n	800568e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005678:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	021b      	lsls	r3, r3, #8
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	4313      	orrs	r3, r2
 8005684:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800568c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a14      	ldr	r2, [pc, #80]	; (80056e4 <TIM_OC3_SetConfig+0xd0>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d113      	bne.n	80056be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800569c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	011b      	lsls	r3, r3, #4
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	011b      	lsls	r3, r3, #4
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	685a      	ldr	r2, [r3, #4]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	621a      	str	r2, [r3, #32]
}
 80056d8:	bf00      	nop
 80056da:	371c      	adds	r7, #28
 80056dc:	46bd      	mov	sp, r7
 80056de:	bc80      	pop	{r7}
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	40012c00 	.word	0x40012c00

080056e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b087      	sub	sp, #28
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800571e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	021b      	lsls	r3, r3, #8
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	4313      	orrs	r3, r2
 800572a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005732:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	031b      	lsls	r3, r3, #12
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	4313      	orrs	r3, r2
 800573e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a0f      	ldr	r2, [pc, #60]	; (8005780 <TIM_OC4_SetConfig+0x98>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d109      	bne.n	800575c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800574e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	019b      	lsls	r3, r3, #6
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	4313      	orrs	r3, r2
 800575a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	685a      	ldr	r2, [r3, #4]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	621a      	str	r2, [r3, #32]
}
 8005776:	bf00      	nop
 8005778:	371c      	adds	r7, #28
 800577a:	46bd      	mov	sp, r7
 800577c:	bc80      	pop	{r7}
 800577e:	4770      	bx	lr
 8005780:	40012c00 	.word	0x40012c00

08005784 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005784:	b480      	push	{r7}
 8005786:	b087      	sub	sp, #28
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6a1b      	ldr	r3, [r3, #32]
 8005794:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6a1b      	ldr	r3, [r3, #32]
 800579a:	f023 0201 	bic.w	r2, r3, #1
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	011b      	lsls	r3, r3, #4
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f023 030a 	bic.w	r3, r3, #10
 80057c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	621a      	str	r2, [r3, #32]
}
 80057d6:	bf00      	nop
 80057d8:	371c      	adds	r7, #28
 80057da:	46bd      	mov	sp, r7
 80057dc:	bc80      	pop	{r7}
 80057de:	4770      	bx	lr

080057e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b087      	sub	sp, #28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6a1b      	ldr	r3, [r3, #32]
 80057f0:	f023 0210 	bic.w	r2, r3, #16
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800580a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	031b      	lsls	r3, r3, #12
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	4313      	orrs	r3, r2
 8005814:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800581c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	011b      	lsls	r3, r3, #4
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	4313      	orrs	r3, r2
 8005826:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	621a      	str	r2, [r3, #32]
}
 8005834:	bf00      	nop
 8005836:	371c      	adds	r7, #28
 8005838:	46bd      	mov	sp, r7
 800583a:	bc80      	pop	{r7}
 800583c:	4770      	bx	lr

0800583e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800583e:	b480      	push	{r7}
 8005840:	b085      	sub	sp, #20
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
 8005846:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005854:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005856:	683a      	ldr	r2, [r7, #0]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	4313      	orrs	r3, r2
 800585c:	f043 0307 	orr.w	r3, r3, #7
 8005860:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	609a      	str	r2, [r3, #8]
}
 8005868:	bf00      	nop
 800586a:	3714      	adds	r7, #20
 800586c:	46bd      	mov	sp, r7
 800586e:	bc80      	pop	{r7}
 8005870:	4770      	bx	lr

08005872 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005872:	b480      	push	{r7}
 8005874:	b087      	sub	sp, #28
 8005876:	af00      	add	r7, sp, #0
 8005878:	60f8      	str	r0, [r7, #12]
 800587a:	60b9      	str	r1, [r7, #8]
 800587c:	607a      	str	r2, [r7, #4]
 800587e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800588c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	021a      	lsls	r2, r3, #8
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	431a      	orrs	r2, r3
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	4313      	orrs	r3, r2
 800589a:	697a      	ldr	r2, [r7, #20]
 800589c:	4313      	orrs	r3, r2
 800589e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	609a      	str	r2, [r3, #8]
}
 80058a6:	bf00      	nop
 80058a8:	371c      	adds	r7, #28
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bc80      	pop	{r7}
 80058ae:	4770      	bx	lr

080058b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b087      	sub	sp, #28
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	f003 031f 	and.w	r3, r3, #31
 80058c2:	2201      	movs	r2, #1
 80058c4:	fa02 f303 	lsl.w	r3, r2, r3
 80058c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6a1a      	ldr	r2, [r3, #32]
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	43db      	mvns	r3, r3
 80058d2:	401a      	ands	r2, r3
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6a1a      	ldr	r2, [r3, #32]
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	f003 031f 	and.w	r3, r3, #31
 80058e2:	6879      	ldr	r1, [r7, #4]
 80058e4:	fa01 f303 	lsl.w	r3, r1, r3
 80058e8:	431a      	orrs	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	621a      	str	r2, [r3, #32]
}
 80058ee:	bf00      	nop
 80058f0:	371c      	adds	r7, #28
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bc80      	pop	{r7}
 80058f6:	4770      	bx	lr

080058f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005908:	2b01      	cmp	r3, #1
 800590a:	d101      	bne.n	8005910 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800590c:	2302      	movs	r3, #2
 800590e:	e046      	b.n	800599e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2202      	movs	r2, #2
 800591c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005936:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	4313      	orrs	r3, r2
 8005940:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a16      	ldr	r2, [pc, #88]	; (80059a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d00e      	beq.n	8005972 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800595c:	d009      	beq.n	8005972 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a12      	ldr	r2, [pc, #72]	; (80059ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d004      	beq.n	8005972 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a10      	ldr	r2, [pc, #64]	; (80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d10c      	bne.n	800598c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005978:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	4313      	orrs	r3, r2
 8005982:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68ba      	ldr	r2, [r7, #8]
 800598a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3714      	adds	r7, #20
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bc80      	pop	{r7}
 80059a6:	4770      	bx	lr
 80059a8:	40012c00 	.word	0x40012c00
 80059ac:	40000400 	.word	0x40000400
 80059b0:	40000800 	.word	0x40000800

080059b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bc80      	pop	{r7}
 80059c4:	4770      	bx	lr

080059c6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059c6:	b480      	push	{r7}
 80059c8:	b083      	sub	sp, #12
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059ce:	bf00      	nop
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bc80      	pop	{r7}
 80059d6:	4770      	bx	lr

080059d8 <__errno>:
 80059d8:	4b01      	ldr	r3, [pc, #4]	; (80059e0 <__errno+0x8>)
 80059da:	6818      	ldr	r0, [r3, #0]
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	20000064 	.word	0x20000064

080059e4 <__libc_init_array>:
 80059e4:	b570      	push	{r4, r5, r6, lr}
 80059e6:	2500      	movs	r5, #0
 80059e8:	4e0c      	ldr	r6, [pc, #48]	; (8005a1c <__libc_init_array+0x38>)
 80059ea:	4c0d      	ldr	r4, [pc, #52]	; (8005a20 <__libc_init_array+0x3c>)
 80059ec:	1ba4      	subs	r4, r4, r6
 80059ee:	10a4      	asrs	r4, r4, #2
 80059f0:	42a5      	cmp	r5, r4
 80059f2:	d109      	bne.n	8005a08 <__libc_init_array+0x24>
 80059f4:	f001 fdaa 	bl	800754c <_init>
 80059f8:	2500      	movs	r5, #0
 80059fa:	4e0a      	ldr	r6, [pc, #40]	; (8005a24 <__libc_init_array+0x40>)
 80059fc:	4c0a      	ldr	r4, [pc, #40]	; (8005a28 <__libc_init_array+0x44>)
 80059fe:	1ba4      	subs	r4, r4, r6
 8005a00:	10a4      	asrs	r4, r4, #2
 8005a02:	42a5      	cmp	r5, r4
 8005a04:	d105      	bne.n	8005a12 <__libc_init_array+0x2e>
 8005a06:	bd70      	pop	{r4, r5, r6, pc}
 8005a08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005a0c:	4798      	blx	r3
 8005a0e:	3501      	adds	r5, #1
 8005a10:	e7ee      	b.n	80059f0 <__libc_init_array+0xc>
 8005a12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005a16:	4798      	blx	r3
 8005a18:	3501      	adds	r5, #1
 8005a1a:	e7f2      	b.n	8005a02 <__libc_init_array+0x1e>
 8005a1c:	08007934 	.word	0x08007934
 8005a20:	08007934 	.word	0x08007934
 8005a24:	08007934 	.word	0x08007934
 8005a28:	08007938 	.word	0x08007938

08005a2c <localtime>:
 8005a2c:	b538      	push	{r3, r4, r5, lr}
 8005a2e:	4b07      	ldr	r3, [pc, #28]	; (8005a4c <localtime+0x20>)
 8005a30:	4605      	mov	r5, r0
 8005a32:	681c      	ldr	r4, [r3, #0]
 8005a34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005a36:	b91b      	cbnz	r3, 8005a40 <localtime+0x14>
 8005a38:	2024      	movs	r0, #36	; 0x24
 8005a3a:	f000 f8f3 	bl	8005c24 <malloc>
 8005a3e:	63e0      	str	r0, [r4, #60]	; 0x3c
 8005a40:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005a42:	4628      	mov	r0, r5
 8005a44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a48:	f000 b802 	b.w	8005a50 <localtime_r>
 8005a4c:	20000064 	.word	0x20000064

08005a50 <localtime_r>:
 8005a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a54:	460c      	mov	r4, r1
 8005a56:	4680      	mov	r8, r0
 8005a58:	f000 fc70 	bl	800633c <__gettzinfo>
 8005a5c:	4621      	mov	r1, r4
 8005a5e:	4607      	mov	r7, r0
 8005a60:	4640      	mov	r0, r8
 8005a62:	f000 fc6f 	bl	8006344 <gmtime_r>
 8005a66:	6946      	ldr	r6, [r0, #20]
 8005a68:	4604      	mov	r4, r0
 8005a6a:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8005a6e:	07b2      	lsls	r2, r6, #30
 8005a70:	d105      	bne.n	8005a7e <localtime_r+0x2e>
 8005a72:	2264      	movs	r2, #100	; 0x64
 8005a74:	fb96 f3f2 	sdiv	r3, r6, r2
 8005a78:	fb02 6313 	mls	r3, r2, r3, r6
 8005a7c:	bb13      	cbnz	r3, 8005ac4 <localtime_r+0x74>
 8005a7e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8005a82:	fb96 f5f3 	sdiv	r5, r6, r3
 8005a86:	fb03 6515 	mls	r5, r3, r5, r6
 8005a8a:	fab5 f585 	clz	r5, r5
 8005a8e:	096d      	lsrs	r5, r5, #5
 8005a90:	2230      	movs	r2, #48	; 0x30
 8005a92:	4b62      	ldr	r3, [pc, #392]	; (8005c1c <localtime_r+0x1cc>)
 8005a94:	fb02 3505 	mla	r5, r2, r5, r3
 8005a98:	f000 fa74 	bl	8005f84 <__tz_lock>
 8005a9c:	f000 fa74 	bl	8005f88 <_tzset_unlocked>
 8005aa0:	4b5f      	ldr	r3, [pc, #380]	; (8005c20 <localtime_r+0x1d0>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	b323      	cbz	r3, 8005af0 <localtime_r+0xa0>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	42b3      	cmp	r3, r6
 8005aaa:	d10d      	bne.n	8005ac8 <localtime_r+0x78>
 8005aac:	e9d8 0100 	ldrd	r0, r1, [r8]
 8005ab0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ab4:	683e      	ldr	r6, [r7, #0]
 8005ab6:	b97e      	cbnz	r6, 8005ad8 <localtime_r+0x88>
 8005ab8:	4290      	cmp	r0, r2
 8005aba:	eb71 0303 	sbcs.w	r3, r1, r3
 8005abe:	db0f      	blt.n	8005ae0 <localtime_r+0x90>
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e015      	b.n	8005af0 <localtime_r+0xa0>
 8005ac4:	2501      	movs	r5, #1
 8005ac6:	e7e3      	b.n	8005a90 <localtime_r+0x40>
 8005ac8:	4630      	mov	r0, r6
 8005aca:	f000 f9b3 	bl	8005e34 <__tzcalc_limits>
 8005ace:	2800      	cmp	r0, #0
 8005ad0:	d1ec      	bne.n	8005aac <localtime_r+0x5c>
 8005ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ad6:	e00b      	b.n	8005af0 <localtime_r+0xa0>
 8005ad8:	4290      	cmp	r0, r2
 8005ada:	eb71 0303 	sbcs.w	r3, r1, r3
 8005ade:	db57      	blt.n	8005b90 <localtime_r+0x140>
 8005ae0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005ae4:	4290      	cmp	r0, r2
 8005ae6:	eb71 0303 	sbcs.w	r3, r1, r3
 8005aea:	bfb4      	ite	lt
 8005aec:	2301      	movlt	r3, #1
 8005aee:	2300      	movge	r3, #0
 8005af0:	6223      	str	r3, [r4, #32]
 8005af2:	6a23      	ldr	r3, [r4, #32]
 8005af4:	203c      	movs	r0, #60	; 0x3c
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005afc:	bf0c      	ite	eq
 8005afe:	6d39      	ldreq	r1, [r7, #80]	; 0x50
 8005b00:	6ab9      	ldrne	r1, [r7, #40]	; 0x28
 8005b02:	fb91 f6f3 	sdiv	r6, r1, r3
 8005b06:	fb03 1316 	mls	r3, r3, r6, r1
 8005b0a:	fb93 f2f0 	sdiv	r2, r3, r0
 8005b0e:	fb00 3012 	mls	r0, r0, r2, r3
 8005b12:	6861      	ldr	r1, [r4, #4]
 8005b14:	6823      	ldr	r3, [r4, #0]
 8005b16:	1a89      	subs	r1, r1, r2
 8005b18:	68a2      	ldr	r2, [r4, #8]
 8005b1a:	1a1b      	subs	r3, r3, r0
 8005b1c:	1b92      	subs	r2, r2, r6
 8005b1e:	2b3b      	cmp	r3, #59	; 0x3b
 8005b20:	6023      	str	r3, [r4, #0]
 8005b22:	6061      	str	r1, [r4, #4]
 8005b24:	60a2      	str	r2, [r4, #8]
 8005b26:	dd35      	ble.n	8005b94 <localtime_r+0x144>
 8005b28:	3101      	adds	r1, #1
 8005b2a:	6061      	str	r1, [r4, #4]
 8005b2c:	3b3c      	subs	r3, #60	; 0x3c
 8005b2e:	6023      	str	r3, [r4, #0]
 8005b30:	6863      	ldr	r3, [r4, #4]
 8005b32:	2b3b      	cmp	r3, #59	; 0x3b
 8005b34:	dd34      	ble.n	8005ba0 <localtime_r+0x150>
 8005b36:	3201      	adds	r2, #1
 8005b38:	60a2      	str	r2, [r4, #8]
 8005b3a:	3b3c      	subs	r3, #60	; 0x3c
 8005b3c:	6063      	str	r3, [r4, #4]
 8005b3e:	68a3      	ldr	r3, [r4, #8]
 8005b40:	2b17      	cmp	r3, #23
 8005b42:	dd33      	ble.n	8005bac <localtime_r+0x15c>
 8005b44:	69e2      	ldr	r2, [r4, #28]
 8005b46:	3b18      	subs	r3, #24
 8005b48:	3201      	adds	r2, #1
 8005b4a:	61e2      	str	r2, [r4, #28]
 8005b4c:	69a2      	ldr	r2, [r4, #24]
 8005b4e:	60a3      	str	r3, [r4, #8]
 8005b50:	3201      	adds	r2, #1
 8005b52:	2a06      	cmp	r2, #6
 8005b54:	bfc8      	it	gt
 8005b56:	2200      	movgt	r2, #0
 8005b58:	61a2      	str	r2, [r4, #24]
 8005b5a:	68e2      	ldr	r2, [r4, #12]
 8005b5c:	6923      	ldr	r3, [r4, #16]
 8005b5e:	3201      	adds	r2, #1
 8005b60:	60e2      	str	r2, [r4, #12]
 8005b62:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8005b66:	428a      	cmp	r2, r1
 8005b68:	dd0d      	ble.n	8005b86 <localtime_r+0x136>
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	2b0c      	cmp	r3, #12
 8005b6e:	eba2 0201 	sub.w	r2, r2, r1
 8005b72:	60e2      	str	r2, [r4, #12]
 8005b74:	bf05      	ittet	eq
 8005b76:	2200      	moveq	r2, #0
 8005b78:	6963      	ldreq	r3, [r4, #20]
 8005b7a:	6123      	strne	r3, [r4, #16]
 8005b7c:	3301      	addeq	r3, #1
 8005b7e:	bf02      	ittt	eq
 8005b80:	6122      	streq	r2, [r4, #16]
 8005b82:	6163      	streq	r3, [r4, #20]
 8005b84:	61e2      	streq	r2, [r4, #28]
 8005b86:	f000 f9fe 	bl	8005f86 <__tz_unlock>
 8005b8a:	4620      	mov	r0, r4
 8005b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b90:	2300      	movs	r3, #0
 8005b92:	e7ad      	b.n	8005af0 <localtime_r+0xa0>
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	dacb      	bge.n	8005b30 <localtime_r+0xe0>
 8005b98:	3901      	subs	r1, #1
 8005b9a:	6061      	str	r1, [r4, #4]
 8005b9c:	333c      	adds	r3, #60	; 0x3c
 8005b9e:	e7c6      	b.n	8005b2e <localtime_r+0xde>
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	dacc      	bge.n	8005b3e <localtime_r+0xee>
 8005ba4:	3a01      	subs	r2, #1
 8005ba6:	60a2      	str	r2, [r4, #8]
 8005ba8:	333c      	adds	r3, #60	; 0x3c
 8005baa:	e7c7      	b.n	8005b3c <localtime_r+0xec>
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	daea      	bge.n	8005b86 <localtime_r+0x136>
 8005bb0:	69e2      	ldr	r2, [r4, #28]
 8005bb2:	3318      	adds	r3, #24
 8005bb4:	3a01      	subs	r2, #1
 8005bb6:	61e2      	str	r2, [r4, #28]
 8005bb8:	69a2      	ldr	r2, [r4, #24]
 8005bba:	60a3      	str	r3, [r4, #8]
 8005bbc:	3a01      	subs	r2, #1
 8005bbe:	bf48      	it	mi
 8005bc0:	2206      	movmi	r2, #6
 8005bc2:	61a2      	str	r2, [r4, #24]
 8005bc4:	68e2      	ldr	r2, [r4, #12]
 8005bc6:	3a01      	subs	r2, #1
 8005bc8:	60e2      	str	r2, [r4, #12]
 8005bca:	2a00      	cmp	r2, #0
 8005bcc:	d1db      	bne.n	8005b86 <localtime_r+0x136>
 8005bce:	6923      	ldr	r3, [r4, #16]
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	d405      	bmi.n	8005be0 <localtime_r+0x190>
 8005bd4:	6123      	str	r3, [r4, #16]
 8005bd6:	6923      	ldr	r3, [r4, #16]
 8005bd8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8005bdc:	60e3      	str	r3, [r4, #12]
 8005bde:	e7d2      	b.n	8005b86 <localtime_r+0x136>
 8005be0:	230b      	movs	r3, #11
 8005be2:	6962      	ldr	r2, [r4, #20]
 8005be4:	6123      	str	r3, [r4, #16]
 8005be6:	1e51      	subs	r1, r2, #1
 8005be8:	078b      	lsls	r3, r1, #30
 8005bea:	6161      	str	r1, [r4, #20]
 8005bec:	f202 726b 	addw	r2, r2, #1899	; 0x76b
 8005bf0:	d105      	bne.n	8005bfe <localtime_r+0x1ae>
 8005bf2:	2164      	movs	r1, #100	; 0x64
 8005bf4:	fb92 f3f1 	sdiv	r3, r2, r1
 8005bf8:	fb01 2313 	mls	r3, r1, r3, r2
 8005bfc:	b963      	cbnz	r3, 8005c18 <localtime_r+0x1c8>
 8005bfe:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005c02:	fb92 f3f1 	sdiv	r3, r2, r1
 8005c06:	fb01 2313 	mls	r3, r1, r3, r2
 8005c0a:	fab3 f383 	clz	r3, r3
 8005c0e:	095b      	lsrs	r3, r3, #5
 8005c10:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8005c14:	61e3      	str	r3, [r4, #28]
 8005c16:	e7de      	b.n	8005bd6 <localtime_r+0x186>
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e7f9      	b.n	8005c10 <localtime_r+0x1c0>
 8005c1c:	080076d4 	.word	0x080076d4
 8005c20:	200002e8 	.word	0x200002e8

08005c24 <malloc>:
 8005c24:	4b02      	ldr	r3, [pc, #8]	; (8005c30 <malloc+0xc>)
 8005c26:	4601      	mov	r1, r0
 8005c28:	6818      	ldr	r0, [r3, #0]
 8005c2a:	f000 b85f 	b.w	8005cec <_malloc_r>
 8005c2e:	bf00      	nop
 8005c30:	20000064 	.word	0x20000064

08005c34 <free>:
 8005c34:	4b02      	ldr	r3, [pc, #8]	; (8005c40 <free+0xc>)
 8005c36:	4601      	mov	r1, r0
 8005c38:	6818      	ldr	r0, [r3, #0]
 8005c3a:	f000 b80b 	b.w	8005c54 <_free_r>
 8005c3e:	bf00      	nop
 8005c40:	20000064 	.word	0x20000064

08005c44 <memset>:
 8005c44:	4603      	mov	r3, r0
 8005c46:	4402      	add	r2, r0
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d100      	bne.n	8005c4e <memset+0xa>
 8005c4c:	4770      	bx	lr
 8005c4e:	f803 1b01 	strb.w	r1, [r3], #1
 8005c52:	e7f9      	b.n	8005c48 <memset+0x4>

08005c54 <_free_r>:
 8005c54:	b538      	push	{r3, r4, r5, lr}
 8005c56:	4605      	mov	r5, r0
 8005c58:	2900      	cmp	r1, #0
 8005c5a:	d043      	beq.n	8005ce4 <_free_r+0x90>
 8005c5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c60:	1f0c      	subs	r4, r1, #4
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	bfb8      	it	lt
 8005c66:	18e4      	addlt	r4, r4, r3
 8005c68:	f000 fc18 	bl	800649c <__malloc_lock>
 8005c6c:	4a1e      	ldr	r2, [pc, #120]	; (8005ce8 <_free_r+0x94>)
 8005c6e:	6813      	ldr	r3, [r2, #0]
 8005c70:	4610      	mov	r0, r2
 8005c72:	b933      	cbnz	r3, 8005c82 <_free_r+0x2e>
 8005c74:	6063      	str	r3, [r4, #4]
 8005c76:	6014      	str	r4, [r2, #0]
 8005c78:	4628      	mov	r0, r5
 8005c7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c7e:	f000 bc0e 	b.w	800649e <__malloc_unlock>
 8005c82:	42a3      	cmp	r3, r4
 8005c84:	d90b      	bls.n	8005c9e <_free_r+0x4a>
 8005c86:	6821      	ldr	r1, [r4, #0]
 8005c88:	1862      	adds	r2, r4, r1
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	bf01      	itttt	eq
 8005c8e:	681a      	ldreq	r2, [r3, #0]
 8005c90:	685b      	ldreq	r3, [r3, #4]
 8005c92:	1852      	addeq	r2, r2, r1
 8005c94:	6022      	streq	r2, [r4, #0]
 8005c96:	6063      	str	r3, [r4, #4]
 8005c98:	6004      	str	r4, [r0, #0]
 8005c9a:	e7ed      	b.n	8005c78 <_free_r+0x24>
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	685a      	ldr	r2, [r3, #4]
 8005ca0:	b10a      	cbz	r2, 8005ca6 <_free_r+0x52>
 8005ca2:	42a2      	cmp	r2, r4
 8005ca4:	d9fa      	bls.n	8005c9c <_free_r+0x48>
 8005ca6:	6819      	ldr	r1, [r3, #0]
 8005ca8:	1858      	adds	r0, r3, r1
 8005caa:	42a0      	cmp	r0, r4
 8005cac:	d10b      	bne.n	8005cc6 <_free_r+0x72>
 8005cae:	6820      	ldr	r0, [r4, #0]
 8005cb0:	4401      	add	r1, r0
 8005cb2:	1858      	adds	r0, r3, r1
 8005cb4:	4282      	cmp	r2, r0
 8005cb6:	6019      	str	r1, [r3, #0]
 8005cb8:	d1de      	bne.n	8005c78 <_free_r+0x24>
 8005cba:	6810      	ldr	r0, [r2, #0]
 8005cbc:	6852      	ldr	r2, [r2, #4]
 8005cbe:	4401      	add	r1, r0
 8005cc0:	6019      	str	r1, [r3, #0]
 8005cc2:	605a      	str	r2, [r3, #4]
 8005cc4:	e7d8      	b.n	8005c78 <_free_r+0x24>
 8005cc6:	d902      	bls.n	8005cce <_free_r+0x7a>
 8005cc8:	230c      	movs	r3, #12
 8005cca:	602b      	str	r3, [r5, #0]
 8005ccc:	e7d4      	b.n	8005c78 <_free_r+0x24>
 8005cce:	6820      	ldr	r0, [r4, #0]
 8005cd0:	1821      	adds	r1, r4, r0
 8005cd2:	428a      	cmp	r2, r1
 8005cd4:	bf01      	itttt	eq
 8005cd6:	6811      	ldreq	r1, [r2, #0]
 8005cd8:	6852      	ldreq	r2, [r2, #4]
 8005cda:	1809      	addeq	r1, r1, r0
 8005cdc:	6021      	streq	r1, [r4, #0]
 8005cde:	6062      	str	r2, [r4, #4]
 8005ce0:	605c      	str	r4, [r3, #4]
 8005ce2:	e7c9      	b.n	8005c78 <_free_r+0x24>
 8005ce4:	bd38      	pop	{r3, r4, r5, pc}
 8005ce6:	bf00      	nop
 8005ce8:	200002c4 	.word	0x200002c4

08005cec <_malloc_r>:
 8005cec:	b570      	push	{r4, r5, r6, lr}
 8005cee:	1ccd      	adds	r5, r1, #3
 8005cf0:	f025 0503 	bic.w	r5, r5, #3
 8005cf4:	3508      	adds	r5, #8
 8005cf6:	2d0c      	cmp	r5, #12
 8005cf8:	bf38      	it	cc
 8005cfa:	250c      	movcc	r5, #12
 8005cfc:	2d00      	cmp	r5, #0
 8005cfe:	4606      	mov	r6, r0
 8005d00:	db01      	blt.n	8005d06 <_malloc_r+0x1a>
 8005d02:	42a9      	cmp	r1, r5
 8005d04:	d903      	bls.n	8005d0e <_malloc_r+0x22>
 8005d06:	230c      	movs	r3, #12
 8005d08:	6033      	str	r3, [r6, #0]
 8005d0a:	2000      	movs	r0, #0
 8005d0c:	bd70      	pop	{r4, r5, r6, pc}
 8005d0e:	f000 fbc5 	bl	800649c <__malloc_lock>
 8005d12:	4a21      	ldr	r2, [pc, #132]	; (8005d98 <_malloc_r+0xac>)
 8005d14:	6814      	ldr	r4, [r2, #0]
 8005d16:	4621      	mov	r1, r4
 8005d18:	b991      	cbnz	r1, 8005d40 <_malloc_r+0x54>
 8005d1a:	4c20      	ldr	r4, [pc, #128]	; (8005d9c <_malloc_r+0xb0>)
 8005d1c:	6823      	ldr	r3, [r4, #0]
 8005d1e:	b91b      	cbnz	r3, 8005d28 <_malloc_r+0x3c>
 8005d20:	4630      	mov	r0, r6
 8005d22:	f000 f83d 	bl	8005da0 <_sbrk_r>
 8005d26:	6020      	str	r0, [r4, #0]
 8005d28:	4629      	mov	r1, r5
 8005d2a:	4630      	mov	r0, r6
 8005d2c:	f000 f838 	bl	8005da0 <_sbrk_r>
 8005d30:	1c43      	adds	r3, r0, #1
 8005d32:	d124      	bne.n	8005d7e <_malloc_r+0x92>
 8005d34:	230c      	movs	r3, #12
 8005d36:	4630      	mov	r0, r6
 8005d38:	6033      	str	r3, [r6, #0]
 8005d3a:	f000 fbb0 	bl	800649e <__malloc_unlock>
 8005d3e:	e7e4      	b.n	8005d0a <_malloc_r+0x1e>
 8005d40:	680b      	ldr	r3, [r1, #0]
 8005d42:	1b5b      	subs	r3, r3, r5
 8005d44:	d418      	bmi.n	8005d78 <_malloc_r+0x8c>
 8005d46:	2b0b      	cmp	r3, #11
 8005d48:	d90f      	bls.n	8005d6a <_malloc_r+0x7e>
 8005d4a:	600b      	str	r3, [r1, #0]
 8005d4c:	18cc      	adds	r4, r1, r3
 8005d4e:	50cd      	str	r5, [r1, r3]
 8005d50:	4630      	mov	r0, r6
 8005d52:	f000 fba4 	bl	800649e <__malloc_unlock>
 8005d56:	f104 000b 	add.w	r0, r4, #11
 8005d5a:	1d23      	adds	r3, r4, #4
 8005d5c:	f020 0007 	bic.w	r0, r0, #7
 8005d60:	1ac3      	subs	r3, r0, r3
 8005d62:	d0d3      	beq.n	8005d0c <_malloc_r+0x20>
 8005d64:	425a      	negs	r2, r3
 8005d66:	50e2      	str	r2, [r4, r3]
 8005d68:	e7d0      	b.n	8005d0c <_malloc_r+0x20>
 8005d6a:	684b      	ldr	r3, [r1, #4]
 8005d6c:	428c      	cmp	r4, r1
 8005d6e:	bf16      	itet	ne
 8005d70:	6063      	strne	r3, [r4, #4]
 8005d72:	6013      	streq	r3, [r2, #0]
 8005d74:	460c      	movne	r4, r1
 8005d76:	e7eb      	b.n	8005d50 <_malloc_r+0x64>
 8005d78:	460c      	mov	r4, r1
 8005d7a:	6849      	ldr	r1, [r1, #4]
 8005d7c:	e7cc      	b.n	8005d18 <_malloc_r+0x2c>
 8005d7e:	1cc4      	adds	r4, r0, #3
 8005d80:	f024 0403 	bic.w	r4, r4, #3
 8005d84:	42a0      	cmp	r0, r4
 8005d86:	d005      	beq.n	8005d94 <_malloc_r+0xa8>
 8005d88:	1a21      	subs	r1, r4, r0
 8005d8a:	4630      	mov	r0, r6
 8005d8c:	f000 f808 	bl	8005da0 <_sbrk_r>
 8005d90:	3001      	adds	r0, #1
 8005d92:	d0cf      	beq.n	8005d34 <_malloc_r+0x48>
 8005d94:	6025      	str	r5, [r4, #0]
 8005d96:	e7db      	b.n	8005d50 <_malloc_r+0x64>
 8005d98:	200002c4 	.word	0x200002c4
 8005d9c:	200002c8 	.word	0x200002c8

08005da0 <_sbrk_r>:
 8005da0:	b538      	push	{r3, r4, r5, lr}
 8005da2:	2300      	movs	r3, #0
 8005da4:	4c05      	ldr	r4, [pc, #20]	; (8005dbc <_sbrk_r+0x1c>)
 8005da6:	4605      	mov	r5, r0
 8005da8:	4608      	mov	r0, r1
 8005daa:	6023      	str	r3, [r4, #0]
 8005dac:	f7fc ff76 	bl	8002c9c <_sbrk>
 8005db0:	1c43      	adds	r3, r0, #1
 8005db2:	d102      	bne.n	8005dba <_sbrk_r+0x1a>
 8005db4:	6823      	ldr	r3, [r4, #0]
 8005db6:	b103      	cbz	r3, 8005dba <_sbrk_r+0x1a>
 8005db8:	602b      	str	r3, [r5, #0]
 8005dba:	bd38      	pop	{r3, r4, r5, pc}
 8005dbc:	200004c8 	.word	0x200004c8

08005dc0 <siprintf>:
 8005dc0:	b40e      	push	{r1, r2, r3}
 8005dc2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005dc6:	b500      	push	{lr}
 8005dc8:	b09c      	sub	sp, #112	; 0x70
 8005dca:	ab1d      	add	r3, sp, #116	; 0x74
 8005dcc:	9002      	str	r0, [sp, #8]
 8005dce:	9006      	str	r0, [sp, #24]
 8005dd0:	9107      	str	r1, [sp, #28]
 8005dd2:	9104      	str	r1, [sp, #16]
 8005dd4:	4808      	ldr	r0, [pc, #32]	; (8005df8 <siprintf+0x38>)
 8005dd6:	4909      	ldr	r1, [pc, #36]	; (8005dfc <siprintf+0x3c>)
 8005dd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ddc:	9105      	str	r1, [sp, #20]
 8005dde:	6800      	ldr	r0, [r0, #0]
 8005de0:	a902      	add	r1, sp, #8
 8005de2:	9301      	str	r3, [sp, #4]
 8005de4:	f000 fbb6 	bl	8006554 <_svfiprintf_r>
 8005de8:	2200      	movs	r2, #0
 8005dea:	9b02      	ldr	r3, [sp, #8]
 8005dec:	701a      	strb	r2, [r3, #0]
 8005dee:	b01c      	add	sp, #112	; 0x70
 8005df0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005df4:	b003      	add	sp, #12
 8005df6:	4770      	bx	lr
 8005df8:	20000064 	.word	0x20000064
 8005dfc:	ffff0208 	.word	0xffff0208

08005e00 <time>:
 8005e00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005e02:	4b0b      	ldr	r3, [pc, #44]	; (8005e30 <time+0x30>)
 8005e04:	4604      	mov	r4, r0
 8005e06:	2200      	movs	r2, #0
 8005e08:	4669      	mov	r1, sp
 8005e0a:	6818      	ldr	r0, [r3, #0]
 8005e0c:	f000 fa84 	bl	8006318 <_gettimeofday_r>
 8005e10:	2800      	cmp	r0, #0
 8005e12:	da05      	bge.n	8005e20 <time+0x20>
 8005e14:	f04f 32ff 	mov.w	r2, #4294967295
 8005e18:	f04f 33ff 	mov.w	r3, #4294967295
 8005e1c:	e9cd 2300 	strd	r2, r3, [sp]
 8005e20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e24:	b10c      	cbz	r4, 8005e2a <time+0x2a>
 8005e26:	e9c4 0100 	strd	r0, r1, [r4]
 8005e2a:	b004      	add	sp, #16
 8005e2c:	bd10      	pop	{r4, pc}
 8005e2e:	bf00      	nop
 8005e30:	20000064 	.word	0x20000064

08005e34 <__tzcalc_limits>:
 8005e34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e38:	4680      	mov	r8, r0
 8005e3a:	f000 fa7f 	bl	800633c <__gettzinfo>
 8005e3e:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8005e42:	4598      	cmp	r8, r3
 8005e44:	f340 8097 	ble.w	8005f76 <__tzcalc_limits+0x142>
 8005e48:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8005e4c:	f240 126d 	movw	r2, #365	; 0x16d
 8005e50:	4443      	add	r3, r8
 8005e52:	109b      	asrs	r3, r3, #2
 8005e54:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8005e58:	fb02 3505 	mla	r5, r2, r5, r3
 8005e5c:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8005e60:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8005e64:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e68:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8005e6c:	441d      	add	r5, r3
 8005e6e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8005e72:	4442      	add	r2, r8
 8005e74:	fb92 f2f3 	sdiv	r2, r2, r3
 8005e78:	fb98 f7f3 	sdiv	r7, r8, r3
 8005e7c:	4415      	add	r5, r2
 8005e7e:	2264      	movs	r2, #100	; 0x64
 8005e80:	fb03 8717 	mls	r7, r3, r7, r8
 8005e84:	fb98 f6f2 	sdiv	r6, r8, r2
 8005e88:	fab7 fc87 	clz	ip, r7
 8005e8c:	4604      	mov	r4, r0
 8005e8e:	f04f 0e07 	mov.w	lr, #7
 8005e92:	fb02 8616 	mls	r6, r2, r6, r8
 8005e96:	f008 0303 	and.w	r3, r8, #3
 8005e9a:	f8c0 8004 	str.w	r8, [r0, #4]
 8005e9e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8005ea2:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8005ea6:	9300      	str	r3, [sp, #0]
 8005ea8:	7a22      	ldrb	r2, [r4, #8]
 8005eaa:	6963      	ldr	r3, [r4, #20]
 8005eac:	2a4a      	cmp	r2, #74	; 0x4a
 8005eae:	d128      	bne.n	8005f02 <__tzcalc_limits+0xce>
 8005eb0:	9900      	ldr	r1, [sp, #0]
 8005eb2:	18ea      	adds	r2, r5, r3
 8005eb4:	b901      	cbnz	r1, 8005eb8 <__tzcalc_limits+0x84>
 8005eb6:	b906      	cbnz	r6, 8005eba <__tzcalc_limits+0x86>
 8005eb8:	bb0f      	cbnz	r7, 8005efe <__tzcalc_limits+0xca>
 8005eba:	2b3b      	cmp	r3, #59	; 0x3b
 8005ebc:	bfd4      	ite	le
 8005ebe:	2300      	movle	r3, #0
 8005ec0:	2301      	movgt	r3, #1
 8005ec2:	4413      	add	r3, r2
 8005ec4:	1e5a      	subs	r2, r3, #1
 8005ec6:	69a3      	ldr	r3, [r4, #24]
 8005ec8:	492c      	ldr	r1, [pc, #176]	; (8005f7c <__tzcalc_limits+0x148>)
 8005eca:	3428      	adds	r4, #40	; 0x28
 8005ecc:	fb01 3202 	mla	r2, r1, r2, r3
 8005ed0:	6823      	ldr	r3, [r4, #0]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	17db      	asrs	r3, r3, #31
 8005ed8:	e944 2302 	strd	r2, r3, [r4, #-8]
 8005edc:	45a3      	cmp	fp, r4
 8005ede:	d1e3      	bne.n	8005ea8 <__tzcalc_limits+0x74>
 8005ee0:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8005ee4:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8005ee8:	4294      	cmp	r4, r2
 8005eea:	eb75 0303 	sbcs.w	r3, r5, r3
 8005eee:	bfb4      	ite	lt
 8005ef0:	2301      	movlt	r3, #1
 8005ef2:	2300      	movge	r3, #0
 8005ef4:	6003      	str	r3, [r0, #0]
 8005ef6:	2001      	movs	r0, #1
 8005ef8:	b003      	add	sp, #12
 8005efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005efe:	2300      	movs	r3, #0
 8005f00:	e7df      	b.n	8005ec2 <__tzcalc_limits+0x8e>
 8005f02:	2a44      	cmp	r2, #68	; 0x44
 8005f04:	d101      	bne.n	8005f0a <__tzcalc_limits+0xd6>
 8005f06:	18ea      	adds	r2, r5, r3
 8005f08:	e7dd      	b.n	8005ec6 <__tzcalc_limits+0x92>
 8005f0a:	9a00      	ldr	r2, [sp, #0]
 8005f0c:	bb6a      	cbnz	r2, 8005f6a <__tzcalc_limits+0x136>
 8005f0e:	2e00      	cmp	r6, #0
 8005f10:	bf0c      	ite	eq
 8005f12:	46e1      	moveq	r9, ip
 8005f14:	f04f 0901 	movne.w	r9, #1
 8005f18:	2230      	movs	r2, #48	; 0x30
 8005f1a:	fb02 f909 	mul.w	r9, r2, r9
 8005f1e:	68e2      	ldr	r2, [r4, #12]
 8005f20:	f04f 0800 	mov.w	r8, #0
 8005f24:	9201      	str	r2, [sp, #4]
 8005f26:	462a      	mov	r2, r5
 8005f28:	f108 0801 	add.w	r8, r8, #1
 8005f2c:	4914      	ldr	r1, [pc, #80]	; (8005f80 <__tzcalc_limits+0x14c>)
 8005f2e:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
 8005f32:	448a      	add	sl, r1
 8005f34:	9901      	ldr	r1, [sp, #4]
 8005f36:	f85a ac04 	ldr.w	sl, [sl, #-4]
 8005f3a:	4541      	cmp	r1, r8
 8005f3c:	dc17      	bgt.n	8005f6e <__tzcalc_limits+0x13a>
 8005f3e:	f102 0804 	add.w	r8, r2, #4
 8005f42:	fb98 f9fe 	sdiv	r9, r8, lr
 8005f46:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8005f4a:	eba8 0909 	sub.w	r9, r8, r9
 8005f4e:	ebb3 0909 	subs.w	r9, r3, r9
 8005f52:	6923      	ldr	r3, [r4, #16]
 8005f54:	bf48      	it	mi
 8005f56:	f109 0907 	addmi.w	r9, r9, #7
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005f60:	444b      	add	r3, r9
 8005f62:	4553      	cmp	r3, sl
 8005f64:	da05      	bge.n	8005f72 <__tzcalc_limits+0x13e>
 8005f66:	441a      	add	r2, r3
 8005f68:	e7ad      	b.n	8005ec6 <__tzcalc_limits+0x92>
 8005f6a:	46e1      	mov	r9, ip
 8005f6c:	e7d4      	b.n	8005f18 <__tzcalc_limits+0xe4>
 8005f6e:	4452      	add	r2, sl
 8005f70:	e7da      	b.n	8005f28 <__tzcalc_limits+0xf4>
 8005f72:	3b07      	subs	r3, #7
 8005f74:	e7f5      	b.n	8005f62 <__tzcalc_limits+0x12e>
 8005f76:	2000      	movs	r0, #0
 8005f78:	e7be      	b.n	8005ef8 <__tzcalc_limits+0xc4>
 8005f7a:	bf00      	nop
 8005f7c:	00015180 	.word	0x00015180
 8005f80:	080076d4 	.word	0x080076d4

08005f84 <__tz_lock>:
 8005f84:	4770      	bx	lr

08005f86 <__tz_unlock>:
 8005f86:	4770      	bx	lr

08005f88 <_tzset_unlocked>:
 8005f88:	4b01      	ldr	r3, [pc, #4]	; (8005f90 <_tzset_unlocked+0x8>)
 8005f8a:	6818      	ldr	r0, [r3, #0]
 8005f8c:	f000 b802 	b.w	8005f94 <_tzset_unlocked_r>
 8005f90:	20000064 	.word	0x20000064

08005f94 <_tzset_unlocked_r>:
 8005f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f98:	b08d      	sub	sp, #52	; 0x34
 8005f9a:	4607      	mov	r7, r0
 8005f9c:	f000 f9ce 	bl	800633c <__gettzinfo>
 8005fa0:	49af      	ldr	r1, [pc, #700]	; (8006260 <_tzset_unlocked_r+0x2cc>)
 8005fa2:	4605      	mov	r5, r0
 8005fa4:	4638      	mov	r0, r7
 8005fa6:	f000 f9af 	bl	8006308 <_getenv_r>
 8005faa:	4eae      	ldr	r6, [pc, #696]	; (8006264 <_tzset_unlocked_r+0x2d0>)
 8005fac:	4604      	mov	r4, r0
 8005fae:	b970      	cbnz	r0, 8005fce <_tzset_unlocked_r+0x3a>
 8005fb0:	4bad      	ldr	r3, [pc, #692]	; (8006268 <_tzset_unlocked_r+0x2d4>)
 8005fb2:	4aae      	ldr	r2, [pc, #696]	; (800626c <_tzset_unlocked_r+0x2d8>)
 8005fb4:	6018      	str	r0, [r3, #0]
 8005fb6:	4bae      	ldr	r3, [pc, #696]	; (8006270 <_tzset_unlocked_r+0x2dc>)
 8005fb8:	6018      	str	r0, [r3, #0]
 8005fba:	4bae      	ldr	r3, [pc, #696]	; (8006274 <_tzset_unlocked_r+0x2e0>)
 8005fbc:	6830      	ldr	r0, [r6, #0]
 8005fbe:	e9c3 2200 	strd	r2, r2, [r3]
 8005fc2:	f7ff fe37 	bl	8005c34 <free>
 8005fc6:	6034      	str	r4, [r6, #0]
 8005fc8:	b00d      	add	sp, #52	; 0x34
 8005fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fce:	6831      	ldr	r1, [r6, #0]
 8005fd0:	2900      	cmp	r1, #0
 8005fd2:	d15f      	bne.n	8006094 <_tzset_unlocked_r+0x100>
 8005fd4:	6830      	ldr	r0, [r6, #0]
 8005fd6:	f7ff fe2d 	bl	8005c34 <free>
 8005fda:	4620      	mov	r0, r4
 8005fdc:	f7fa f8c2 	bl	8000164 <strlen>
 8005fe0:	1c41      	adds	r1, r0, #1
 8005fe2:	4638      	mov	r0, r7
 8005fe4:	f7ff fe82 	bl	8005cec <_malloc_r>
 8005fe8:	6030      	str	r0, [r6, #0]
 8005fea:	2800      	cmp	r0, #0
 8005fec:	d157      	bne.n	800609e <_tzset_unlocked_r+0x10a>
 8005fee:	7823      	ldrb	r3, [r4, #0]
 8005ff0:	ae0a      	add	r6, sp, #40	; 0x28
 8005ff2:	2b3a      	cmp	r3, #58	; 0x3a
 8005ff4:	bf08      	it	eq
 8005ff6:	3401      	addeq	r4, #1
 8005ff8:	4633      	mov	r3, r6
 8005ffa:	4a9f      	ldr	r2, [pc, #636]	; (8006278 <_tzset_unlocked_r+0x2e4>)
 8005ffc:	499f      	ldr	r1, [pc, #636]	; (800627c <_tzset_unlocked_r+0x2e8>)
 8005ffe:	4620      	mov	r0, r4
 8006000:	f000 fd28 	bl	8006a54 <siscanf>
 8006004:	2800      	cmp	r0, #0
 8006006:	dddf      	ble.n	8005fc8 <_tzset_unlocked_r+0x34>
 8006008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800600a:	18e7      	adds	r7, r4, r3
 800600c:	5ce3      	ldrb	r3, [r4, r3]
 800600e:	2b2d      	cmp	r3, #45	; 0x2d
 8006010:	d149      	bne.n	80060a6 <_tzset_unlocked_r+0x112>
 8006012:	f04f 34ff 	mov.w	r4, #4294967295
 8006016:	3701      	adds	r7, #1
 8006018:	f04f 0800 	mov.w	r8, #0
 800601c:	f10d 0a20 	add.w	sl, sp, #32
 8006020:	f10d 0b1e 	add.w	fp, sp, #30
 8006024:	9603      	str	r6, [sp, #12]
 8006026:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800602a:	f8cd b000 	str.w	fp, [sp]
 800602e:	4633      	mov	r3, r6
 8006030:	aa07      	add	r2, sp, #28
 8006032:	4993      	ldr	r1, [pc, #588]	; (8006280 <_tzset_unlocked_r+0x2ec>)
 8006034:	4638      	mov	r0, r7
 8006036:	f8ad 801e 	strh.w	r8, [sp, #30]
 800603a:	f8ad 8020 	strh.w	r8, [sp, #32]
 800603e:	f000 fd09 	bl	8006a54 <siscanf>
 8006042:	4540      	cmp	r0, r8
 8006044:	ddc0      	ble.n	8005fc8 <_tzset_unlocked_r+0x34>
 8006046:	213c      	movs	r1, #60	; 0x3c
 8006048:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800604c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8006050:	f8df 9238 	ldr.w	r9, [pc, #568]	; 800628c <_tzset_unlocked_r+0x2f8>
 8006054:	fb01 2203 	mla	r2, r1, r3, r2
 8006058:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800605c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8006060:	fb01 2303 	mla	r3, r1, r3, r2
 8006064:	435c      	muls	r4, r3
 8006066:	4b84      	ldr	r3, [pc, #528]	; (8006278 <_tzset_unlocked_r+0x2e4>)
 8006068:	62ac      	str	r4, [r5, #40]	; 0x28
 800606a:	4c82      	ldr	r4, [pc, #520]	; (8006274 <_tzset_unlocked_r+0x2e0>)
 800606c:	464a      	mov	r2, r9
 800606e:	6023      	str	r3, [r4, #0]
 8006070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006072:	4982      	ldr	r1, [pc, #520]	; (800627c <_tzset_unlocked_r+0x2e8>)
 8006074:	441f      	add	r7, r3
 8006076:	4638      	mov	r0, r7
 8006078:	4633      	mov	r3, r6
 800607a:	f000 fceb 	bl	8006a54 <siscanf>
 800607e:	4540      	cmp	r0, r8
 8006080:	dc16      	bgt.n	80060b0 <_tzset_unlocked_r+0x11c>
 8006082:	6823      	ldr	r3, [r4, #0]
 8006084:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8006086:	6063      	str	r3, [r4, #4]
 8006088:	4b77      	ldr	r3, [pc, #476]	; (8006268 <_tzset_unlocked_r+0x2d4>)
 800608a:	601a      	str	r2, [r3, #0]
 800608c:	4b78      	ldr	r3, [pc, #480]	; (8006270 <_tzset_unlocked_r+0x2dc>)
 800608e:	f8c3 8000 	str.w	r8, [r3]
 8006092:	e799      	b.n	8005fc8 <_tzset_unlocked_r+0x34>
 8006094:	f7fa f85c 	bl	8000150 <strcmp>
 8006098:	2800      	cmp	r0, #0
 800609a:	d095      	beq.n	8005fc8 <_tzset_unlocked_r+0x34>
 800609c:	e79a      	b.n	8005fd4 <_tzset_unlocked_r+0x40>
 800609e:	4621      	mov	r1, r4
 80060a0:	f000 fd04 	bl	8006aac <strcpy>
 80060a4:	e7a3      	b.n	8005fee <_tzset_unlocked_r+0x5a>
 80060a6:	2b2b      	cmp	r3, #43	; 0x2b
 80060a8:	bf08      	it	eq
 80060aa:	3701      	addeq	r7, #1
 80060ac:	2401      	movs	r4, #1
 80060ae:	e7b3      	b.n	8006018 <_tzset_unlocked_r+0x84>
 80060b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060b2:	f8c4 9004 	str.w	r9, [r4, #4]
 80060b6:	18fc      	adds	r4, r7, r3
 80060b8:	5cfb      	ldrb	r3, [r7, r3]
 80060ba:	2b2d      	cmp	r3, #45	; 0x2d
 80060bc:	f040 808c 	bne.w	80061d8 <_tzset_unlocked_r+0x244>
 80060c0:	f04f 37ff 	mov.w	r7, #4294967295
 80060c4:	3401      	adds	r4, #1
 80060c6:	2300      	movs	r3, #0
 80060c8:	e9cd a602 	strd	sl, r6, [sp, #8]
 80060cc:	f8ad 301c 	strh.w	r3, [sp, #28]
 80060d0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80060d4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80060d8:	930a      	str	r3, [sp, #40]	; 0x28
 80060da:	e9cd b600 	strd	fp, r6, [sp]
 80060de:	4633      	mov	r3, r6
 80060e0:	aa07      	add	r2, sp, #28
 80060e2:	4967      	ldr	r1, [pc, #412]	; (8006280 <_tzset_unlocked_r+0x2ec>)
 80060e4:	4620      	mov	r0, r4
 80060e6:	f000 fcb5 	bl	8006a54 <siscanf>
 80060ea:	2800      	cmp	r0, #0
 80060ec:	dc79      	bgt.n	80061e2 <_tzset_unlocked_r+0x24e>
 80060ee:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80060f0:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80060f4:	652b      	str	r3, [r5, #80]	; 0x50
 80060f6:	462f      	mov	r7, r5
 80060f8:	f04f 0900 	mov.w	r9, #0
 80060fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060fe:	441c      	add	r4, r3
 8006100:	7823      	ldrb	r3, [r4, #0]
 8006102:	2b2c      	cmp	r3, #44	; 0x2c
 8006104:	bf08      	it	eq
 8006106:	3401      	addeq	r4, #1
 8006108:	f894 8000 	ldrb.w	r8, [r4]
 800610c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8006110:	d17a      	bne.n	8006208 <_tzset_unlocked_r+0x274>
 8006112:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8006116:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800611a:	ab09      	add	r3, sp, #36	; 0x24
 800611c:	9300      	str	r3, [sp, #0]
 800611e:	9603      	str	r6, [sp, #12]
 8006120:	4633      	mov	r3, r6
 8006122:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8006126:	4957      	ldr	r1, [pc, #348]	; (8006284 <_tzset_unlocked_r+0x2f0>)
 8006128:	4620      	mov	r0, r4
 800612a:	f000 fc93 	bl	8006a54 <siscanf>
 800612e:	2803      	cmp	r0, #3
 8006130:	f47f af4a 	bne.w	8005fc8 <_tzset_unlocked_r+0x34>
 8006134:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8006138:	1e4b      	subs	r3, r1, #1
 800613a:	2b0b      	cmp	r3, #11
 800613c:	f63f af44 	bhi.w	8005fc8 <_tzset_unlocked_r+0x34>
 8006140:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8006144:	1e53      	subs	r3, r2, #1
 8006146:	2b04      	cmp	r3, #4
 8006148:	f63f af3e 	bhi.w	8005fc8 <_tzset_unlocked_r+0x34>
 800614c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8006150:	2b06      	cmp	r3, #6
 8006152:	f63f af39 	bhi.w	8005fc8 <_tzset_unlocked_r+0x34>
 8006156:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800615a:	f887 8008 	strb.w	r8, [r7, #8]
 800615e:	617b      	str	r3, [r7, #20]
 8006160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006162:	eb04 0803 	add.w	r8, r4, r3
 8006166:	2302      	movs	r3, #2
 8006168:	f8ad 301c 	strh.w	r3, [sp, #28]
 800616c:	2300      	movs	r3, #0
 800616e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006172:	f8ad 3020 	strh.w	r3, [sp, #32]
 8006176:	930a      	str	r3, [sp, #40]	; 0x28
 8006178:	f898 3000 	ldrb.w	r3, [r8]
 800617c:	2b2f      	cmp	r3, #47	; 0x2f
 800617e:	d109      	bne.n	8006194 <_tzset_unlocked_r+0x200>
 8006180:	e9cd a602 	strd	sl, r6, [sp, #8]
 8006184:	e9cd b600 	strd	fp, r6, [sp]
 8006188:	4633      	mov	r3, r6
 800618a:	aa07      	add	r2, sp, #28
 800618c:	493e      	ldr	r1, [pc, #248]	; (8006288 <_tzset_unlocked_r+0x2f4>)
 800618e:	4640      	mov	r0, r8
 8006190:	f000 fc60 	bl	8006a54 <siscanf>
 8006194:	213c      	movs	r1, #60	; 0x3c
 8006196:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800619a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800619e:	3728      	adds	r7, #40	; 0x28
 80061a0:	fb01 2203 	mla	r2, r1, r3, r2
 80061a4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80061a8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80061ac:	fb01 2303 	mla	r3, r1, r3, r2
 80061b0:	f847 3c10 	str.w	r3, [r7, #-16]
 80061b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80061b6:	4444      	add	r4, r8
 80061b8:	f1b9 0f00 	cmp.w	r9, #0
 80061bc:	d021      	beq.n	8006202 <_tzset_unlocked_r+0x26e>
 80061be:	6868      	ldr	r0, [r5, #4]
 80061c0:	f7ff fe38 	bl	8005e34 <__tzcalc_limits>
 80061c4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80061c6:	4b28      	ldr	r3, [pc, #160]	; (8006268 <_tzset_unlocked_r+0x2d4>)
 80061c8:	601a      	str	r2, [r3, #0]
 80061ca:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80061cc:	1a9b      	subs	r3, r3, r2
 80061ce:	bf18      	it	ne
 80061d0:	2301      	movne	r3, #1
 80061d2:	4a27      	ldr	r2, [pc, #156]	; (8006270 <_tzset_unlocked_r+0x2dc>)
 80061d4:	6013      	str	r3, [r2, #0]
 80061d6:	e6f7      	b.n	8005fc8 <_tzset_unlocked_r+0x34>
 80061d8:	2b2b      	cmp	r3, #43	; 0x2b
 80061da:	bf08      	it	eq
 80061dc:	3401      	addeq	r4, #1
 80061de:	2701      	movs	r7, #1
 80061e0:	e771      	b.n	80060c6 <_tzset_unlocked_r+0x132>
 80061e2:	213c      	movs	r1, #60	; 0x3c
 80061e4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80061e8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80061ec:	fb01 2203 	mla	r2, r1, r3, r2
 80061f0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80061f4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80061f8:	fb01 2303 	mla	r3, r1, r3, r2
 80061fc:	435f      	muls	r7, r3
 80061fe:	652f      	str	r7, [r5, #80]	; 0x50
 8006200:	e779      	b.n	80060f6 <_tzset_unlocked_r+0x162>
 8006202:	f04f 0901 	mov.w	r9, #1
 8006206:	e77b      	b.n	8006100 <_tzset_unlocked_r+0x16c>
 8006208:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800620c:	bf0a      	itet	eq
 800620e:	4643      	moveq	r3, r8
 8006210:	2344      	movne	r3, #68	; 0x44
 8006212:	3401      	addeq	r4, #1
 8006214:	220a      	movs	r2, #10
 8006216:	a90b      	add	r1, sp, #44	; 0x2c
 8006218:	4620      	mov	r0, r4
 800621a:	9305      	str	r3, [sp, #20]
 800621c:	f000 fcec 	bl	8006bf8 <strtoul>
 8006220:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8006224:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8006228:	45a0      	cmp	r8, r4
 800622a:	9b05      	ldr	r3, [sp, #20]
 800622c:	d114      	bne.n	8006258 <_tzset_unlocked_r+0x2c4>
 800622e:	234d      	movs	r3, #77	; 0x4d
 8006230:	f1b9 0f00 	cmp.w	r9, #0
 8006234:	d107      	bne.n	8006246 <_tzset_unlocked_r+0x2b2>
 8006236:	722b      	strb	r3, [r5, #8]
 8006238:	2103      	movs	r1, #3
 800623a:	2302      	movs	r3, #2
 800623c:	f8c5 9014 	str.w	r9, [r5, #20]
 8006240:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8006244:	e78f      	b.n	8006166 <_tzset_unlocked_r+0x1d2>
 8006246:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800624a:	220b      	movs	r2, #11
 800624c:	2301      	movs	r3, #1
 800624e:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8006252:	2300      	movs	r3, #0
 8006254:	63eb      	str	r3, [r5, #60]	; 0x3c
 8006256:	e786      	b.n	8006166 <_tzset_unlocked_r+0x1d2>
 8006258:	b280      	uxth	r0, r0
 800625a:	723b      	strb	r3, [r7, #8]
 800625c:	6178      	str	r0, [r7, #20]
 800625e:	e782      	b.n	8006166 <_tzset_unlocked_r+0x1d2>
 8006260:	08007734 	.word	0x08007734
 8006264:	200002e4 	.word	0x200002e4
 8006268:	200002ec 	.word	0x200002ec
 800626c:	08007737 	.word	0x08007737
 8006270:	200002e8 	.word	0x200002e8
 8006274:	200000c8 	.word	0x200000c8
 8006278:	200002d7 	.word	0x200002d7
 800627c:	0800773b 	.word	0x0800773b
 8006280:	0800775e 	.word	0x0800775e
 8006284:	0800774a 	.word	0x0800774a
 8006288:	0800775d 	.word	0x0800775d
 800628c:	200002cc 	.word	0x200002cc

08006290 <_findenv_r>:
 8006290:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006294:	4607      	mov	r7, r0
 8006296:	468b      	mov	fp, r1
 8006298:	4690      	mov	r8, r2
 800629a:	f000 fcc3 	bl	8006c24 <__env_lock>
 800629e:	4b19      	ldr	r3, [pc, #100]	; (8006304 <_findenv_r+0x74>)
 80062a0:	681d      	ldr	r5, [r3, #0]
 80062a2:	469a      	mov	sl, r3
 80062a4:	b13d      	cbz	r5, 80062b6 <_findenv_r+0x26>
 80062a6:	465c      	mov	r4, fp
 80062a8:	4623      	mov	r3, r4
 80062aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062ae:	b32a      	cbz	r2, 80062fc <_findenv_r+0x6c>
 80062b0:	2a3d      	cmp	r2, #61	; 0x3d
 80062b2:	461c      	mov	r4, r3
 80062b4:	d1f8      	bne.n	80062a8 <_findenv_r+0x18>
 80062b6:	4638      	mov	r0, r7
 80062b8:	f000 fcb5 	bl	8006c26 <__env_unlock>
 80062bc:	2000      	movs	r0, #0
 80062be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062c2:	464d      	mov	r5, r9
 80062c4:	46a9      	mov	r9, r5
 80062c6:	f859 0b04 	ldr.w	r0, [r9], #4
 80062ca:	2800      	cmp	r0, #0
 80062cc:	d0f3      	beq.n	80062b6 <_findenv_r+0x26>
 80062ce:	4622      	mov	r2, r4
 80062d0:	4659      	mov	r1, fp
 80062d2:	f000 fbf3 	bl	8006abc <strncmp>
 80062d6:	2800      	cmp	r0, #0
 80062d8:	d1f3      	bne.n	80062c2 <_findenv_r+0x32>
 80062da:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80062de:	191e      	adds	r6, r3, r4
 80062e0:	5d1b      	ldrb	r3, [r3, r4]
 80062e2:	2b3d      	cmp	r3, #61	; 0x3d
 80062e4:	d1ed      	bne.n	80062c2 <_findenv_r+0x32>
 80062e6:	f8da 3000 	ldr.w	r3, [sl]
 80062ea:	4638      	mov	r0, r7
 80062ec:	1aed      	subs	r5, r5, r3
 80062ee:	10ad      	asrs	r5, r5, #2
 80062f0:	f8c8 5000 	str.w	r5, [r8]
 80062f4:	f000 fc97 	bl	8006c26 <__env_unlock>
 80062f8:	1c70      	adds	r0, r6, #1
 80062fa:	e7e0      	b.n	80062be <_findenv_r+0x2e>
 80062fc:	eba4 040b 	sub.w	r4, r4, fp
 8006300:	e7e0      	b.n	80062c4 <_findenv_r+0x34>
 8006302:	bf00      	nop
 8006304:	20000054 	.word	0x20000054

08006308 <_getenv_r>:
 8006308:	b507      	push	{r0, r1, r2, lr}
 800630a:	aa01      	add	r2, sp, #4
 800630c:	f7ff ffc0 	bl	8006290 <_findenv_r>
 8006310:	b003      	add	sp, #12
 8006312:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08006318 <_gettimeofday_r>:
 8006318:	b538      	push	{r3, r4, r5, lr}
 800631a:	2300      	movs	r3, #0
 800631c:	4c06      	ldr	r4, [pc, #24]	; (8006338 <_gettimeofday_r+0x20>)
 800631e:	4605      	mov	r5, r0
 8006320:	4608      	mov	r0, r1
 8006322:	4611      	mov	r1, r2
 8006324:	6023      	str	r3, [r4, #0]
 8006326:	f001 f909 	bl	800753c <_gettimeofday>
 800632a:	1c43      	adds	r3, r0, #1
 800632c:	d102      	bne.n	8006334 <_gettimeofday_r+0x1c>
 800632e:	6823      	ldr	r3, [r4, #0]
 8006330:	b103      	cbz	r3, 8006334 <_gettimeofday_r+0x1c>
 8006332:	602b      	str	r3, [r5, #0]
 8006334:	bd38      	pop	{r3, r4, r5, pc}
 8006336:	bf00      	nop
 8006338:	200004c8 	.word	0x200004c8

0800633c <__gettzinfo>:
 800633c:	4800      	ldr	r0, [pc, #0]	; (8006340 <__gettzinfo+0x4>)
 800633e:	4770      	bx	lr
 8006340:	200000d0 	.word	0x200000d0

08006344 <gmtime_r>:
 8006344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006348:	e9d0 8900 	ldrd	r8, r9, [r0]
 800634c:	460c      	mov	r4, r1
 800634e:	4a4f      	ldr	r2, [pc, #316]	; (800648c <gmtime_r+0x148>)
 8006350:	2300      	movs	r3, #0
 8006352:	4640      	mov	r0, r8
 8006354:	4649      	mov	r1, r9
 8006356:	f7fa fe45 	bl	8000fe4 <__aeabi_ldivmod>
 800635a:	4a4c      	ldr	r2, [pc, #304]	; (800648c <gmtime_r+0x148>)
 800635c:	f500 262f 	add.w	r6, r0, #716800	; 0xaf000
 8006360:	2300      	movs	r3, #0
 8006362:	4640      	mov	r0, r8
 8006364:	4649      	mov	r1, r9
 8006366:	f7fa fe3d 	bl	8000fe4 <__aeabi_ldivmod>
 800636a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800636e:	2a00      	cmp	r2, #0
 8006370:	bfbc      	itt	lt
 8006372:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8006376:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800637a:	fb92 f3f1 	sdiv	r3, r2, r1
 800637e:	fb01 2213 	mls	r2, r1, r3, r2
 8006382:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8006386:	60a3      	str	r3, [r4, #8]
 8006388:	fb92 f3f1 	sdiv	r3, r2, r1
 800638c:	fb01 2213 	mls	r2, r1, r3, r2
 8006390:	6022      	str	r2, [r4, #0]
 8006392:	f04f 0207 	mov.w	r2, #7
 8006396:	f606 256c 	addw	r5, r6, #2668	; 0xa6c
 800639a:	bfb8      	it	lt
 800639c:	f606 256b 	addwlt	r5, r6, #2667	; 0xa6b
 80063a0:	6063      	str	r3, [r4, #4]
 80063a2:	1ceb      	adds	r3, r5, #3
 80063a4:	fb93 f2f2 	sdiv	r2, r3, r2
 80063a8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80063ac:	1a9b      	subs	r3, r3, r2
 80063ae:	bf48      	it	mi
 80063b0:	3307      	addmi	r3, #7
 80063b2:	2d00      	cmp	r5, #0
 80063b4:	4836      	ldr	r0, [pc, #216]	; (8006490 <gmtime_r+0x14c>)
 80063b6:	61a3      	str	r3, [r4, #24]
 80063b8:	bfbd      	ittte	lt
 80063ba:	f5a5 330e 	sublt.w	r3, r5, #145408	; 0x23800
 80063be:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 80063c2:	fb93 f0f0 	sdivlt	r0, r3, r0
 80063c6:	fb95 f0f0 	sdivge	r0, r5, r0
 80063ca:	f648 61ac 	movw	r1, #36524	; 0x8eac
 80063ce:	f240 57b4 	movw	r7, #1460	; 0x5b4
 80063d2:	4b30      	ldr	r3, [pc, #192]	; (8006494 <gmtime_r+0x150>)
 80063d4:	f240 166d 	movw	r6, #365	; 0x16d
 80063d8:	fb03 5300 	mla	r3, r3, r0, r5
 80063dc:	fbb3 f1f1 	udiv	r1, r3, r1
 80063e0:	fbb3 f2f7 	udiv	r2, r3, r7
 80063e4:	4419      	add	r1, r3
 80063e6:	1a89      	subs	r1, r1, r2
 80063e8:	4a2b      	ldr	r2, [pc, #172]	; (8006498 <gmtime_r+0x154>)
 80063ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80063ee:	1a8a      	subs	r2, r1, r2
 80063f0:	f648 6194 	movw	r1, #36500	; 0x8e94
 80063f4:	fbb2 f1f1 	udiv	r1, r2, r1
 80063f8:	fbb2 f5f6 	udiv	r5, r2, r6
 80063fc:	fbb2 f2f7 	udiv	r2, r2, r7
 8006400:	440b      	add	r3, r1
 8006402:	2199      	movs	r1, #153	; 0x99
 8006404:	1a9a      	subs	r2, r3, r2
 8006406:	fb06 2315 	mls	r3, r6, r5, r2
 800640a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800640e:	3202      	adds	r2, #2
 8006410:	fbb2 f2f1 	udiv	r2, r2, r1
 8006414:	2705      	movs	r7, #5
 8006416:	4351      	muls	r1, r2
 8006418:	3102      	adds	r1, #2
 800641a:	fbb1 f1f7 	udiv	r1, r1, r7
 800641e:	2a0a      	cmp	r2, #10
 8006420:	f103 0601 	add.w	r6, r3, #1
 8006424:	eba6 0101 	sub.w	r1, r6, r1
 8006428:	bf34      	ite	cc
 800642a:	2602      	movcc	r6, #2
 800642c:	f06f 0609 	mvncs.w	r6, #9
 8006430:	4416      	add	r6, r2
 8006432:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006436:	fb02 5000 	mla	r0, r2, r0, r5
 800643a:	2e01      	cmp	r6, #1
 800643c:	bf98      	it	ls
 800643e:	3001      	addls	r0, #1
 8006440:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8006444:	d30c      	bcc.n	8006460 <gmtime_r+0x11c>
 8006446:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800644a:	61e3      	str	r3, [r4, #28]
 800644c:	2300      	movs	r3, #0
 800644e:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
 8006452:	e9c4 6004 	strd	r6, r0, [r4, #16]
 8006456:	60e1      	str	r1, [r4, #12]
 8006458:	6223      	str	r3, [r4, #32]
 800645a:	4620      	mov	r0, r4
 800645c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006460:	07aa      	lsls	r2, r5, #30
 8006462:	d105      	bne.n	8006470 <gmtime_r+0x12c>
 8006464:	2764      	movs	r7, #100	; 0x64
 8006466:	fbb5 f2f7 	udiv	r2, r5, r7
 800646a:	fb07 5212 	mls	r2, r7, r2, r5
 800646e:	b95a      	cbnz	r2, 8006488 <gmtime_r+0x144>
 8006470:	f44f 77c8 	mov.w	r7, #400	; 0x190
 8006474:	fbb5 f2f7 	udiv	r2, r5, r7
 8006478:	fb07 5212 	mls	r2, r7, r2, r5
 800647c:	fab2 f282 	clz	r2, r2
 8006480:	0952      	lsrs	r2, r2, #5
 8006482:	333b      	adds	r3, #59	; 0x3b
 8006484:	4413      	add	r3, r2
 8006486:	e7e0      	b.n	800644a <gmtime_r+0x106>
 8006488:	2201      	movs	r2, #1
 800648a:	e7fa      	b.n	8006482 <gmtime_r+0x13e>
 800648c:	00015180 	.word	0x00015180
 8006490:	00023ab1 	.word	0x00023ab1
 8006494:	fffdc54f 	.word	0xfffdc54f
 8006498:	00023ab0 	.word	0x00023ab0

0800649c <__malloc_lock>:
 800649c:	4770      	bx	lr

0800649e <__malloc_unlock>:
 800649e:	4770      	bx	lr

080064a0 <__ssputs_r>:
 80064a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064a4:	688e      	ldr	r6, [r1, #8]
 80064a6:	4682      	mov	sl, r0
 80064a8:	429e      	cmp	r6, r3
 80064aa:	460c      	mov	r4, r1
 80064ac:	4690      	mov	r8, r2
 80064ae:	4699      	mov	r9, r3
 80064b0:	d837      	bhi.n	8006522 <__ssputs_r+0x82>
 80064b2:	898a      	ldrh	r2, [r1, #12]
 80064b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80064b8:	d031      	beq.n	800651e <__ssputs_r+0x7e>
 80064ba:	2302      	movs	r3, #2
 80064bc:	6825      	ldr	r5, [r4, #0]
 80064be:	6909      	ldr	r1, [r1, #16]
 80064c0:	1a6f      	subs	r7, r5, r1
 80064c2:	6965      	ldr	r5, [r4, #20]
 80064c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064c8:	fb95 f5f3 	sdiv	r5, r5, r3
 80064cc:	f109 0301 	add.w	r3, r9, #1
 80064d0:	443b      	add	r3, r7
 80064d2:	429d      	cmp	r5, r3
 80064d4:	bf38      	it	cc
 80064d6:	461d      	movcc	r5, r3
 80064d8:	0553      	lsls	r3, r2, #21
 80064da:	d530      	bpl.n	800653e <__ssputs_r+0x9e>
 80064dc:	4629      	mov	r1, r5
 80064de:	f7ff fc05 	bl	8005cec <_malloc_r>
 80064e2:	4606      	mov	r6, r0
 80064e4:	b950      	cbnz	r0, 80064fc <__ssputs_r+0x5c>
 80064e6:	230c      	movs	r3, #12
 80064e8:	f04f 30ff 	mov.w	r0, #4294967295
 80064ec:	f8ca 3000 	str.w	r3, [sl]
 80064f0:	89a3      	ldrh	r3, [r4, #12]
 80064f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064f6:	81a3      	strh	r3, [r4, #12]
 80064f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064fc:	463a      	mov	r2, r7
 80064fe:	6921      	ldr	r1, [r4, #16]
 8006500:	f000 fbc4 	bl	8006c8c <memcpy>
 8006504:	89a3      	ldrh	r3, [r4, #12]
 8006506:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800650a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800650e:	81a3      	strh	r3, [r4, #12]
 8006510:	6126      	str	r6, [r4, #16]
 8006512:	443e      	add	r6, r7
 8006514:	6026      	str	r6, [r4, #0]
 8006516:	464e      	mov	r6, r9
 8006518:	6165      	str	r5, [r4, #20]
 800651a:	1bed      	subs	r5, r5, r7
 800651c:	60a5      	str	r5, [r4, #8]
 800651e:	454e      	cmp	r6, r9
 8006520:	d900      	bls.n	8006524 <__ssputs_r+0x84>
 8006522:	464e      	mov	r6, r9
 8006524:	4632      	mov	r2, r6
 8006526:	4641      	mov	r1, r8
 8006528:	6820      	ldr	r0, [r4, #0]
 800652a:	f000 fbba 	bl	8006ca2 <memmove>
 800652e:	68a3      	ldr	r3, [r4, #8]
 8006530:	2000      	movs	r0, #0
 8006532:	1b9b      	subs	r3, r3, r6
 8006534:	60a3      	str	r3, [r4, #8]
 8006536:	6823      	ldr	r3, [r4, #0]
 8006538:	441e      	add	r6, r3
 800653a:	6026      	str	r6, [r4, #0]
 800653c:	e7dc      	b.n	80064f8 <__ssputs_r+0x58>
 800653e:	462a      	mov	r2, r5
 8006540:	f000 fbc8 	bl	8006cd4 <_realloc_r>
 8006544:	4606      	mov	r6, r0
 8006546:	2800      	cmp	r0, #0
 8006548:	d1e2      	bne.n	8006510 <__ssputs_r+0x70>
 800654a:	6921      	ldr	r1, [r4, #16]
 800654c:	4650      	mov	r0, sl
 800654e:	f7ff fb81 	bl	8005c54 <_free_r>
 8006552:	e7c8      	b.n	80064e6 <__ssputs_r+0x46>

08006554 <_svfiprintf_r>:
 8006554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006558:	461d      	mov	r5, r3
 800655a:	898b      	ldrh	r3, [r1, #12]
 800655c:	b09d      	sub	sp, #116	; 0x74
 800655e:	061f      	lsls	r7, r3, #24
 8006560:	4680      	mov	r8, r0
 8006562:	460c      	mov	r4, r1
 8006564:	4616      	mov	r6, r2
 8006566:	d50f      	bpl.n	8006588 <_svfiprintf_r+0x34>
 8006568:	690b      	ldr	r3, [r1, #16]
 800656a:	b96b      	cbnz	r3, 8006588 <_svfiprintf_r+0x34>
 800656c:	2140      	movs	r1, #64	; 0x40
 800656e:	f7ff fbbd 	bl	8005cec <_malloc_r>
 8006572:	6020      	str	r0, [r4, #0]
 8006574:	6120      	str	r0, [r4, #16]
 8006576:	b928      	cbnz	r0, 8006584 <_svfiprintf_r+0x30>
 8006578:	230c      	movs	r3, #12
 800657a:	f8c8 3000 	str.w	r3, [r8]
 800657e:	f04f 30ff 	mov.w	r0, #4294967295
 8006582:	e0c8      	b.n	8006716 <_svfiprintf_r+0x1c2>
 8006584:	2340      	movs	r3, #64	; 0x40
 8006586:	6163      	str	r3, [r4, #20]
 8006588:	2300      	movs	r3, #0
 800658a:	9309      	str	r3, [sp, #36]	; 0x24
 800658c:	2320      	movs	r3, #32
 800658e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006592:	2330      	movs	r3, #48	; 0x30
 8006594:	f04f 0b01 	mov.w	fp, #1
 8006598:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800659c:	9503      	str	r5, [sp, #12]
 800659e:	4637      	mov	r7, r6
 80065a0:	463d      	mov	r5, r7
 80065a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80065a6:	b10b      	cbz	r3, 80065ac <_svfiprintf_r+0x58>
 80065a8:	2b25      	cmp	r3, #37	; 0x25
 80065aa:	d13e      	bne.n	800662a <_svfiprintf_r+0xd6>
 80065ac:	ebb7 0a06 	subs.w	sl, r7, r6
 80065b0:	d00b      	beq.n	80065ca <_svfiprintf_r+0x76>
 80065b2:	4653      	mov	r3, sl
 80065b4:	4632      	mov	r2, r6
 80065b6:	4621      	mov	r1, r4
 80065b8:	4640      	mov	r0, r8
 80065ba:	f7ff ff71 	bl	80064a0 <__ssputs_r>
 80065be:	3001      	adds	r0, #1
 80065c0:	f000 80a4 	beq.w	800670c <_svfiprintf_r+0x1b8>
 80065c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065c6:	4453      	add	r3, sl
 80065c8:	9309      	str	r3, [sp, #36]	; 0x24
 80065ca:	783b      	ldrb	r3, [r7, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	f000 809d 	beq.w	800670c <_svfiprintf_r+0x1b8>
 80065d2:	2300      	movs	r3, #0
 80065d4:	f04f 32ff 	mov.w	r2, #4294967295
 80065d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065dc:	9304      	str	r3, [sp, #16]
 80065de:	9307      	str	r3, [sp, #28]
 80065e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065e4:	931a      	str	r3, [sp, #104]	; 0x68
 80065e6:	462f      	mov	r7, r5
 80065e8:	2205      	movs	r2, #5
 80065ea:	f817 1b01 	ldrb.w	r1, [r7], #1
 80065ee:	4850      	ldr	r0, [pc, #320]	; (8006730 <_svfiprintf_r+0x1dc>)
 80065f0:	f000 fb3e 	bl	8006c70 <memchr>
 80065f4:	9b04      	ldr	r3, [sp, #16]
 80065f6:	b9d0      	cbnz	r0, 800662e <_svfiprintf_r+0xda>
 80065f8:	06d9      	lsls	r1, r3, #27
 80065fa:	bf44      	itt	mi
 80065fc:	2220      	movmi	r2, #32
 80065fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006602:	071a      	lsls	r2, r3, #28
 8006604:	bf44      	itt	mi
 8006606:	222b      	movmi	r2, #43	; 0x2b
 8006608:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800660c:	782a      	ldrb	r2, [r5, #0]
 800660e:	2a2a      	cmp	r2, #42	; 0x2a
 8006610:	d015      	beq.n	800663e <_svfiprintf_r+0xea>
 8006612:	462f      	mov	r7, r5
 8006614:	2000      	movs	r0, #0
 8006616:	250a      	movs	r5, #10
 8006618:	9a07      	ldr	r2, [sp, #28]
 800661a:	4639      	mov	r1, r7
 800661c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006620:	3b30      	subs	r3, #48	; 0x30
 8006622:	2b09      	cmp	r3, #9
 8006624:	d94d      	bls.n	80066c2 <_svfiprintf_r+0x16e>
 8006626:	b1b8      	cbz	r0, 8006658 <_svfiprintf_r+0x104>
 8006628:	e00f      	b.n	800664a <_svfiprintf_r+0xf6>
 800662a:	462f      	mov	r7, r5
 800662c:	e7b8      	b.n	80065a0 <_svfiprintf_r+0x4c>
 800662e:	4a40      	ldr	r2, [pc, #256]	; (8006730 <_svfiprintf_r+0x1dc>)
 8006630:	463d      	mov	r5, r7
 8006632:	1a80      	subs	r0, r0, r2
 8006634:	fa0b f000 	lsl.w	r0, fp, r0
 8006638:	4318      	orrs	r0, r3
 800663a:	9004      	str	r0, [sp, #16]
 800663c:	e7d3      	b.n	80065e6 <_svfiprintf_r+0x92>
 800663e:	9a03      	ldr	r2, [sp, #12]
 8006640:	1d11      	adds	r1, r2, #4
 8006642:	6812      	ldr	r2, [r2, #0]
 8006644:	9103      	str	r1, [sp, #12]
 8006646:	2a00      	cmp	r2, #0
 8006648:	db01      	blt.n	800664e <_svfiprintf_r+0xfa>
 800664a:	9207      	str	r2, [sp, #28]
 800664c:	e004      	b.n	8006658 <_svfiprintf_r+0x104>
 800664e:	4252      	negs	r2, r2
 8006650:	f043 0302 	orr.w	r3, r3, #2
 8006654:	9207      	str	r2, [sp, #28]
 8006656:	9304      	str	r3, [sp, #16]
 8006658:	783b      	ldrb	r3, [r7, #0]
 800665a:	2b2e      	cmp	r3, #46	; 0x2e
 800665c:	d10c      	bne.n	8006678 <_svfiprintf_r+0x124>
 800665e:	787b      	ldrb	r3, [r7, #1]
 8006660:	2b2a      	cmp	r3, #42	; 0x2a
 8006662:	d133      	bne.n	80066cc <_svfiprintf_r+0x178>
 8006664:	9b03      	ldr	r3, [sp, #12]
 8006666:	3702      	adds	r7, #2
 8006668:	1d1a      	adds	r2, r3, #4
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	9203      	str	r2, [sp, #12]
 800666e:	2b00      	cmp	r3, #0
 8006670:	bfb8      	it	lt
 8006672:	f04f 33ff 	movlt.w	r3, #4294967295
 8006676:	9305      	str	r3, [sp, #20]
 8006678:	4d2e      	ldr	r5, [pc, #184]	; (8006734 <_svfiprintf_r+0x1e0>)
 800667a:	2203      	movs	r2, #3
 800667c:	7839      	ldrb	r1, [r7, #0]
 800667e:	4628      	mov	r0, r5
 8006680:	f000 faf6 	bl	8006c70 <memchr>
 8006684:	b138      	cbz	r0, 8006696 <_svfiprintf_r+0x142>
 8006686:	2340      	movs	r3, #64	; 0x40
 8006688:	1b40      	subs	r0, r0, r5
 800668a:	fa03 f000 	lsl.w	r0, r3, r0
 800668e:	9b04      	ldr	r3, [sp, #16]
 8006690:	3701      	adds	r7, #1
 8006692:	4303      	orrs	r3, r0
 8006694:	9304      	str	r3, [sp, #16]
 8006696:	7839      	ldrb	r1, [r7, #0]
 8006698:	2206      	movs	r2, #6
 800669a:	4827      	ldr	r0, [pc, #156]	; (8006738 <_svfiprintf_r+0x1e4>)
 800669c:	1c7e      	adds	r6, r7, #1
 800669e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066a2:	f000 fae5 	bl	8006c70 <memchr>
 80066a6:	2800      	cmp	r0, #0
 80066a8:	d038      	beq.n	800671c <_svfiprintf_r+0x1c8>
 80066aa:	4b24      	ldr	r3, [pc, #144]	; (800673c <_svfiprintf_r+0x1e8>)
 80066ac:	bb13      	cbnz	r3, 80066f4 <_svfiprintf_r+0x1a0>
 80066ae:	9b03      	ldr	r3, [sp, #12]
 80066b0:	3307      	adds	r3, #7
 80066b2:	f023 0307 	bic.w	r3, r3, #7
 80066b6:	3308      	adds	r3, #8
 80066b8:	9303      	str	r3, [sp, #12]
 80066ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066bc:	444b      	add	r3, r9
 80066be:	9309      	str	r3, [sp, #36]	; 0x24
 80066c0:	e76d      	b.n	800659e <_svfiprintf_r+0x4a>
 80066c2:	fb05 3202 	mla	r2, r5, r2, r3
 80066c6:	2001      	movs	r0, #1
 80066c8:	460f      	mov	r7, r1
 80066ca:	e7a6      	b.n	800661a <_svfiprintf_r+0xc6>
 80066cc:	2300      	movs	r3, #0
 80066ce:	250a      	movs	r5, #10
 80066d0:	4619      	mov	r1, r3
 80066d2:	3701      	adds	r7, #1
 80066d4:	9305      	str	r3, [sp, #20]
 80066d6:	4638      	mov	r0, r7
 80066d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066dc:	3a30      	subs	r2, #48	; 0x30
 80066de:	2a09      	cmp	r2, #9
 80066e0:	d903      	bls.n	80066ea <_svfiprintf_r+0x196>
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d0c8      	beq.n	8006678 <_svfiprintf_r+0x124>
 80066e6:	9105      	str	r1, [sp, #20]
 80066e8:	e7c6      	b.n	8006678 <_svfiprintf_r+0x124>
 80066ea:	fb05 2101 	mla	r1, r5, r1, r2
 80066ee:	2301      	movs	r3, #1
 80066f0:	4607      	mov	r7, r0
 80066f2:	e7f0      	b.n	80066d6 <_svfiprintf_r+0x182>
 80066f4:	ab03      	add	r3, sp, #12
 80066f6:	9300      	str	r3, [sp, #0]
 80066f8:	4622      	mov	r2, r4
 80066fa:	4b11      	ldr	r3, [pc, #68]	; (8006740 <_svfiprintf_r+0x1ec>)
 80066fc:	a904      	add	r1, sp, #16
 80066fe:	4640      	mov	r0, r8
 8006700:	f3af 8000 	nop.w
 8006704:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006708:	4681      	mov	r9, r0
 800670a:	d1d6      	bne.n	80066ba <_svfiprintf_r+0x166>
 800670c:	89a3      	ldrh	r3, [r4, #12]
 800670e:	065b      	lsls	r3, r3, #25
 8006710:	f53f af35 	bmi.w	800657e <_svfiprintf_r+0x2a>
 8006714:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006716:	b01d      	add	sp, #116	; 0x74
 8006718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800671c:	ab03      	add	r3, sp, #12
 800671e:	9300      	str	r3, [sp, #0]
 8006720:	4622      	mov	r2, r4
 8006722:	4b07      	ldr	r3, [pc, #28]	; (8006740 <_svfiprintf_r+0x1ec>)
 8006724:	a904      	add	r1, sp, #16
 8006726:	4640      	mov	r0, r8
 8006728:	f000 f882 	bl	8006830 <_printf_i>
 800672c:	e7ea      	b.n	8006704 <_svfiprintf_r+0x1b0>
 800672e:	bf00      	nop
 8006730:	08007770 	.word	0x08007770
 8006734:	08007776 	.word	0x08007776
 8006738:	0800777a 	.word	0x0800777a
 800673c:	00000000 	.word	0x00000000
 8006740:	080064a1 	.word	0x080064a1

08006744 <_printf_common>:
 8006744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006748:	4691      	mov	r9, r2
 800674a:	461f      	mov	r7, r3
 800674c:	688a      	ldr	r2, [r1, #8]
 800674e:	690b      	ldr	r3, [r1, #16]
 8006750:	4606      	mov	r6, r0
 8006752:	4293      	cmp	r3, r2
 8006754:	bfb8      	it	lt
 8006756:	4613      	movlt	r3, r2
 8006758:	f8c9 3000 	str.w	r3, [r9]
 800675c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006760:	460c      	mov	r4, r1
 8006762:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006766:	b112      	cbz	r2, 800676e <_printf_common+0x2a>
 8006768:	3301      	adds	r3, #1
 800676a:	f8c9 3000 	str.w	r3, [r9]
 800676e:	6823      	ldr	r3, [r4, #0]
 8006770:	0699      	lsls	r1, r3, #26
 8006772:	bf42      	ittt	mi
 8006774:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006778:	3302      	addmi	r3, #2
 800677a:	f8c9 3000 	strmi.w	r3, [r9]
 800677e:	6825      	ldr	r5, [r4, #0]
 8006780:	f015 0506 	ands.w	r5, r5, #6
 8006784:	d107      	bne.n	8006796 <_printf_common+0x52>
 8006786:	f104 0a19 	add.w	sl, r4, #25
 800678a:	68e3      	ldr	r3, [r4, #12]
 800678c:	f8d9 2000 	ldr.w	r2, [r9]
 8006790:	1a9b      	subs	r3, r3, r2
 8006792:	42ab      	cmp	r3, r5
 8006794:	dc29      	bgt.n	80067ea <_printf_common+0xa6>
 8006796:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800679a:	6822      	ldr	r2, [r4, #0]
 800679c:	3300      	adds	r3, #0
 800679e:	bf18      	it	ne
 80067a0:	2301      	movne	r3, #1
 80067a2:	0692      	lsls	r2, r2, #26
 80067a4:	d42e      	bmi.n	8006804 <_printf_common+0xc0>
 80067a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067aa:	4639      	mov	r1, r7
 80067ac:	4630      	mov	r0, r6
 80067ae:	47c0      	blx	r8
 80067b0:	3001      	adds	r0, #1
 80067b2:	d021      	beq.n	80067f8 <_printf_common+0xb4>
 80067b4:	6823      	ldr	r3, [r4, #0]
 80067b6:	68e5      	ldr	r5, [r4, #12]
 80067b8:	f003 0306 	and.w	r3, r3, #6
 80067bc:	2b04      	cmp	r3, #4
 80067be:	bf18      	it	ne
 80067c0:	2500      	movne	r5, #0
 80067c2:	f8d9 2000 	ldr.w	r2, [r9]
 80067c6:	f04f 0900 	mov.w	r9, #0
 80067ca:	bf08      	it	eq
 80067cc:	1aad      	subeq	r5, r5, r2
 80067ce:	68a3      	ldr	r3, [r4, #8]
 80067d0:	6922      	ldr	r2, [r4, #16]
 80067d2:	bf08      	it	eq
 80067d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067d8:	4293      	cmp	r3, r2
 80067da:	bfc4      	itt	gt
 80067dc:	1a9b      	subgt	r3, r3, r2
 80067de:	18ed      	addgt	r5, r5, r3
 80067e0:	341a      	adds	r4, #26
 80067e2:	454d      	cmp	r5, r9
 80067e4:	d11a      	bne.n	800681c <_printf_common+0xd8>
 80067e6:	2000      	movs	r0, #0
 80067e8:	e008      	b.n	80067fc <_printf_common+0xb8>
 80067ea:	2301      	movs	r3, #1
 80067ec:	4652      	mov	r2, sl
 80067ee:	4639      	mov	r1, r7
 80067f0:	4630      	mov	r0, r6
 80067f2:	47c0      	blx	r8
 80067f4:	3001      	adds	r0, #1
 80067f6:	d103      	bne.n	8006800 <_printf_common+0xbc>
 80067f8:	f04f 30ff 	mov.w	r0, #4294967295
 80067fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006800:	3501      	adds	r5, #1
 8006802:	e7c2      	b.n	800678a <_printf_common+0x46>
 8006804:	2030      	movs	r0, #48	; 0x30
 8006806:	18e1      	adds	r1, r4, r3
 8006808:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800680c:	1c5a      	adds	r2, r3, #1
 800680e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006812:	4422      	add	r2, r4
 8006814:	3302      	adds	r3, #2
 8006816:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800681a:	e7c4      	b.n	80067a6 <_printf_common+0x62>
 800681c:	2301      	movs	r3, #1
 800681e:	4622      	mov	r2, r4
 8006820:	4639      	mov	r1, r7
 8006822:	4630      	mov	r0, r6
 8006824:	47c0      	blx	r8
 8006826:	3001      	adds	r0, #1
 8006828:	d0e6      	beq.n	80067f8 <_printf_common+0xb4>
 800682a:	f109 0901 	add.w	r9, r9, #1
 800682e:	e7d8      	b.n	80067e2 <_printf_common+0x9e>

08006830 <_printf_i>:
 8006830:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006834:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006838:	460c      	mov	r4, r1
 800683a:	7e09      	ldrb	r1, [r1, #24]
 800683c:	b085      	sub	sp, #20
 800683e:	296e      	cmp	r1, #110	; 0x6e
 8006840:	4617      	mov	r7, r2
 8006842:	4606      	mov	r6, r0
 8006844:	4698      	mov	r8, r3
 8006846:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006848:	f000 80b3 	beq.w	80069b2 <_printf_i+0x182>
 800684c:	d822      	bhi.n	8006894 <_printf_i+0x64>
 800684e:	2963      	cmp	r1, #99	; 0x63
 8006850:	d036      	beq.n	80068c0 <_printf_i+0x90>
 8006852:	d80a      	bhi.n	800686a <_printf_i+0x3a>
 8006854:	2900      	cmp	r1, #0
 8006856:	f000 80b9 	beq.w	80069cc <_printf_i+0x19c>
 800685a:	2958      	cmp	r1, #88	; 0x58
 800685c:	f000 8083 	beq.w	8006966 <_printf_i+0x136>
 8006860:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006864:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006868:	e032      	b.n	80068d0 <_printf_i+0xa0>
 800686a:	2964      	cmp	r1, #100	; 0x64
 800686c:	d001      	beq.n	8006872 <_printf_i+0x42>
 800686e:	2969      	cmp	r1, #105	; 0x69
 8006870:	d1f6      	bne.n	8006860 <_printf_i+0x30>
 8006872:	6820      	ldr	r0, [r4, #0]
 8006874:	6813      	ldr	r3, [r2, #0]
 8006876:	0605      	lsls	r5, r0, #24
 8006878:	f103 0104 	add.w	r1, r3, #4
 800687c:	d52a      	bpl.n	80068d4 <_printf_i+0xa4>
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	6011      	str	r1, [r2, #0]
 8006882:	2b00      	cmp	r3, #0
 8006884:	da03      	bge.n	800688e <_printf_i+0x5e>
 8006886:	222d      	movs	r2, #45	; 0x2d
 8006888:	425b      	negs	r3, r3
 800688a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800688e:	486f      	ldr	r0, [pc, #444]	; (8006a4c <_printf_i+0x21c>)
 8006890:	220a      	movs	r2, #10
 8006892:	e039      	b.n	8006908 <_printf_i+0xd8>
 8006894:	2973      	cmp	r1, #115	; 0x73
 8006896:	f000 809d 	beq.w	80069d4 <_printf_i+0x1a4>
 800689a:	d808      	bhi.n	80068ae <_printf_i+0x7e>
 800689c:	296f      	cmp	r1, #111	; 0x6f
 800689e:	d020      	beq.n	80068e2 <_printf_i+0xb2>
 80068a0:	2970      	cmp	r1, #112	; 0x70
 80068a2:	d1dd      	bne.n	8006860 <_printf_i+0x30>
 80068a4:	6823      	ldr	r3, [r4, #0]
 80068a6:	f043 0320 	orr.w	r3, r3, #32
 80068aa:	6023      	str	r3, [r4, #0]
 80068ac:	e003      	b.n	80068b6 <_printf_i+0x86>
 80068ae:	2975      	cmp	r1, #117	; 0x75
 80068b0:	d017      	beq.n	80068e2 <_printf_i+0xb2>
 80068b2:	2978      	cmp	r1, #120	; 0x78
 80068b4:	d1d4      	bne.n	8006860 <_printf_i+0x30>
 80068b6:	2378      	movs	r3, #120	; 0x78
 80068b8:	4865      	ldr	r0, [pc, #404]	; (8006a50 <_printf_i+0x220>)
 80068ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80068be:	e055      	b.n	800696c <_printf_i+0x13c>
 80068c0:	6813      	ldr	r3, [r2, #0]
 80068c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068c6:	1d19      	adds	r1, r3, #4
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	6011      	str	r1, [r2, #0]
 80068cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068d0:	2301      	movs	r3, #1
 80068d2:	e08c      	b.n	80069ee <_printf_i+0x1be>
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80068da:	6011      	str	r1, [r2, #0]
 80068dc:	bf18      	it	ne
 80068de:	b21b      	sxthne	r3, r3
 80068e0:	e7cf      	b.n	8006882 <_printf_i+0x52>
 80068e2:	6813      	ldr	r3, [r2, #0]
 80068e4:	6825      	ldr	r5, [r4, #0]
 80068e6:	1d18      	adds	r0, r3, #4
 80068e8:	6010      	str	r0, [r2, #0]
 80068ea:	0628      	lsls	r0, r5, #24
 80068ec:	d501      	bpl.n	80068f2 <_printf_i+0xc2>
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	e002      	b.n	80068f8 <_printf_i+0xc8>
 80068f2:	0668      	lsls	r0, r5, #25
 80068f4:	d5fb      	bpl.n	80068ee <_printf_i+0xbe>
 80068f6:	881b      	ldrh	r3, [r3, #0]
 80068f8:	296f      	cmp	r1, #111	; 0x6f
 80068fa:	bf14      	ite	ne
 80068fc:	220a      	movne	r2, #10
 80068fe:	2208      	moveq	r2, #8
 8006900:	4852      	ldr	r0, [pc, #328]	; (8006a4c <_printf_i+0x21c>)
 8006902:	2100      	movs	r1, #0
 8006904:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006908:	6865      	ldr	r5, [r4, #4]
 800690a:	2d00      	cmp	r5, #0
 800690c:	60a5      	str	r5, [r4, #8]
 800690e:	f2c0 8095 	blt.w	8006a3c <_printf_i+0x20c>
 8006912:	6821      	ldr	r1, [r4, #0]
 8006914:	f021 0104 	bic.w	r1, r1, #4
 8006918:	6021      	str	r1, [r4, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d13d      	bne.n	800699a <_printf_i+0x16a>
 800691e:	2d00      	cmp	r5, #0
 8006920:	f040 808e 	bne.w	8006a40 <_printf_i+0x210>
 8006924:	4665      	mov	r5, ip
 8006926:	2a08      	cmp	r2, #8
 8006928:	d10b      	bne.n	8006942 <_printf_i+0x112>
 800692a:	6823      	ldr	r3, [r4, #0]
 800692c:	07db      	lsls	r3, r3, #31
 800692e:	d508      	bpl.n	8006942 <_printf_i+0x112>
 8006930:	6923      	ldr	r3, [r4, #16]
 8006932:	6862      	ldr	r2, [r4, #4]
 8006934:	429a      	cmp	r2, r3
 8006936:	bfde      	ittt	le
 8006938:	2330      	movle	r3, #48	; 0x30
 800693a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800693e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006942:	ebac 0305 	sub.w	r3, ip, r5
 8006946:	6123      	str	r3, [r4, #16]
 8006948:	f8cd 8000 	str.w	r8, [sp]
 800694c:	463b      	mov	r3, r7
 800694e:	aa03      	add	r2, sp, #12
 8006950:	4621      	mov	r1, r4
 8006952:	4630      	mov	r0, r6
 8006954:	f7ff fef6 	bl	8006744 <_printf_common>
 8006958:	3001      	adds	r0, #1
 800695a:	d14d      	bne.n	80069f8 <_printf_i+0x1c8>
 800695c:	f04f 30ff 	mov.w	r0, #4294967295
 8006960:	b005      	add	sp, #20
 8006962:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006966:	4839      	ldr	r0, [pc, #228]	; (8006a4c <_printf_i+0x21c>)
 8006968:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800696c:	6813      	ldr	r3, [r2, #0]
 800696e:	6821      	ldr	r1, [r4, #0]
 8006970:	1d1d      	adds	r5, r3, #4
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	6015      	str	r5, [r2, #0]
 8006976:	060a      	lsls	r2, r1, #24
 8006978:	d50b      	bpl.n	8006992 <_printf_i+0x162>
 800697a:	07ca      	lsls	r2, r1, #31
 800697c:	bf44      	itt	mi
 800697e:	f041 0120 	orrmi.w	r1, r1, #32
 8006982:	6021      	strmi	r1, [r4, #0]
 8006984:	b91b      	cbnz	r3, 800698e <_printf_i+0x15e>
 8006986:	6822      	ldr	r2, [r4, #0]
 8006988:	f022 0220 	bic.w	r2, r2, #32
 800698c:	6022      	str	r2, [r4, #0]
 800698e:	2210      	movs	r2, #16
 8006990:	e7b7      	b.n	8006902 <_printf_i+0xd2>
 8006992:	064d      	lsls	r5, r1, #25
 8006994:	bf48      	it	mi
 8006996:	b29b      	uxthmi	r3, r3
 8006998:	e7ef      	b.n	800697a <_printf_i+0x14a>
 800699a:	4665      	mov	r5, ip
 800699c:	fbb3 f1f2 	udiv	r1, r3, r2
 80069a0:	fb02 3311 	mls	r3, r2, r1, r3
 80069a4:	5cc3      	ldrb	r3, [r0, r3]
 80069a6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80069aa:	460b      	mov	r3, r1
 80069ac:	2900      	cmp	r1, #0
 80069ae:	d1f5      	bne.n	800699c <_printf_i+0x16c>
 80069b0:	e7b9      	b.n	8006926 <_printf_i+0xf6>
 80069b2:	6813      	ldr	r3, [r2, #0]
 80069b4:	6825      	ldr	r5, [r4, #0]
 80069b6:	1d18      	adds	r0, r3, #4
 80069b8:	6961      	ldr	r1, [r4, #20]
 80069ba:	6010      	str	r0, [r2, #0]
 80069bc:	0628      	lsls	r0, r5, #24
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	d501      	bpl.n	80069c6 <_printf_i+0x196>
 80069c2:	6019      	str	r1, [r3, #0]
 80069c4:	e002      	b.n	80069cc <_printf_i+0x19c>
 80069c6:	066a      	lsls	r2, r5, #25
 80069c8:	d5fb      	bpl.n	80069c2 <_printf_i+0x192>
 80069ca:	8019      	strh	r1, [r3, #0]
 80069cc:	2300      	movs	r3, #0
 80069ce:	4665      	mov	r5, ip
 80069d0:	6123      	str	r3, [r4, #16]
 80069d2:	e7b9      	b.n	8006948 <_printf_i+0x118>
 80069d4:	6813      	ldr	r3, [r2, #0]
 80069d6:	1d19      	adds	r1, r3, #4
 80069d8:	6011      	str	r1, [r2, #0]
 80069da:	681d      	ldr	r5, [r3, #0]
 80069dc:	6862      	ldr	r2, [r4, #4]
 80069de:	2100      	movs	r1, #0
 80069e0:	4628      	mov	r0, r5
 80069e2:	f000 f945 	bl	8006c70 <memchr>
 80069e6:	b108      	cbz	r0, 80069ec <_printf_i+0x1bc>
 80069e8:	1b40      	subs	r0, r0, r5
 80069ea:	6060      	str	r0, [r4, #4]
 80069ec:	6863      	ldr	r3, [r4, #4]
 80069ee:	6123      	str	r3, [r4, #16]
 80069f0:	2300      	movs	r3, #0
 80069f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069f6:	e7a7      	b.n	8006948 <_printf_i+0x118>
 80069f8:	6923      	ldr	r3, [r4, #16]
 80069fa:	462a      	mov	r2, r5
 80069fc:	4639      	mov	r1, r7
 80069fe:	4630      	mov	r0, r6
 8006a00:	47c0      	blx	r8
 8006a02:	3001      	adds	r0, #1
 8006a04:	d0aa      	beq.n	800695c <_printf_i+0x12c>
 8006a06:	6823      	ldr	r3, [r4, #0]
 8006a08:	079b      	lsls	r3, r3, #30
 8006a0a:	d413      	bmi.n	8006a34 <_printf_i+0x204>
 8006a0c:	68e0      	ldr	r0, [r4, #12]
 8006a0e:	9b03      	ldr	r3, [sp, #12]
 8006a10:	4298      	cmp	r0, r3
 8006a12:	bfb8      	it	lt
 8006a14:	4618      	movlt	r0, r3
 8006a16:	e7a3      	b.n	8006960 <_printf_i+0x130>
 8006a18:	2301      	movs	r3, #1
 8006a1a:	464a      	mov	r2, r9
 8006a1c:	4639      	mov	r1, r7
 8006a1e:	4630      	mov	r0, r6
 8006a20:	47c0      	blx	r8
 8006a22:	3001      	adds	r0, #1
 8006a24:	d09a      	beq.n	800695c <_printf_i+0x12c>
 8006a26:	3501      	adds	r5, #1
 8006a28:	68e3      	ldr	r3, [r4, #12]
 8006a2a:	9a03      	ldr	r2, [sp, #12]
 8006a2c:	1a9b      	subs	r3, r3, r2
 8006a2e:	42ab      	cmp	r3, r5
 8006a30:	dcf2      	bgt.n	8006a18 <_printf_i+0x1e8>
 8006a32:	e7eb      	b.n	8006a0c <_printf_i+0x1dc>
 8006a34:	2500      	movs	r5, #0
 8006a36:	f104 0919 	add.w	r9, r4, #25
 8006a3a:	e7f5      	b.n	8006a28 <_printf_i+0x1f8>
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1ac      	bne.n	800699a <_printf_i+0x16a>
 8006a40:	7803      	ldrb	r3, [r0, #0]
 8006a42:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a4a:	e76c      	b.n	8006926 <_printf_i+0xf6>
 8006a4c:	08007781 	.word	0x08007781
 8006a50:	08007792 	.word	0x08007792

08006a54 <siscanf>:
 8006a54:	b40e      	push	{r1, r2, r3}
 8006a56:	f44f 7201 	mov.w	r2, #516	; 0x204
 8006a5a:	b530      	push	{r4, r5, lr}
 8006a5c:	b09c      	sub	sp, #112	; 0x70
 8006a5e:	ac1f      	add	r4, sp, #124	; 0x7c
 8006a60:	f854 5b04 	ldr.w	r5, [r4], #4
 8006a64:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006a68:	9002      	str	r0, [sp, #8]
 8006a6a:	9006      	str	r0, [sp, #24]
 8006a6c:	f7f9 fb7a 	bl	8000164 <strlen>
 8006a70:	4b0b      	ldr	r3, [pc, #44]	; (8006aa0 <siscanf+0x4c>)
 8006a72:	9003      	str	r0, [sp, #12]
 8006a74:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a76:	2300      	movs	r3, #0
 8006a78:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a7a:	9314      	str	r3, [sp, #80]	; 0x50
 8006a7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006a80:	9007      	str	r0, [sp, #28]
 8006a82:	4808      	ldr	r0, [pc, #32]	; (8006aa4 <siscanf+0x50>)
 8006a84:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006a88:	462a      	mov	r2, r5
 8006a8a:	4623      	mov	r3, r4
 8006a8c:	a902      	add	r1, sp, #8
 8006a8e:	6800      	ldr	r0, [r0, #0]
 8006a90:	9401      	str	r4, [sp, #4]
 8006a92:	f000 f99f 	bl	8006dd4 <__ssvfiscanf_r>
 8006a96:	b01c      	add	sp, #112	; 0x70
 8006a98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a9c:	b003      	add	sp, #12
 8006a9e:	4770      	bx	lr
 8006aa0:	08006aa9 	.word	0x08006aa9
 8006aa4:	20000064 	.word	0x20000064

08006aa8 <__seofread>:
 8006aa8:	2000      	movs	r0, #0
 8006aaa:	4770      	bx	lr

08006aac <strcpy>:
 8006aac:	4603      	mov	r3, r0
 8006aae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ab2:	f803 2b01 	strb.w	r2, [r3], #1
 8006ab6:	2a00      	cmp	r2, #0
 8006ab8:	d1f9      	bne.n	8006aae <strcpy+0x2>
 8006aba:	4770      	bx	lr

08006abc <strncmp>:
 8006abc:	b510      	push	{r4, lr}
 8006abe:	b16a      	cbz	r2, 8006adc <strncmp+0x20>
 8006ac0:	3901      	subs	r1, #1
 8006ac2:	1884      	adds	r4, r0, r2
 8006ac4:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006ac8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d103      	bne.n	8006ad8 <strncmp+0x1c>
 8006ad0:	42a0      	cmp	r0, r4
 8006ad2:	d001      	beq.n	8006ad8 <strncmp+0x1c>
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1f5      	bne.n	8006ac4 <strncmp+0x8>
 8006ad8:	1a98      	subs	r0, r3, r2
 8006ada:	bd10      	pop	{r4, pc}
 8006adc:	4610      	mov	r0, r2
 8006ade:	e7fc      	b.n	8006ada <strncmp+0x1e>

08006ae0 <_strtoul_l.isra.0>:
 8006ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ae4:	4680      	mov	r8, r0
 8006ae6:	4689      	mov	r9, r1
 8006ae8:	4692      	mov	sl, r2
 8006aea:	461e      	mov	r6, r3
 8006aec:	460f      	mov	r7, r1
 8006aee:	463d      	mov	r5, r7
 8006af0:	9808      	ldr	r0, [sp, #32]
 8006af2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006af6:	f000 f897 	bl	8006c28 <__locale_ctype_ptr_l>
 8006afa:	4420      	add	r0, r4
 8006afc:	7843      	ldrb	r3, [r0, #1]
 8006afe:	f013 0308 	ands.w	r3, r3, #8
 8006b02:	d130      	bne.n	8006b66 <_strtoul_l.isra.0+0x86>
 8006b04:	2c2d      	cmp	r4, #45	; 0x2d
 8006b06:	d130      	bne.n	8006b6a <_strtoul_l.isra.0+0x8a>
 8006b08:	2101      	movs	r1, #1
 8006b0a:	787c      	ldrb	r4, [r7, #1]
 8006b0c:	1cbd      	adds	r5, r7, #2
 8006b0e:	2e00      	cmp	r6, #0
 8006b10:	d05c      	beq.n	8006bcc <_strtoul_l.isra.0+0xec>
 8006b12:	2e10      	cmp	r6, #16
 8006b14:	d109      	bne.n	8006b2a <_strtoul_l.isra.0+0x4a>
 8006b16:	2c30      	cmp	r4, #48	; 0x30
 8006b18:	d107      	bne.n	8006b2a <_strtoul_l.isra.0+0x4a>
 8006b1a:	782b      	ldrb	r3, [r5, #0]
 8006b1c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006b20:	2b58      	cmp	r3, #88	; 0x58
 8006b22:	d14e      	bne.n	8006bc2 <_strtoul_l.isra.0+0xe2>
 8006b24:	2610      	movs	r6, #16
 8006b26:	786c      	ldrb	r4, [r5, #1]
 8006b28:	3502      	adds	r5, #2
 8006b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b2e:	fbb2 f2f6 	udiv	r2, r2, r6
 8006b32:	2300      	movs	r3, #0
 8006b34:	fb06 fc02 	mul.w	ip, r6, r2
 8006b38:	4618      	mov	r0, r3
 8006b3a:	ea6f 0c0c 	mvn.w	ip, ip
 8006b3e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006b42:	2f09      	cmp	r7, #9
 8006b44:	d817      	bhi.n	8006b76 <_strtoul_l.isra.0+0x96>
 8006b46:	463c      	mov	r4, r7
 8006b48:	42a6      	cmp	r6, r4
 8006b4a:	dd23      	ble.n	8006b94 <_strtoul_l.isra.0+0xb4>
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	db1e      	blt.n	8006b8e <_strtoul_l.isra.0+0xae>
 8006b50:	4282      	cmp	r2, r0
 8006b52:	d31c      	bcc.n	8006b8e <_strtoul_l.isra.0+0xae>
 8006b54:	d101      	bne.n	8006b5a <_strtoul_l.isra.0+0x7a>
 8006b56:	45a4      	cmp	ip, r4
 8006b58:	db19      	blt.n	8006b8e <_strtoul_l.isra.0+0xae>
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	fb00 4006 	mla	r0, r0, r6, r4
 8006b60:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b64:	e7eb      	b.n	8006b3e <_strtoul_l.isra.0+0x5e>
 8006b66:	462f      	mov	r7, r5
 8006b68:	e7c1      	b.n	8006aee <_strtoul_l.isra.0+0xe>
 8006b6a:	2c2b      	cmp	r4, #43	; 0x2b
 8006b6c:	bf04      	itt	eq
 8006b6e:	1cbd      	addeq	r5, r7, #2
 8006b70:	787c      	ldrbeq	r4, [r7, #1]
 8006b72:	4619      	mov	r1, r3
 8006b74:	e7cb      	b.n	8006b0e <_strtoul_l.isra.0+0x2e>
 8006b76:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006b7a:	2f19      	cmp	r7, #25
 8006b7c:	d801      	bhi.n	8006b82 <_strtoul_l.isra.0+0xa2>
 8006b7e:	3c37      	subs	r4, #55	; 0x37
 8006b80:	e7e2      	b.n	8006b48 <_strtoul_l.isra.0+0x68>
 8006b82:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006b86:	2f19      	cmp	r7, #25
 8006b88:	d804      	bhi.n	8006b94 <_strtoul_l.isra.0+0xb4>
 8006b8a:	3c57      	subs	r4, #87	; 0x57
 8006b8c:	e7dc      	b.n	8006b48 <_strtoul_l.isra.0+0x68>
 8006b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b92:	e7e5      	b.n	8006b60 <_strtoul_l.isra.0+0x80>
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	da09      	bge.n	8006bac <_strtoul_l.isra.0+0xcc>
 8006b98:	2322      	movs	r3, #34	; 0x22
 8006b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b9e:	f8c8 3000 	str.w	r3, [r8]
 8006ba2:	f1ba 0f00 	cmp.w	sl, #0
 8006ba6:	d107      	bne.n	8006bb8 <_strtoul_l.isra.0+0xd8>
 8006ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bac:	b101      	cbz	r1, 8006bb0 <_strtoul_l.isra.0+0xd0>
 8006bae:	4240      	negs	r0, r0
 8006bb0:	f1ba 0f00 	cmp.w	sl, #0
 8006bb4:	d0f8      	beq.n	8006ba8 <_strtoul_l.isra.0+0xc8>
 8006bb6:	b10b      	cbz	r3, 8006bbc <_strtoul_l.isra.0+0xdc>
 8006bb8:	f105 39ff 	add.w	r9, r5, #4294967295
 8006bbc:	f8ca 9000 	str.w	r9, [sl]
 8006bc0:	e7f2      	b.n	8006ba8 <_strtoul_l.isra.0+0xc8>
 8006bc2:	2430      	movs	r4, #48	; 0x30
 8006bc4:	2e00      	cmp	r6, #0
 8006bc6:	d1b0      	bne.n	8006b2a <_strtoul_l.isra.0+0x4a>
 8006bc8:	2608      	movs	r6, #8
 8006bca:	e7ae      	b.n	8006b2a <_strtoul_l.isra.0+0x4a>
 8006bcc:	2c30      	cmp	r4, #48	; 0x30
 8006bce:	d0a4      	beq.n	8006b1a <_strtoul_l.isra.0+0x3a>
 8006bd0:	260a      	movs	r6, #10
 8006bd2:	e7aa      	b.n	8006b2a <_strtoul_l.isra.0+0x4a>

08006bd4 <_strtoul_r>:
 8006bd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006bd6:	4c06      	ldr	r4, [pc, #24]	; (8006bf0 <_strtoul_r+0x1c>)
 8006bd8:	4d06      	ldr	r5, [pc, #24]	; (8006bf4 <_strtoul_r+0x20>)
 8006bda:	6824      	ldr	r4, [r4, #0]
 8006bdc:	6a24      	ldr	r4, [r4, #32]
 8006bde:	2c00      	cmp	r4, #0
 8006be0:	bf08      	it	eq
 8006be2:	462c      	moveq	r4, r5
 8006be4:	9400      	str	r4, [sp, #0]
 8006be6:	f7ff ff7b 	bl	8006ae0 <_strtoul_l.isra.0>
 8006bea:	b003      	add	sp, #12
 8006bec:	bd30      	pop	{r4, r5, pc}
 8006bee:	bf00      	nop
 8006bf0:	20000064 	.word	0x20000064
 8006bf4:	20000128 	.word	0x20000128

08006bf8 <strtoul>:
 8006bf8:	4b08      	ldr	r3, [pc, #32]	; (8006c1c <strtoul+0x24>)
 8006bfa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006bfc:	681c      	ldr	r4, [r3, #0]
 8006bfe:	4d08      	ldr	r5, [pc, #32]	; (8006c20 <strtoul+0x28>)
 8006c00:	6a23      	ldr	r3, [r4, #32]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	bf08      	it	eq
 8006c06:	462b      	moveq	r3, r5
 8006c08:	9300      	str	r3, [sp, #0]
 8006c0a:	4613      	mov	r3, r2
 8006c0c:	460a      	mov	r2, r1
 8006c0e:	4601      	mov	r1, r0
 8006c10:	4620      	mov	r0, r4
 8006c12:	f7ff ff65 	bl	8006ae0 <_strtoul_l.isra.0>
 8006c16:	b003      	add	sp, #12
 8006c18:	bd30      	pop	{r4, r5, pc}
 8006c1a:	bf00      	nop
 8006c1c:	20000064 	.word	0x20000064
 8006c20:	20000128 	.word	0x20000128

08006c24 <__env_lock>:
 8006c24:	4770      	bx	lr

08006c26 <__env_unlock>:
 8006c26:	4770      	bx	lr

08006c28 <__locale_ctype_ptr_l>:
 8006c28:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006c2c:	4770      	bx	lr
	...

08006c30 <__locale_ctype_ptr>:
 8006c30:	4b04      	ldr	r3, [pc, #16]	; (8006c44 <__locale_ctype_ptr+0x14>)
 8006c32:	4a05      	ldr	r2, [pc, #20]	; (8006c48 <__locale_ctype_ptr+0x18>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	6a1b      	ldr	r3, [r3, #32]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	bf08      	it	eq
 8006c3c:	4613      	moveq	r3, r2
 8006c3e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8006c42:	4770      	bx	lr
 8006c44:	20000064 	.word	0x20000064
 8006c48:	20000128 	.word	0x20000128

08006c4c <__ascii_mbtowc>:
 8006c4c:	b082      	sub	sp, #8
 8006c4e:	b901      	cbnz	r1, 8006c52 <__ascii_mbtowc+0x6>
 8006c50:	a901      	add	r1, sp, #4
 8006c52:	b142      	cbz	r2, 8006c66 <__ascii_mbtowc+0x1a>
 8006c54:	b14b      	cbz	r3, 8006c6a <__ascii_mbtowc+0x1e>
 8006c56:	7813      	ldrb	r3, [r2, #0]
 8006c58:	600b      	str	r3, [r1, #0]
 8006c5a:	7812      	ldrb	r2, [r2, #0]
 8006c5c:	1c10      	adds	r0, r2, #0
 8006c5e:	bf18      	it	ne
 8006c60:	2001      	movne	r0, #1
 8006c62:	b002      	add	sp, #8
 8006c64:	4770      	bx	lr
 8006c66:	4610      	mov	r0, r2
 8006c68:	e7fb      	b.n	8006c62 <__ascii_mbtowc+0x16>
 8006c6a:	f06f 0001 	mvn.w	r0, #1
 8006c6e:	e7f8      	b.n	8006c62 <__ascii_mbtowc+0x16>

08006c70 <memchr>:
 8006c70:	b510      	push	{r4, lr}
 8006c72:	b2c9      	uxtb	r1, r1
 8006c74:	4402      	add	r2, r0
 8006c76:	4290      	cmp	r0, r2
 8006c78:	4603      	mov	r3, r0
 8006c7a:	d101      	bne.n	8006c80 <memchr+0x10>
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	e003      	b.n	8006c88 <memchr+0x18>
 8006c80:	781c      	ldrb	r4, [r3, #0]
 8006c82:	3001      	adds	r0, #1
 8006c84:	428c      	cmp	r4, r1
 8006c86:	d1f6      	bne.n	8006c76 <memchr+0x6>
 8006c88:	4618      	mov	r0, r3
 8006c8a:	bd10      	pop	{r4, pc}

08006c8c <memcpy>:
 8006c8c:	b510      	push	{r4, lr}
 8006c8e:	1e43      	subs	r3, r0, #1
 8006c90:	440a      	add	r2, r1
 8006c92:	4291      	cmp	r1, r2
 8006c94:	d100      	bne.n	8006c98 <memcpy+0xc>
 8006c96:	bd10      	pop	{r4, pc}
 8006c98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ca0:	e7f7      	b.n	8006c92 <memcpy+0x6>

08006ca2 <memmove>:
 8006ca2:	4288      	cmp	r0, r1
 8006ca4:	b510      	push	{r4, lr}
 8006ca6:	eb01 0302 	add.w	r3, r1, r2
 8006caa:	d807      	bhi.n	8006cbc <memmove+0x1a>
 8006cac:	1e42      	subs	r2, r0, #1
 8006cae:	4299      	cmp	r1, r3
 8006cb0:	d00a      	beq.n	8006cc8 <memmove+0x26>
 8006cb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cb6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006cba:	e7f8      	b.n	8006cae <memmove+0xc>
 8006cbc:	4283      	cmp	r3, r0
 8006cbe:	d9f5      	bls.n	8006cac <memmove+0xa>
 8006cc0:	1881      	adds	r1, r0, r2
 8006cc2:	1ad2      	subs	r2, r2, r3
 8006cc4:	42d3      	cmn	r3, r2
 8006cc6:	d100      	bne.n	8006cca <memmove+0x28>
 8006cc8:	bd10      	pop	{r4, pc}
 8006cca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006cce:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006cd2:	e7f7      	b.n	8006cc4 <memmove+0x22>

08006cd4 <_realloc_r>:
 8006cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd6:	4607      	mov	r7, r0
 8006cd8:	4614      	mov	r4, r2
 8006cda:	460e      	mov	r6, r1
 8006cdc:	b921      	cbnz	r1, 8006ce8 <_realloc_r+0x14>
 8006cde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006ce2:	4611      	mov	r1, r2
 8006ce4:	f7ff b802 	b.w	8005cec <_malloc_r>
 8006ce8:	b922      	cbnz	r2, 8006cf4 <_realloc_r+0x20>
 8006cea:	f7fe ffb3 	bl	8005c54 <_free_r>
 8006cee:	4625      	mov	r5, r4
 8006cf0:	4628      	mov	r0, r5
 8006cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cf4:	f000 fc19 	bl	800752a <_malloc_usable_size_r>
 8006cf8:	42a0      	cmp	r0, r4
 8006cfa:	d20f      	bcs.n	8006d1c <_realloc_r+0x48>
 8006cfc:	4621      	mov	r1, r4
 8006cfe:	4638      	mov	r0, r7
 8006d00:	f7fe fff4 	bl	8005cec <_malloc_r>
 8006d04:	4605      	mov	r5, r0
 8006d06:	2800      	cmp	r0, #0
 8006d08:	d0f2      	beq.n	8006cf0 <_realloc_r+0x1c>
 8006d0a:	4631      	mov	r1, r6
 8006d0c:	4622      	mov	r2, r4
 8006d0e:	f7ff ffbd 	bl	8006c8c <memcpy>
 8006d12:	4631      	mov	r1, r6
 8006d14:	4638      	mov	r0, r7
 8006d16:	f7fe ff9d 	bl	8005c54 <_free_r>
 8006d1a:	e7e9      	b.n	8006cf0 <_realloc_r+0x1c>
 8006d1c:	4635      	mov	r5, r6
 8006d1e:	e7e7      	b.n	8006cf0 <_realloc_r+0x1c>

08006d20 <_sungetc_r>:
 8006d20:	b538      	push	{r3, r4, r5, lr}
 8006d22:	1c4b      	adds	r3, r1, #1
 8006d24:	4614      	mov	r4, r2
 8006d26:	d103      	bne.n	8006d30 <_sungetc_r+0x10>
 8006d28:	f04f 35ff 	mov.w	r5, #4294967295
 8006d2c:	4628      	mov	r0, r5
 8006d2e:	bd38      	pop	{r3, r4, r5, pc}
 8006d30:	8993      	ldrh	r3, [r2, #12]
 8006d32:	b2cd      	uxtb	r5, r1
 8006d34:	f023 0320 	bic.w	r3, r3, #32
 8006d38:	8193      	strh	r3, [r2, #12]
 8006d3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d3c:	6852      	ldr	r2, [r2, #4]
 8006d3e:	b18b      	cbz	r3, 8006d64 <_sungetc_r+0x44>
 8006d40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006d42:	4293      	cmp	r3, r2
 8006d44:	dd08      	ble.n	8006d58 <_sungetc_r+0x38>
 8006d46:	6823      	ldr	r3, [r4, #0]
 8006d48:	1e5a      	subs	r2, r3, #1
 8006d4a:	6022      	str	r2, [r4, #0]
 8006d4c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006d50:	6863      	ldr	r3, [r4, #4]
 8006d52:	3301      	adds	r3, #1
 8006d54:	6063      	str	r3, [r4, #4]
 8006d56:	e7e9      	b.n	8006d2c <_sungetc_r+0xc>
 8006d58:	4621      	mov	r1, r4
 8006d5a:	f000 fba1 	bl	80074a0 <__submore>
 8006d5e:	2800      	cmp	r0, #0
 8006d60:	d0f1      	beq.n	8006d46 <_sungetc_r+0x26>
 8006d62:	e7e1      	b.n	8006d28 <_sungetc_r+0x8>
 8006d64:	6921      	ldr	r1, [r4, #16]
 8006d66:	6823      	ldr	r3, [r4, #0]
 8006d68:	b151      	cbz	r1, 8006d80 <_sungetc_r+0x60>
 8006d6a:	4299      	cmp	r1, r3
 8006d6c:	d208      	bcs.n	8006d80 <_sungetc_r+0x60>
 8006d6e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8006d72:	42a9      	cmp	r1, r5
 8006d74:	d104      	bne.n	8006d80 <_sungetc_r+0x60>
 8006d76:	3b01      	subs	r3, #1
 8006d78:	3201      	adds	r2, #1
 8006d7a:	6023      	str	r3, [r4, #0]
 8006d7c:	6062      	str	r2, [r4, #4]
 8006d7e:	e7d5      	b.n	8006d2c <_sungetc_r+0xc>
 8006d80:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8006d84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d88:	6363      	str	r3, [r4, #52]	; 0x34
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	63a3      	str	r3, [r4, #56]	; 0x38
 8006d8e:	4623      	mov	r3, r4
 8006d90:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006d94:	6023      	str	r3, [r4, #0]
 8006d96:	2301      	movs	r3, #1
 8006d98:	e7dc      	b.n	8006d54 <_sungetc_r+0x34>

08006d9a <__ssrefill_r>:
 8006d9a:	b510      	push	{r4, lr}
 8006d9c:	460c      	mov	r4, r1
 8006d9e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006da0:	b169      	cbz	r1, 8006dbe <__ssrefill_r+0x24>
 8006da2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006da6:	4299      	cmp	r1, r3
 8006da8:	d001      	beq.n	8006dae <__ssrefill_r+0x14>
 8006daa:	f7fe ff53 	bl	8005c54 <_free_r>
 8006dae:	2000      	movs	r0, #0
 8006db0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006db2:	6360      	str	r0, [r4, #52]	; 0x34
 8006db4:	6063      	str	r3, [r4, #4]
 8006db6:	b113      	cbz	r3, 8006dbe <__ssrefill_r+0x24>
 8006db8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006dba:	6023      	str	r3, [r4, #0]
 8006dbc:	bd10      	pop	{r4, pc}
 8006dbe:	6923      	ldr	r3, [r4, #16]
 8006dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006dc4:	6023      	str	r3, [r4, #0]
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	6063      	str	r3, [r4, #4]
 8006dca:	89a3      	ldrh	r3, [r4, #12]
 8006dcc:	f043 0320 	orr.w	r3, r3, #32
 8006dd0:	81a3      	strh	r3, [r4, #12]
 8006dd2:	e7f3      	b.n	8006dbc <__ssrefill_r+0x22>

08006dd4 <__ssvfiscanf_r>:
 8006dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dd8:	460c      	mov	r4, r1
 8006dda:	2100      	movs	r1, #0
 8006ddc:	4606      	mov	r6, r0
 8006dde:	4692      	mov	sl, r2
 8006de0:	270a      	movs	r7, #10
 8006de2:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8006de6:	9144      	str	r1, [sp, #272]	; 0x110
 8006de8:	9145      	str	r1, [sp, #276]	; 0x114
 8006dea:	499e      	ldr	r1, [pc, #632]	; (8007064 <__ssvfiscanf_r+0x290>)
 8006dec:	f10d 0804 	add.w	r8, sp, #4
 8006df0:	91a0      	str	r1, [sp, #640]	; 0x280
 8006df2:	499d      	ldr	r1, [pc, #628]	; (8007068 <__ssvfiscanf_r+0x294>)
 8006df4:	f8df 9274 	ldr.w	r9, [pc, #628]	; 800706c <__ssvfiscanf_r+0x298>
 8006df8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8006dfc:	91a1      	str	r1, [sp, #644]	; 0x284
 8006dfe:	9300      	str	r3, [sp, #0]
 8006e00:	f89a 3000 	ldrb.w	r3, [sl]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	f000 812a 	beq.w	800705e <__ssvfiscanf_r+0x28a>
 8006e0a:	4655      	mov	r5, sl
 8006e0c:	f7ff ff10 	bl	8006c30 <__locale_ctype_ptr>
 8006e10:	f815 bb01 	ldrb.w	fp, [r5], #1
 8006e14:	4458      	add	r0, fp
 8006e16:	7843      	ldrb	r3, [r0, #1]
 8006e18:	f013 0308 	ands.w	r3, r3, #8
 8006e1c:	d01c      	beq.n	8006e58 <__ssvfiscanf_r+0x84>
 8006e1e:	6863      	ldr	r3, [r4, #4]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	dd12      	ble.n	8006e4a <__ssvfiscanf_r+0x76>
 8006e24:	f7ff ff04 	bl	8006c30 <__locale_ctype_ptr>
 8006e28:	6823      	ldr	r3, [r4, #0]
 8006e2a:	781a      	ldrb	r2, [r3, #0]
 8006e2c:	4410      	add	r0, r2
 8006e2e:	7842      	ldrb	r2, [r0, #1]
 8006e30:	0712      	lsls	r2, r2, #28
 8006e32:	d401      	bmi.n	8006e38 <__ssvfiscanf_r+0x64>
 8006e34:	46aa      	mov	sl, r5
 8006e36:	e7e3      	b.n	8006e00 <__ssvfiscanf_r+0x2c>
 8006e38:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	3201      	adds	r2, #1
 8006e3e:	9245      	str	r2, [sp, #276]	; 0x114
 8006e40:	6862      	ldr	r2, [r4, #4]
 8006e42:	6023      	str	r3, [r4, #0]
 8006e44:	3a01      	subs	r2, #1
 8006e46:	6062      	str	r2, [r4, #4]
 8006e48:	e7e9      	b.n	8006e1e <__ssvfiscanf_r+0x4a>
 8006e4a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006e4c:	4621      	mov	r1, r4
 8006e4e:	4630      	mov	r0, r6
 8006e50:	4798      	blx	r3
 8006e52:	2800      	cmp	r0, #0
 8006e54:	d0e6      	beq.n	8006e24 <__ssvfiscanf_r+0x50>
 8006e56:	e7ed      	b.n	8006e34 <__ssvfiscanf_r+0x60>
 8006e58:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8006e5c:	f040 8082 	bne.w	8006f64 <__ssvfiscanf_r+0x190>
 8006e60:	9343      	str	r3, [sp, #268]	; 0x10c
 8006e62:	9341      	str	r3, [sp, #260]	; 0x104
 8006e64:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8006e68:	2b2a      	cmp	r3, #42	; 0x2a
 8006e6a:	d103      	bne.n	8006e74 <__ssvfiscanf_r+0xa0>
 8006e6c:	2310      	movs	r3, #16
 8006e6e:	f10a 0502 	add.w	r5, sl, #2
 8006e72:	9341      	str	r3, [sp, #260]	; 0x104
 8006e74:	46aa      	mov	sl, r5
 8006e76:	f815 1b01 	ldrb.w	r1, [r5], #1
 8006e7a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8006e7e:	2a09      	cmp	r2, #9
 8006e80:	d922      	bls.n	8006ec8 <__ssvfiscanf_r+0xf4>
 8006e82:	2203      	movs	r2, #3
 8006e84:	4879      	ldr	r0, [pc, #484]	; (800706c <__ssvfiscanf_r+0x298>)
 8006e86:	f7ff fef3 	bl	8006c70 <memchr>
 8006e8a:	b138      	cbz	r0, 8006e9c <__ssvfiscanf_r+0xc8>
 8006e8c:	eba0 0309 	sub.w	r3, r0, r9
 8006e90:	2001      	movs	r0, #1
 8006e92:	46aa      	mov	sl, r5
 8006e94:	4098      	lsls	r0, r3
 8006e96:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006e98:	4318      	orrs	r0, r3
 8006e9a:	9041      	str	r0, [sp, #260]	; 0x104
 8006e9c:	f89a 3000 	ldrb.w	r3, [sl]
 8006ea0:	f10a 0501 	add.w	r5, sl, #1
 8006ea4:	2b67      	cmp	r3, #103	; 0x67
 8006ea6:	d82b      	bhi.n	8006f00 <__ssvfiscanf_r+0x12c>
 8006ea8:	2b65      	cmp	r3, #101	; 0x65
 8006eaa:	f080 809f 	bcs.w	8006fec <__ssvfiscanf_r+0x218>
 8006eae:	2b47      	cmp	r3, #71	; 0x47
 8006eb0:	d810      	bhi.n	8006ed4 <__ssvfiscanf_r+0x100>
 8006eb2:	2b45      	cmp	r3, #69	; 0x45
 8006eb4:	f080 809a 	bcs.w	8006fec <__ssvfiscanf_r+0x218>
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d06c      	beq.n	8006f96 <__ssvfiscanf_r+0x1c2>
 8006ebc:	2b25      	cmp	r3, #37	; 0x25
 8006ebe:	d051      	beq.n	8006f64 <__ssvfiscanf_r+0x190>
 8006ec0:	2303      	movs	r3, #3
 8006ec2:	9742      	str	r7, [sp, #264]	; 0x108
 8006ec4:	9347      	str	r3, [sp, #284]	; 0x11c
 8006ec6:	e027      	b.n	8006f18 <__ssvfiscanf_r+0x144>
 8006ec8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8006eca:	fb07 1303 	mla	r3, r7, r3, r1
 8006ece:	3b30      	subs	r3, #48	; 0x30
 8006ed0:	9343      	str	r3, [sp, #268]	; 0x10c
 8006ed2:	e7cf      	b.n	8006e74 <__ssvfiscanf_r+0xa0>
 8006ed4:	2b5b      	cmp	r3, #91	; 0x5b
 8006ed6:	d06a      	beq.n	8006fae <__ssvfiscanf_r+0x1da>
 8006ed8:	d80c      	bhi.n	8006ef4 <__ssvfiscanf_r+0x120>
 8006eda:	2b58      	cmp	r3, #88	; 0x58
 8006edc:	d1f0      	bne.n	8006ec0 <__ssvfiscanf_r+0xec>
 8006ede:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006ee0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ee4:	9241      	str	r2, [sp, #260]	; 0x104
 8006ee6:	2210      	movs	r2, #16
 8006ee8:	9242      	str	r2, [sp, #264]	; 0x108
 8006eea:	2b6e      	cmp	r3, #110	; 0x6e
 8006eec:	bf8c      	ite	hi
 8006eee:	2304      	movhi	r3, #4
 8006ef0:	2303      	movls	r3, #3
 8006ef2:	e010      	b.n	8006f16 <__ssvfiscanf_r+0x142>
 8006ef4:	2b63      	cmp	r3, #99	; 0x63
 8006ef6:	d065      	beq.n	8006fc4 <__ssvfiscanf_r+0x1f0>
 8006ef8:	2b64      	cmp	r3, #100	; 0x64
 8006efa:	d1e1      	bne.n	8006ec0 <__ssvfiscanf_r+0xec>
 8006efc:	9742      	str	r7, [sp, #264]	; 0x108
 8006efe:	e7f4      	b.n	8006eea <__ssvfiscanf_r+0x116>
 8006f00:	2b70      	cmp	r3, #112	; 0x70
 8006f02:	d04b      	beq.n	8006f9c <__ssvfiscanf_r+0x1c8>
 8006f04:	d826      	bhi.n	8006f54 <__ssvfiscanf_r+0x180>
 8006f06:	2b6e      	cmp	r3, #110	; 0x6e
 8006f08:	d062      	beq.n	8006fd0 <__ssvfiscanf_r+0x1fc>
 8006f0a:	d84c      	bhi.n	8006fa6 <__ssvfiscanf_r+0x1d2>
 8006f0c:	2b69      	cmp	r3, #105	; 0x69
 8006f0e:	d1d7      	bne.n	8006ec0 <__ssvfiscanf_r+0xec>
 8006f10:	2300      	movs	r3, #0
 8006f12:	9342      	str	r3, [sp, #264]	; 0x108
 8006f14:	2303      	movs	r3, #3
 8006f16:	9347      	str	r3, [sp, #284]	; 0x11c
 8006f18:	6863      	ldr	r3, [r4, #4]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	dd68      	ble.n	8006ff0 <__ssvfiscanf_r+0x21c>
 8006f1e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006f20:	0659      	lsls	r1, r3, #25
 8006f22:	d407      	bmi.n	8006f34 <__ssvfiscanf_r+0x160>
 8006f24:	f7ff fe84 	bl	8006c30 <__locale_ctype_ptr>
 8006f28:	6823      	ldr	r3, [r4, #0]
 8006f2a:	781a      	ldrb	r2, [r3, #0]
 8006f2c:	4410      	add	r0, r2
 8006f2e:	7842      	ldrb	r2, [r0, #1]
 8006f30:	0712      	lsls	r2, r2, #28
 8006f32:	d464      	bmi.n	8006ffe <__ssvfiscanf_r+0x22a>
 8006f34:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	dc73      	bgt.n	8007022 <__ssvfiscanf_r+0x24e>
 8006f3a:	466b      	mov	r3, sp
 8006f3c:	4622      	mov	r2, r4
 8006f3e:	a941      	add	r1, sp, #260	; 0x104
 8006f40:	4630      	mov	r0, r6
 8006f42:	f000 f897 	bl	8007074 <_scanf_chars>
 8006f46:	2801      	cmp	r0, #1
 8006f48:	f000 8089 	beq.w	800705e <__ssvfiscanf_r+0x28a>
 8006f4c:	2802      	cmp	r0, #2
 8006f4e:	f47f af71 	bne.w	8006e34 <__ssvfiscanf_r+0x60>
 8006f52:	e01d      	b.n	8006f90 <__ssvfiscanf_r+0x1bc>
 8006f54:	2b75      	cmp	r3, #117	; 0x75
 8006f56:	d0d1      	beq.n	8006efc <__ssvfiscanf_r+0x128>
 8006f58:	2b78      	cmp	r3, #120	; 0x78
 8006f5a:	d0c0      	beq.n	8006ede <__ssvfiscanf_r+0x10a>
 8006f5c:	2b73      	cmp	r3, #115	; 0x73
 8006f5e:	d1af      	bne.n	8006ec0 <__ssvfiscanf_r+0xec>
 8006f60:	2302      	movs	r3, #2
 8006f62:	e7d8      	b.n	8006f16 <__ssvfiscanf_r+0x142>
 8006f64:	6863      	ldr	r3, [r4, #4]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	dd0c      	ble.n	8006f84 <__ssvfiscanf_r+0x1b0>
 8006f6a:	6823      	ldr	r3, [r4, #0]
 8006f6c:	781a      	ldrb	r2, [r3, #0]
 8006f6e:	455a      	cmp	r2, fp
 8006f70:	d175      	bne.n	800705e <__ssvfiscanf_r+0x28a>
 8006f72:	3301      	adds	r3, #1
 8006f74:	6862      	ldr	r2, [r4, #4]
 8006f76:	6023      	str	r3, [r4, #0]
 8006f78:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006f7a:	3a01      	subs	r2, #1
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	6062      	str	r2, [r4, #4]
 8006f80:	9345      	str	r3, [sp, #276]	; 0x114
 8006f82:	e757      	b.n	8006e34 <__ssvfiscanf_r+0x60>
 8006f84:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006f86:	4621      	mov	r1, r4
 8006f88:	4630      	mov	r0, r6
 8006f8a:	4798      	blx	r3
 8006f8c:	2800      	cmp	r0, #0
 8006f8e:	d0ec      	beq.n	8006f6a <__ssvfiscanf_r+0x196>
 8006f90:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006f92:	2800      	cmp	r0, #0
 8006f94:	d159      	bne.n	800704a <__ssvfiscanf_r+0x276>
 8006f96:	f04f 30ff 	mov.w	r0, #4294967295
 8006f9a:	e05c      	b.n	8007056 <__ssvfiscanf_r+0x282>
 8006f9c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006f9e:	f042 0220 	orr.w	r2, r2, #32
 8006fa2:	9241      	str	r2, [sp, #260]	; 0x104
 8006fa4:	e79b      	b.n	8006ede <__ssvfiscanf_r+0x10a>
 8006fa6:	2308      	movs	r3, #8
 8006fa8:	9342      	str	r3, [sp, #264]	; 0x108
 8006faa:	2304      	movs	r3, #4
 8006fac:	e7b3      	b.n	8006f16 <__ssvfiscanf_r+0x142>
 8006fae:	4629      	mov	r1, r5
 8006fb0:	4640      	mov	r0, r8
 8006fb2:	f000 f9b7 	bl	8007324 <__sccl>
 8006fb6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006fb8:	4605      	mov	r5, r0
 8006fba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fbe:	9341      	str	r3, [sp, #260]	; 0x104
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e7a8      	b.n	8006f16 <__ssvfiscanf_r+0x142>
 8006fc4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006fc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fca:	9341      	str	r3, [sp, #260]	; 0x104
 8006fcc:	2300      	movs	r3, #0
 8006fce:	e7a2      	b.n	8006f16 <__ssvfiscanf_r+0x142>
 8006fd0:	9841      	ldr	r0, [sp, #260]	; 0x104
 8006fd2:	06c3      	lsls	r3, r0, #27
 8006fd4:	f53f af2e 	bmi.w	8006e34 <__ssvfiscanf_r+0x60>
 8006fd8:	9b00      	ldr	r3, [sp, #0]
 8006fda:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006fdc:	1d19      	adds	r1, r3, #4
 8006fde:	9100      	str	r1, [sp, #0]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	07c0      	lsls	r0, r0, #31
 8006fe4:	bf4c      	ite	mi
 8006fe6:	801a      	strhmi	r2, [r3, #0]
 8006fe8:	601a      	strpl	r2, [r3, #0]
 8006fea:	e723      	b.n	8006e34 <__ssvfiscanf_r+0x60>
 8006fec:	2305      	movs	r3, #5
 8006fee:	e792      	b.n	8006f16 <__ssvfiscanf_r+0x142>
 8006ff0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006ff2:	4621      	mov	r1, r4
 8006ff4:	4630      	mov	r0, r6
 8006ff6:	4798      	blx	r3
 8006ff8:	2800      	cmp	r0, #0
 8006ffa:	d090      	beq.n	8006f1e <__ssvfiscanf_r+0x14a>
 8006ffc:	e7c8      	b.n	8006f90 <__ssvfiscanf_r+0x1bc>
 8006ffe:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007000:	3201      	adds	r2, #1
 8007002:	9245      	str	r2, [sp, #276]	; 0x114
 8007004:	6862      	ldr	r2, [r4, #4]
 8007006:	3a01      	subs	r2, #1
 8007008:	2a00      	cmp	r2, #0
 800700a:	6062      	str	r2, [r4, #4]
 800700c:	dd02      	ble.n	8007014 <__ssvfiscanf_r+0x240>
 800700e:	3301      	adds	r3, #1
 8007010:	6023      	str	r3, [r4, #0]
 8007012:	e787      	b.n	8006f24 <__ssvfiscanf_r+0x150>
 8007014:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007016:	4621      	mov	r1, r4
 8007018:	4630      	mov	r0, r6
 800701a:	4798      	blx	r3
 800701c:	2800      	cmp	r0, #0
 800701e:	d081      	beq.n	8006f24 <__ssvfiscanf_r+0x150>
 8007020:	e7b6      	b.n	8006f90 <__ssvfiscanf_r+0x1bc>
 8007022:	2b04      	cmp	r3, #4
 8007024:	dc06      	bgt.n	8007034 <__ssvfiscanf_r+0x260>
 8007026:	466b      	mov	r3, sp
 8007028:	4622      	mov	r2, r4
 800702a:	a941      	add	r1, sp, #260	; 0x104
 800702c:	4630      	mov	r0, r6
 800702e:	f000 f883 	bl	8007138 <_scanf_i>
 8007032:	e788      	b.n	8006f46 <__ssvfiscanf_r+0x172>
 8007034:	4b0e      	ldr	r3, [pc, #56]	; (8007070 <__ssvfiscanf_r+0x29c>)
 8007036:	2b00      	cmp	r3, #0
 8007038:	f43f aefc 	beq.w	8006e34 <__ssvfiscanf_r+0x60>
 800703c:	466b      	mov	r3, sp
 800703e:	4622      	mov	r2, r4
 8007040:	a941      	add	r1, sp, #260	; 0x104
 8007042:	4630      	mov	r0, r6
 8007044:	f3af 8000 	nop.w
 8007048:	e77d      	b.n	8006f46 <__ssvfiscanf_r+0x172>
 800704a:	89a3      	ldrh	r3, [r4, #12]
 800704c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007050:	bf18      	it	ne
 8007052:	f04f 30ff 	movne.w	r0, #4294967295
 8007056:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800705a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800705e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007060:	e7f9      	b.n	8007056 <__ssvfiscanf_r+0x282>
 8007062:	bf00      	nop
 8007064:	08006d21 	.word	0x08006d21
 8007068:	08006d9b 	.word	0x08006d9b
 800706c:	08007776 	.word	0x08007776
 8007070:	00000000 	.word	0x00000000

08007074 <_scanf_chars>:
 8007074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007078:	4615      	mov	r5, r2
 800707a:	688a      	ldr	r2, [r1, #8]
 800707c:	4680      	mov	r8, r0
 800707e:	460c      	mov	r4, r1
 8007080:	b932      	cbnz	r2, 8007090 <_scanf_chars+0x1c>
 8007082:	698a      	ldr	r2, [r1, #24]
 8007084:	2a00      	cmp	r2, #0
 8007086:	bf14      	ite	ne
 8007088:	f04f 32ff 	movne.w	r2, #4294967295
 800708c:	2201      	moveq	r2, #1
 800708e:	608a      	str	r2, [r1, #8]
 8007090:	2600      	movs	r6, #0
 8007092:	6822      	ldr	r2, [r4, #0]
 8007094:	06d1      	lsls	r1, r2, #27
 8007096:	bf5f      	itttt	pl
 8007098:	681a      	ldrpl	r2, [r3, #0]
 800709a:	1d11      	addpl	r1, r2, #4
 800709c:	6019      	strpl	r1, [r3, #0]
 800709e:	6817      	ldrpl	r7, [r2, #0]
 80070a0:	69a3      	ldr	r3, [r4, #24]
 80070a2:	b1db      	cbz	r3, 80070dc <_scanf_chars+0x68>
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d107      	bne.n	80070b8 <_scanf_chars+0x44>
 80070a8:	682b      	ldr	r3, [r5, #0]
 80070aa:	6962      	ldr	r2, [r4, #20]
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	5cd3      	ldrb	r3, [r2, r3]
 80070b0:	b9a3      	cbnz	r3, 80070dc <_scanf_chars+0x68>
 80070b2:	2e00      	cmp	r6, #0
 80070b4:	d131      	bne.n	800711a <_scanf_chars+0xa6>
 80070b6:	e006      	b.n	80070c6 <_scanf_chars+0x52>
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d007      	beq.n	80070cc <_scanf_chars+0x58>
 80070bc:	2e00      	cmp	r6, #0
 80070be:	d12c      	bne.n	800711a <_scanf_chars+0xa6>
 80070c0:	69a3      	ldr	r3, [r4, #24]
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d129      	bne.n	800711a <_scanf_chars+0xa6>
 80070c6:	2001      	movs	r0, #1
 80070c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070cc:	f7ff fdb0 	bl	8006c30 <__locale_ctype_ptr>
 80070d0:	682b      	ldr	r3, [r5, #0]
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	4418      	add	r0, r3
 80070d6:	7843      	ldrb	r3, [r0, #1]
 80070d8:	071b      	lsls	r3, r3, #28
 80070da:	d4ef      	bmi.n	80070bc <_scanf_chars+0x48>
 80070dc:	6823      	ldr	r3, [r4, #0]
 80070de:	3601      	adds	r6, #1
 80070e0:	06da      	lsls	r2, r3, #27
 80070e2:	bf5e      	ittt	pl
 80070e4:	682b      	ldrpl	r3, [r5, #0]
 80070e6:	781b      	ldrbpl	r3, [r3, #0]
 80070e8:	703b      	strbpl	r3, [r7, #0]
 80070ea:	682a      	ldr	r2, [r5, #0]
 80070ec:	686b      	ldr	r3, [r5, #4]
 80070ee:	f102 0201 	add.w	r2, r2, #1
 80070f2:	602a      	str	r2, [r5, #0]
 80070f4:	68a2      	ldr	r2, [r4, #8]
 80070f6:	f103 33ff 	add.w	r3, r3, #4294967295
 80070fa:	f102 32ff 	add.w	r2, r2, #4294967295
 80070fe:	606b      	str	r3, [r5, #4]
 8007100:	bf58      	it	pl
 8007102:	3701      	addpl	r7, #1
 8007104:	60a2      	str	r2, [r4, #8]
 8007106:	b142      	cbz	r2, 800711a <_scanf_chars+0xa6>
 8007108:	2b00      	cmp	r3, #0
 800710a:	dcc9      	bgt.n	80070a0 <_scanf_chars+0x2c>
 800710c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007110:	4629      	mov	r1, r5
 8007112:	4640      	mov	r0, r8
 8007114:	4798      	blx	r3
 8007116:	2800      	cmp	r0, #0
 8007118:	d0c2      	beq.n	80070a0 <_scanf_chars+0x2c>
 800711a:	6823      	ldr	r3, [r4, #0]
 800711c:	f013 0310 	ands.w	r3, r3, #16
 8007120:	d105      	bne.n	800712e <_scanf_chars+0xba>
 8007122:	68e2      	ldr	r2, [r4, #12]
 8007124:	3201      	adds	r2, #1
 8007126:	60e2      	str	r2, [r4, #12]
 8007128:	69a2      	ldr	r2, [r4, #24]
 800712a:	b102      	cbz	r2, 800712e <_scanf_chars+0xba>
 800712c:	703b      	strb	r3, [r7, #0]
 800712e:	6923      	ldr	r3, [r4, #16]
 8007130:	2000      	movs	r0, #0
 8007132:	441e      	add	r6, r3
 8007134:	6126      	str	r6, [r4, #16]
 8007136:	e7c7      	b.n	80070c8 <_scanf_chars+0x54>

08007138 <_scanf_i>:
 8007138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800713c:	460c      	mov	r4, r1
 800713e:	469a      	mov	sl, r3
 8007140:	4b74      	ldr	r3, [pc, #464]	; (8007314 <_scanf_i+0x1dc>)
 8007142:	b087      	sub	sp, #28
 8007144:	4683      	mov	fp, r0
 8007146:	4616      	mov	r6, r2
 8007148:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800714c:	ab03      	add	r3, sp, #12
 800714e:	68a7      	ldr	r7, [r4, #8]
 8007150:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007154:	4b70      	ldr	r3, [pc, #448]	; (8007318 <_scanf_i+0x1e0>)
 8007156:	69a1      	ldr	r1, [r4, #24]
 8007158:	4a70      	ldr	r2, [pc, #448]	; (800731c <_scanf_i+0x1e4>)
 800715a:	f104 091c 	add.w	r9, r4, #28
 800715e:	2903      	cmp	r1, #3
 8007160:	bf08      	it	eq
 8007162:	461a      	moveq	r2, r3
 8007164:	1e7b      	subs	r3, r7, #1
 8007166:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800716a:	bf84      	itt	hi
 800716c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007170:	60a3      	strhi	r3, [r4, #8]
 8007172:	6823      	ldr	r3, [r4, #0]
 8007174:	bf88      	it	hi
 8007176:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800717a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800717e:	6023      	str	r3, [r4, #0]
 8007180:	bf98      	it	ls
 8007182:	2700      	movls	r7, #0
 8007184:	464b      	mov	r3, r9
 8007186:	f04f 0800 	mov.w	r8, #0
 800718a:	9200      	str	r2, [sp, #0]
 800718c:	bf88      	it	hi
 800718e:	197f      	addhi	r7, r7, r5
 8007190:	6831      	ldr	r1, [r6, #0]
 8007192:	9301      	str	r3, [sp, #4]
 8007194:	ab03      	add	r3, sp, #12
 8007196:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800719a:	2202      	movs	r2, #2
 800719c:	7809      	ldrb	r1, [r1, #0]
 800719e:	f7ff fd67 	bl	8006c70 <memchr>
 80071a2:	9b01      	ldr	r3, [sp, #4]
 80071a4:	b330      	cbz	r0, 80071f4 <_scanf_i+0xbc>
 80071a6:	f1b8 0f01 	cmp.w	r8, #1
 80071aa:	d15a      	bne.n	8007262 <_scanf_i+0x12a>
 80071ac:	6862      	ldr	r2, [r4, #4]
 80071ae:	b92a      	cbnz	r2, 80071bc <_scanf_i+0x84>
 80071b0:	2108      	movs	r1, #8
 80071b2:	6822      	ldr	r2, [r4, #0]
 80071b4:	6061      	str	r1, [r4, #4]
 80071b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071ba:	6022      	str	r2, [r4, #0]
 80071bc:	6822      	ldr	r2, [r4, #0]
 80071be:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80071c2:	6022      	str	r2, [r4, #0]
 80071c4:	68a2      	ldr	r2, [r4, #8]
 80071c6:	1e51      	subs	r1, r2, #1
 80071c8:	60a1      	str	r1, [r4, #8]
 80071ca:	b19a      	cbz	r2, 80071f4 <_scanf_i+0xbc>
 80071cc:	6832      	ldr	r2, [r6, #0]
 80071ce:	1c5d      	adds	r5, r3, #1
 80071d0:	1c51      	adds	r1, r2, #1
 80071d2:	6031      	str	r1, [r6, #0]
 80071d4:	7812      	ldrb	r2, [r2, #0]
 80071d6:	701a      	strb	r2, [r3, #0]
 80071d8:	6873      	ldr	r3, [r6, #4]
 80071da:	3b01      	subs	r3, #1
 80071dc:	2b00      	cmp	r3, #0
 80071de:	6073      	str	r3, [r6, #4]
 80071e0:	dc07      	bgt.n	80071f2 <_scanf_i+0xba>
 80071e2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80071e6:	4631      	mov	r1, r6
 80071e8:	4658      	mov	r0, fp
 80071ea:	4798      	blx	r3
 80071ec:	2800      	cmp	r0, #0
 80071ee:	f040 8087 	bne.w	8007300 <_scanf_i+0x1c8>
 80071f2:	462b      	mov	r3, r5
 80071f4:	f108 0801 	add.w	r8, r8, #1
 80071f8:	f1b8 0f03 	cmp.w	r8, #3
 80071fc:	d1c8      	bne.n	8007190 <_scanf_i+0x58>
 80071fe:	6862      	ldr	r2, [r4, #4]
 8007200:	b90a      	cbnz	r2, 8007206 <_scanf_i+0xce>
 8007202:	220a      	movs	r2, #10
 8007204:	6062      	str	r2, [r4, #4]
 8007206:	6862      	ldr	r2, [r4, #4]
 8007208:	4945      	ldr	r1, [pc, #276]	; (8007320 <_scanf_i+0x1e8>)
 800720a:	6960      	ldr	r0, [r4, #20]
 800720c:	1a89      	subs	r1, r1, r2
 800720e:	9301      	str	r3, [sp, #4]
 8007210:	f000 f888 	bl	8007324 <__sccl>
 8007214:	9b01      	ldr	r3, [sp, #4]
 8007216:	f04f 0800 	mov.w	r8, #0
 800721a:	461d      	mov	r5, r3
 800721c:	68a3      	ldr	r3, [r4, #8]
 800721e:	6822      	ldr	r2, [r4, #0]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d03b      	beq.n	800729c <_scanf_i+0x164>
 8007224:	6831      	ldr	r1, [r6, #0]
 8007226:	6960      	ldr	r0, [r4, #20]
 8007228:	f891 c000 	ldrb.w	ip, [r1]
 800722c:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007230:	2800      	cmp	r0, #0
 8007232:	d033      	beq.n	800729c <_scanf_i+0x164>
 8007234:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8007238:	d121      	bne.n	800727e <_scanf_i+0x146>
 800723a:	0510      	lsls	r0, r2, #20
 800723c:	d51f      	bpl.n	800727e <_scanf_i+0x146>
 800723e:	f108 0801 	add.w	r8, r8, #1
 8007242:	b117      	cbz	r7, 800724a <_scanf_i+0x112>
 8007244:	3301      	adds	r3, #1
 8007246:	3f01      	subs	r7, #1
 8007248:	60a3      	str	r3, [r4, #8]
 800724a:	6873      	ldr	r3, [r6, #4]
 800724c:	3b01      	subs	r3, #1
 800724e:	2b00      	cmp	r3, #0
 8007250:	6073      	str	r3, [r6, #4]
 8007252:	dd1c      	ble.n	800728e <_scanf_i+0x156>
 8007254:	6833      	ldr	r3, [r6, #0]
 8007256:	3301      	adds	r3, #1
 8007258:	6033      	str	r3, [r6, #0]
 800725a:	68a3      	ldr	r3, [r4, #8]
 800725c:	3b01      	subs	r3, #1
 800725e:	60a3      	str	r3, [r4, #8]
 8007260:	e7dc      	b.n	800721c <_scanf_i+0xe4>
 8007262:	f1b8 0f02 	cmp.w	r8, #2
 8007266:	d1ad      	bne.n	80071c4 <_scanf_i+0x8c>
 8007268:	6822      	ldr	r2, [r4, #0]
 800726a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800726e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007272:	d1bf      	bne.n	80071f4 <_scanf_i+0xbc>
 8007274:	2110      	movs	r1, #16
 8007276:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800727a:	6061      	str	r1, [r4, #4]
 800727c:	e7a1      	b.n	80071c2 <_scanf_i+0x8a>
 800727e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8007282:	6022      	str	r2, [r4, #0]
 8007284:	780b      	ldrb	r3, [r1, #0]
 8007286:	3501      	adds	r5, #1
 8007288:	f805 3c01 	strb.w	r3, [r5, #-1]
 800728c:	e7dd      	b.n	800724a <_scanf_i+0x112>
 800728e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007292:	4631      	mov	r1, r6
 8007294:	4658      	mov	r0, fp
 8007296:	4798      	blx	r3
 8007298:	2800      	cmp	r0, #0
 800729a:	d0de      	beq.n	800725a <_scanf_i+0x122>
 800729c:	6823      	ldr	r3, [r4, #0]
 800729e:	05d9      	lsls	r1, r3, #23
 80072a0:	d50c      	bpl.n	80072bc <_scanf_i+0x184>
 80072a2:	454d      	cmp	r5, r9
 80072a4:	d908      	bls.n	80072b8 <_scanf_i+0x180>
 80072a6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80072aa:	1e6f      	subs	r7, r5, #1
 80072ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80072b0:	4632      	mov	r2, r6
 80072b2:	4658      	mov	r0, fp
 80072b4:	4798      	blx	r3
 80072b6:	463d      	mov	r5, r7
 80072b8:	454d      	cmp	r5, r9
 80072ba:	d029      	beq.n	8007310 <_scanf_i+0x1d8>
 80072bc:	6822      	ldr	r2, [r4, #0]
 80072be:	f012 0210 	ands.w	r2, r2, #16
 80072c2:	d113      	bne.n	80072ec <_scanf_i+0x1b4>
 80072c4:	702a      	strb	r2, [r5, #0]
 80072c6:	6863      	ldr	r3, [r4, #4]
 80072c8:	4649      	mov	r1, r9
 80072ca:	4658      	mov	r0, fp
 80072cc:	9e00      	ldr	r6, [sp, #0]
 80072ce:	47b0      	blx	r6
 80072d0:	f8da 3000 	ldr.w	r3, [sl]
 80072d4:	6821      	ldr	r1, [r4, #0]
 80072d6:	1d1a      	adds	r2, r3, #4
 80072d8:	f8ca 2000 	str.w	r2, [sl]
 80072dc:	f011 0f20 	tst.w	r1, #32
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	d010      	beq.n	8007306 <_scanf_i+0x1ce>
 80072e4:	6018      	str	r0, [r3, #0]
 80072e6:	68e3      	ldr	r3, [r4, #12]
 80072e8:	3301      	adds	r3, #1
 80072ea:	60e3      	str	r3, [r4, #12]
 80072ec:	2000      	movs	r0, #0
 80072ee:	eba5 0509 	sub.w	r5, r5, r9
 80072f2:	44a8      	add	r8, r5
 80072f4:	6925      	ldr	r5, [r4, #16]
 80072f6:	4445      	add	r5, r8
 80072f8:	6125      	str	r5, [r4, #16]
 80072fa:	b007      	add	sp, #28
 80072fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007300:	f04f 0800 	mov.w	r8, #0
 8007304:	e7ca      	b.n	800729c <_scanf_i+0x164>
 8007306:	07ca      	lsls	r2, r1, #31
 8007308:	bf4c      	ite	mi
 800730a:	8018      	strhmi	r0, [r3, #0]
 800730c:	6018      	strpl	r0, [r3, #0]
 800730e:	e7ea      	b.n	80072e6 <_scanf_i+0x1ae>
 8007310:	2001      	movs	r0, #1
 8007312:	e7f2      	b.n	80072fa <_scanf_i+0x1c2>
 8007314:	080076b0 	.word	0x080076b0
 8007318:	0800747d 	.word	0x0800747d
 800731c:	08006bd5 	.word	0x08006bd5
 8007320:	080077bd 	.word	0x080077bd

08007324 <__sccl>:
 8007324:	b570      	push	{r4, r5, r6, lr}
 8007326:	780b      	ldrb	r3, [r1, #0]
 8007328:	1e44      	subs	r4, r0, #1
 800732a:	2b5e      	cmp	r3, #94	; 0x5e
 800732c:	bf13      	iteet	ne
 800732e:	1c4a      	addne	r2, r1, #1
 8007330:	1c8a      	addeq	r2, r1, #2
 8007332:	784b      	ldrbeq	r3, [r1, #1]
 8007334:	2100      	movne	r1, #0
 8007336:	bf08      	it	eq
 8007338:	2101      	moveq	r1, #1
 800733a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800733e:	f804 1f01 	strb.w	r1, [r4, #1]!
 8007342:	42ac      	cmp	r4, r5
 8007344:	d1fb      	bne.n	800733e <__sccl+0x1a>
 8007346:	b913      	cbnz	r3, 800734e <__sccl+0x2a>
 8007348:	3a01      	subs	r2, #1
 800734a:	4610      	mov	r0, r2
 800734c:	bd70      	pop	{r4, r5, r6, pc}
 800734e:	f081 0401 	eor.w	r4, r1, #1
 8007352:	54c4      	strb	r4, [r0, r3]
 8007354:	1c51      	adds	r1, r2, #1
 8007356:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800735a:	1e4e      	subs	r6, r1, #1
 800735c:	2d2d      	cmp	r5, #45	; 0x2d
 800735e:	460a      	mov	r2, r1
 8007360:	d006      	beq.n	8007370 <__sccl+0x4c>
 8007362:	2d5d      	cmp	r5, #93	; 0x5d
 8007364:	d0f1      	beq.n	800734a <__sccl+0x26>
 8007366:	b90d      	cbnz	r5, 800736c <__sccl+0x48>
 8007368:	4632      	mov	r2, r6
 800736a:	e7ee      	b.n	800734a <__sccl+0x26>
 800736c:	462b      	mov	r3, r5
 800736e:	e7f0      	b.n	8007352 <__sccl+0x2e>
 8007370:	780e      	ldrb	r6, [r1, #0]
 8007372:	2e5d      	cmp	r6, #93	; 0x5d
 8007374:	d0fa      	beq.n	800736c <__sccl+0x48>
 8007376:	42b3      	cmp	r3, r6
 8007378:	dcf8      	bgt.n	800736c <__sccl+0x48>
 800737a:	3301      	adds	r3, #1
 800737c:	429e      	cmp	r6, r3
 800737e:	54c4      	strb	r4, [r0, r3]
 8007380:	dcfb      	bgt.n	800737a <__sccl+0x56>
 8007382:	3102      	adds	r1, #2
 8007384:	e7e7      	b.n	8007356 <__sccl+0x32>

08007386 <_strtol_l.isra.0>:
 8007386:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800738a:	4680      	mov	r8, r0
 800738c:	4689      	mov	r9, r1
 800738e:	4692      	mov	sl, r2
 8007390:	461e      	mov	r6, r3
 8007392:	460f      	mov	r7, r1
 8007394:	463d      	mov	r5, r7
 8007396:	9808      	ldr	r0, [sp, #32]
 8007398:	f815 4b01 	ldrb.w	r4, [r5], #1
 800739c:	f7ff fc44 	bl	8006c28 <__locale_ctype_ptr_l>
 80073a0:	4420      	add	r0, r4
 80073a2:	7843      	ldrb	r3, [r0, #1]
 80073a4:	f013 0308 	ands.w	r3, r3, #8
 80073a8:	d132      	bne.n	8007410 <_strtol_l.isra.0+0x8a>
 80073aa:	2c2d      	cmp	r4, #45	; 0x2d
 80073ac:	d132      	bne.n	8007414 <_strtol_l.isra.0+0x8e>
 80073ae:	2201      	movs	r2, #1
 80073b0:	787c      	ldrb	r4, [r7, #1]
 80073b2:	1cbd      	adds	r5, r7, #2
 80073b4:	2e00      	cmp	r6, #0
 80073b6:	d05d      	beq.n	8007474 <_strtol_l.isra.0+0xee>
 80073b8:	2e10      	cmp	r6, #16
 80073ba:	d109      	bne.n	80073d0 <_strtol_l.isra.0+0x4a>
 80073bc:	2c30      	cmp	r4, #48	; 0x30
 80073be:	d107      	bne.n	80073d0 <_strtol_l.isra.0+0x4a>
 80073c0:	782b      	ldrb	r3, [r5, #0]
 80073c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80073c6:	2b58      	cmp	r3, #88	; 0x58
 80073c8:	d14f      	bne.n	800746a <_strtol_l.isra.0+0xe4>
 80073ca:	2610      	movs	r6, #16
 80073cc:	786c      	ldrb	r4, [r5, #1]
 80073ce:	3502      	adds	r5, #2
 80073d0:	2a00      	cmp	r2, #0
 80073d2:	bf14      	ite	ne
 80073d4:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80073d8:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80073dc:	2700      	movs	r7, #0
 80073de:	fbb1 fcf6 	udiv	ip, r1, r6
 80073e2:	4638      	mov	r0, r7
 80073e4:	fb06 1e1c 	mls	lr, r6, ip, r1
 80073e8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80073ec:	2b09      	cmp	r3, #9
 80073ee:	d817      	bhi.n	8007420 <_strtol_l.isra.0+0x9a>
 80073f0:	461c      	mov	r4, r3
 80073f2:	42a6      	cmp	r6, r4
 80073f4:	dd23      	ble.n	800743e <_strtol_l.isra.0+0xb8>
 80073f6:	1c7b      	adds	r3, r7, #1
 80073f8:	d007      	beq.n	800740a <_strtol_l.isra.0+0x84>
 80073fa:	4584      	cmp	ip, r0
 80073fc:	d31c      	bcc.n	8007438 <_strtol_l.isra.0+0xb2>
 80073fe:	d101      	bne.n	8007404 <_strtol_l.isra.0+0x7e>
 8007400:	45a6      	cmp	lr, r4
 8007402:	db19      	blt.n	8007438 <_strtol_l.isra.0+0xb2>
 8007404:	2701      	movs	r7, #1
 8007406:	fb00 4006 	mla	r0, r0, r6, r4
 800740a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800740e:	e7eb      	b.n	80073e8 <_strtol_l.isra.0+0x62>
 8007410:	462f      	mov	r7, r5
 8007412:	e7bf      	b.n	8007394 <_strtol_l.isra.0+0xe>
 8007414:	2c2b      	cmp	r4, #43	; 0x2b
 8007416:	bf04      	itt	eq
 8007418:	1cbd      	addeq	r5, r7, #2
 800741a:	787c      	ldrbeq	r4, [r7, #1]
 800741c:	461a      	mov	r2, r3
 800741e:	e7c9      	b.n	80073b4 <_strtol_l.isra.0+0x2e>
 8007420:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8007424:	2b19      	cmp	r3, #25
 8007426:	d801      	bhi.n	800742c <_strtol_l.isra.0+0xa6>
 8007428:	3c37      	subs	r4, #55	; 0x37
 800742a:	e7e2      	b.n	80073f2 <_strtol_l.isra.0+0x6c>
 800742c:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007430:	2b19      	cmp	r3, #25
 8007432:	d804      	bhi.n	800743e <_strtol_l.isra.0+0xb8>
 8007434:	3c57      	subs	r4, #87	; 0x57
 8007436:	e7dc      	b.n	80073f2 <_strtol_l.isra.0+0x6c>
 8007438:	f04f 37ff 	mov.w	r7, #4294967295
 800743c:	e7e5      	b.n	800740a <_strtol_l.isra.0+0x84>
 800743e:	1c7b      	adds	r3, r7, #1
 8007440:	d108      	bne.n	8007454 <_strtol_l.isra.0+0xce>
 8007442:	2322      	movs	r3, #34	; 0x22
 8007444:	4608      	mov	r0, r1
 8007446:	f8c8 3000 	str.w	r3, [r8]
 800744a:	f1ba 0f00 	cmp.w	sl, #0
 800744e:	d107      	bne.n	8007460 <_strtol_l.isra.0+0xda>
 8007450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007454:	b102      	cbz	r2, 8007458 <_strtol_l.isra.0+0xd2>
 8007456:	4240      	negs	r0, r0
 8007458:	f1ba 0f00 	cmp.w	sl, #0
 800745c:	d0f8      	beq.n	8007450 <_strtol_l.isra.0+0xca>
 800745e:	b10f      	cbz	r7, 8007464 <_strtol_l.isra.0+0xde>
 8007460:	f105 39ff 	add.w	r9, r5, #4294967295
 8007464:	f8ca 9000 	str.w	r9, [sl]
 8007468:	e7f2      	b.n	8007450 <_strtol_l.isra.0+0xca>
 800746a:	2430      	movs	r4, #48	; 0x30
 800746c:	2e00      	cmp	r6, #0
 800746e:	d1af      	bne.n	80073d0 <_strtol_l.isra.0+0x4a>
 8007470:	2608      	movs	r6, #8
 8007472:	e7ad      	b.n	80073d0 <_strtol_l.isra.0+0x4a>
 8007474:	2c30      	cmp	r4, #48	; 0x30
 8007476:	d0a3      	beq.n	80073c0 <_strtol_l.isra.0+0x3a>
 8007478:	260a      	movs	r6, #10
 800747a:	e7a9      	b.n	80073d0 <_strtol_l.isra.0+0x4a>

0800747c <_strtol_r>:
 800747c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800747e:	4c06      	ldr	r4, [pc, #24]	; (8007498 <_strtol_r+0x1c>)
 8007480:	4d06      	ldr	r5, [pc, #24]	; (800749c <_strtol_r+0x20>)
 8007482:	6824      	ldr	r4, [r4, #0]
 8007484:	6a24      	ldr	r4, [r4, #32]
 8007486:	2c00      	cmp	r4, #0
 8007488:	bf08      	it	eq
 800748a:	462c      	moveq	r4, r5
 800748c:	9400      	str	r4, [sp, #0]
 800748e:	f7ff ff7a 	bl	8007386 <_strtol_l.isra.0>
 8007492:	b003      	add	sp, #12
 8007494:	bd30      	pop	{r4, r5, pc}
 8007496:	bf00      	nop
 8007498:	20000064 	.word	0x20000064
 800749c:	20000128 	.word	0x20000128

080074a0 <__submore>:
 80074a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074a4:	460c      	mov	r4, r1
 80074a6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80074a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074ac:	4299      	cmp	r1, r3
 80074ae:	d11b      	bne.n	80074e8 <__submore+0x48>
 80074b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80074b4:	f7fe fc1a 	bl	8005cec <_malloc_r>
 80074b8:	b918      	cbnz	r0, 80074c2 <__submore+0x22>
 80074ba:	f04f 30ff 	mov.w	r0, #4294967295
 80074be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074c6:	63a3      	str	r3, [r4, #56]	; 0x38
 80074c8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80074cc:	6360      	str	r0, [r4, #52]	; 0x34
 80074ce:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80074d2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80074d6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80074da:	7043      	strb	r3, [r0, #1]
 80074dc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80074e0:	7003      	strb	r3, [r0, #0]
 80074e2:	6020      	str	r0, [r4, #0]
 80074e4:	2000      	movs	r0, #0
 80074e6:	e7ea      	b.n	80074be <__submore+0x1e>
 80074e8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80074ea:	0077      	lsls	r7, r6, #1
 80074ec:	463a      	mov	r2, r7
 80074ee:	f7ff fbf1 	bl	8006cd4 <_realloc_r>
 80074f2:	4605      	mov	r5, r0
 80074f4:	2800      	cmp	r0, #0
 80074f6:	d0e0      	beq.n	80074ba <__submore+0x1a>
 80074f8:	eb00 0806 	add.w	r8, r0, r6
 80074fc:	4601      	mov	r1, r0
 80074fe:	4632      	mov	r2, r6
 8007500:	4640      	mov	r0, r8
 8007502:	f7ff fbc3 	bl	8006c8c <memcpy>
 8007506:	f8c4 8000 	str.w	r8, [r4]
 800750a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800750e:	e7e9      	b.n	80074e4 <__submore+0x44>

08007510 <__ascii_wctomb>:
 8007510:	b149      	cbz	r1, 8007526 <__ascii_wctomb+0x16>
 8007512:	2aff      	cmp	r2, #255	; 0xff
 8007514:	bf8b      	itete	hi
 8007516:	238a      	movhi	r3, #138	; 0x8a
 8007518:	700a      	strbls	r2, [r1, #0]
 800751a:	6003      	strhi	r3, [r0, #0]
 800751c:	2001      	movls	r0, #1
 800751e:	bf88      	it	hi
 8007520:	f04f 30ff 	movhi.w	r0, #4294967295
 8007524:	4770      	bx	lr
 8007526:	4608      	mov	r0, r1
 8007528:	4770      	bx	lr

0800752a <_malloc_usable_size_r>:
 800752a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800752e:	1f18      	subs	r0, r3, #4
 8007530:	2b00      	cmp	r3, #0
 8007532:	bfbc      	itt	lt
 8007534:	580b      	ldrlt	r3, [r1, r0]
 8007536:	18c0      	addlt	r0, r0, r3
 8007538:	4770      	bx	lr
	...

0800753c <_gettimeofday>:
 800753c:	2258      	movs	r2, #88	; 0x58
 800753e:	4b02      	ldr	r3, [pc, #8]	; (8007548 <_gettimeofday+0xc>)
 8007540:	f04f 30ff 	mov.w	r0, #4294967295
 8007544:	601a      	str	r2, [r3, #0]
 8007546:	4770      	bx	lr
 8007548:	200004c8 	.word	0x200004c8

0800754c <_init>:
 800754c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800754e:	bf00      	nop
 8007550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007552:	bc08      	pop	{r3}
 8007554:	469e      	mov	lr, r3
 8007556:	4770      	bx	lr

08007558 <_fini>:
 8007558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800755a:	bf00      	nop
 800755c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800755e:	bc08      	pop	{r3}
 8007560:	469e      	mov	lr, r3
 8007562:	4770      	bx	lr
