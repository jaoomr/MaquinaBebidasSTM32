
ProjetoFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000744c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  0800755c  0800755c  0001755c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007934  08007934  00020294  2**0
                  CONTENTS
  4 .ARM          00000008  08007934  08007934  00017934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800793c  0800793c  00020294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800793c  0800793c  0001793c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007940  08007940  00017940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000294  20000000  08007944  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  20000298  08007bd8  00020298  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004cc  08007bd8  000204cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020294  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f51f  00000000  00000000  000202bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000253f  00000000  00000000  0002f7dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d20  00000000  00000000  00031d20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000be8  00000000  00000000  00032a40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019a44  00000000  00000000  00033628  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c5dd  00000000  00000000  0004d06c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e803  00000000  00000000  00059649  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e7e4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000443c  00000000  00000000  000e7ec8  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000024  00000000  00000000  000ec304  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000ec328  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000298 	.word	0x20000298
 800012c:	00000000 	.word	0x00000000
 8000130:	08007544 	.word	0x08007544

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000029c 	.word	0x2000029c
 800014c:	08007544 	.word	0x08007544

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002b2:	f1a4 0401 	sub.w	r4, r4, #1
 80002b6:	d1e9      	bne.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__aeabi_d2f>:
 8000910:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000914:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000918:	bf24      	itt	cs
 800091a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800091e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000922:	d90d      	bls.n	8000940 <__aeabi_d2f+0x30>
 8000924:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000928:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800092c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000930:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000934:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000938:	bf08      	it	eq
 800093a:	f020 0001 	biceq.w	r0, r0, #1
 800093e:	4770      	bx	lr
 8000940:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000944:	d121      	bne.n	800098a <__aeabi_d2f+0x7a>
 8000946:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800094a:	bfbc      	itt	lt
 800094c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000950:	4770      	bxlt	lr
 8000952:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000956:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800095a:	f1c2 0218 	rsb	r2, r2, #24
 800095e:	f1c2 0c20 	rsb	ip, r2, #32
 8000962:	fa10 f30c 	lsls.w	r3, r0, ip
 8000966:	fa20 f002 	lsr.w	r0, r0, r2
 800096a:	bf18      	it	ne
 800096c:	f040 0001 	orrne.w	r0, r0, #1
 8000970:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000974:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000978:	fa03 fc0c 	lsl.w	ip, r3, ip
 800097c:	ea40 000c 	orr.w	r0, r0, ip
 8000980:	fa23 f302 	lsr.w	r3, r3, r2
 8000984:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000988:	e7cc      	b.n	8000924 <__aeabi_d2f+0x14>
 800098a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800098e:	d107      	bne.n	80009a0 <__aeabi_d2f+0x90>
 8000990:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000994:	bf1e      	ittt	ne
 8000996:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800099a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800099e:	4770      	bxne	lr
 80009a0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_frsub>:
 80009b0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009b4:	e002      	b.n	80009bc <__addsf3>
 80009b6:	bf00      	nop

080009b8 <__aeabi_fsub>:
 80009b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009bc <__addsf3>:
 80009bc:	0042      	lsls	r2, r0, #1
 80009be:	bf1f      	itttt	ne
 80009c0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009c4:	ea92 0f03 	teqne	r2, r3
 80009c8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009cc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009d0:	d06a      	beq.n	8000aa8 <__addsf3+0xec>
 80009d2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009d6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009da:	bfc1      	itttt	gt
 80009dc:	18d2      	addgt	r2, r2, r3
 80009de:	4041      	eorgt	r1, r0
 80009e0:	4048      	eorgt	r0, r1
 80009e2:	4041      	eorgt	r1, r0
 80009e4:	bfb8      	it	lt
 80009e6:	425b      	neglt	r3, r3
 80009e8:	2b19      	cmp	r3, #25
 80009ea:	bf88      	it	hi
 80009ec:	4770      	bxhi	lr
 80009ee:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009f2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009fa:	bf18      	it	ne
 80009fc:	4240      	negne	r0, r0
 80009fe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a02:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a06:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a0a:	bf18      	it	ne
 8000a0c:	4249      	negne	r1, r1
 8000a0e:	ea92 0f03 	teq	r2, r3
 8000a12:	d03f      	beq.n	8000a94 <__addsf3+0xd8>
 8000a14:	f1a2 0201 	sub.w	r2, r2, #1
 8000a18:	fa41 fc03 	asr.w	ip, r1, r3
 8000a1c:	eb10 000c 	adds.w	r0, r0, ip
 8000a20:	f1c3 0320 	rsb	r3, r3, #32
 8000a24:	fa01 f103 	lsl.w	r1, r1, r3
 8000a28:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a2c:	d502      	bpl.n	8000a34 <__addsf3+0x78>
 8000a2e:	4249      	negs	r1, r1
 8000a30:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a34:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a38:	d313      	bcc.n	8000a62 <__addsf3+0xa6>
 8000a3a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a3e:	d306      	bcc.n	8000a4e <__addsf3+0x92>
 8000a40:	0840      	lsrs	r0, r0, #1
 8000a42:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a46:	f102 0201 	add.w	r2, r2, #1
 8000a4a:	2afe      	cmp	r2, #254	; 0xfe
 8000a4c:	d251      	bcs.n	8000af2 <__addsf3+0x136>
 8000a4e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a56:	bf08      	it	eq
 8000a58:	f020 0001 	biceq.w	r0, r0, #1
 8000a5c:	ea40 0003 	orr.w	r0, r0, r3
 8000a60:	4770      	bx	lr
 8000a62:	0049      	lsls	r1, r1, #1
 8000a64:	eb40 0000 	adc.w	r0, r0, r0
 8000a68:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a6c:	f1a2 0201 	sub.w	r2, r2, #1
 8000a70:	d1ed      	bne.n	8000a4e <__addsf3+0x92>
 8000a72:	fab0 fc80 	clz	ip, r0
 8000a76:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a7a:	ebb2 020c 	subs.w	r2, r2, ip
 8000a7e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a82:	bfaa      	itet	ge
 8000a84:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a88:	4252      	neglt	r2, r2
 8000a8a:	4318      	orrge	r0, r3
 8000a8c:	bfbc      	itt	lt
 8000a8e:	40d0      	lsrlt	r0, r2
 8000a90:	4318      	orrlt	r0, r3
 8000a92:	4770      	bx	lr
 8000a94:	f092 0f00 	teq	r2, #0
 8000a98:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a9c:	bf06      	itte	eq
 8000a9e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000aa2:	3201      	addeq	r2, #1
 8000aa4:	3b01      	subne	r3, #1
 8000aa6:	e7b5      	b.n	8000a14 <__addsf3+0x58>
 8000aa8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000aac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ab6:	d021      	beq.n	8000afc <__addsf3+0x140>
 8000ab8:	ea92 0f03 	teq	r2, r3
 8000abc:	d004      	beq.n	8000ac8 <__addsf3+0x10c>
 8000abe:	f092 0f00 	teq	r2, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	4608      	moveq	r0, r1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea90 0f01 	teq	r0, r1
 8000acc:	bf1c      	itt	ne
 8000ace:	2000      	movne	r0, #0
 8000ad0:	4770      	bxne	lr
 8000ad2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ad6:	d104      	bne.n	8000ae2 <__addsf3+0x126>
 8000ad8:	0040      	lsls	r0, r0, #1
 8000ada:	bf28      	it	cs
 8000adc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ae0:	4770      	bx	lr
 8000ae2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ae6:	bf3c      	itt	cc
 8000ae8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000aec:	4770      	bxcc	lr
 8000aee:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000af2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000af6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000afa:	4770      	bx	lr
 8000afc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b00:	bf16      	itet	ne
 8000b02:	4608      	movne	r0, r1
 8000b04:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b08:	4601      	movne	r1, r0
 8000b0a:	0242      	lsls	r2, r0, #9
 8000b0c:	bf06      	itte	eq
 8000b0e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b12:	ea90 0f01 	teqeq	r0, r1
 8000b16:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b1a:	4770      	bx	lr

08000b1c <__aeabi_ui2f>:
 8000b1c:	f04f 0300 	mov.w	r3, #0
 8000b20:	e004      	b.n	8000b2c <__aeabi_i2f+0x8>
 8000b22:	bf00      	nop

08000b24 <__aeabi_i2f>:
 8000b24:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b28:	bf48      	it	mi
 8000b2a:	4240      	negmi	r0, r0
 8000b2c:	ea5f 0c00 	movs.w	ip, r0
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b38:	4601      	mov	r1, r0
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	e01c      	b.n	8000b7a <__aeabi_l2f+0x2a>

08000b40 <__aeabi_ul2f>:
 8000b40:	ea50 0201 	orrs.w	r2, r0, r1
 8000b44:	bf08      	it	eq
 8000b46:	4770      	bxeq	lr
 8000b48:	f04f 0300 	mov.w	r3, #0
 8000b4c:	e00a      	b.n	8000b64 <__aeabi_l2f+0x14>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_l2f>:
 8000b50:	ea50 0201 	orrs.w	r2, r0, r1
 8000b54:	bf08      	it	eq
 8000b56:	4770      	bxeq	lr
 8000b58:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b5c:	d502      	bpl.n	8000b64 <__aeabi_l2f+0x14>
 8000b5e:	4240      	negs	r0, r0
 8000b60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b64:	ea5f 0c01 	movs.w	ip, r1
 8000b68:	bf02      	ittt	eq
 8000b6a:	4684      	moveq	ip, r0
 8000b6c:	4601      	moveq	r1, r0
 8000b6e:	2000      	moveq	r0, #0
 8000b70:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b74:	bf08      	it	eq
 8000b76:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b7a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b7e:	fabc f28c 	clz	r2, ip
 8000b82:	3a08      	subs	r2, #8
 8000b84:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b88:	db10      	blt.n	8000bac <__aeabi_l2f+0x5c>
 8000b8a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b8e:	4463      	add	r3, ip
 8000b90:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b94:	f1c2 0220 	rsb	r2, r2, #32
 8000b98:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b9c:	fa20 f202 	lsr.w	r2, r0, r2
 8000ba0:	eb43 0002 	adc.w	r0, r3, r2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f102 0220 	add.w	r2, r2, #32
 8000bb0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bb4:	f1c2 0220 	rsb	r2, r2, #32
 8000bb8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bbc:	fa21 f202 	lsr.w	r2, r1, r2
 8000bc0:	eb43 0002 	adc.w	r0, r3, r2
 8000bc4:	bf08      	it	eq
 8000bc6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_fmul>:
 8000bcc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bd0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bd4:	bf1e      	ittt	ne
 8000bd6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bda:	ea92 0f0c 	teqne	r2, ip
 8000bde:	ea93 0f0c 	teqne	r3, ip
 8000be2:	d06f      	beq.n	8000cc4 <__aeabi_fmul+0xf8>
 8000be4:	441a      	add	r2, r3
 8000be6:	ea80 0c01 	eor.w	ip, r0, r1
 8000bea:	0240      	lsls	r0, r0, #9
 8000bec:	bf18      	it	ne
 8000bee:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bf2:	d01e      	beq.n	8000c32 <__aeabi_fmul+0x66>
 8000bf4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bf8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bfc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c00:	fba0 3101 	umull	r3, r1, r0, r1
 8000c04:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c08:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c0c:	bf3e      	ittt	cc
 8000c0e:	0049      	lslcc	r1, r1, #1
 8000c10:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c14:	005b      	lslcc	r3, r3, #1
 8000c16:	ea40 0001 	orr.w	r0, r0, r1
 8000c1a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c1e:	2afd      	cmp	r2, #253	; 0xfd
 8000c20:	d81d      	bhi.n	8000c5e <__aeabi_fmul+0x92>
 8000c22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c26:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c2a:	bf08      	it	eq
 8000c2c:	f020 0001 	biceq.w	r0, r0, #1
 8000c30:	4770      	bx	lr
 8000c32:	f090 0f00 	teq	r0, #0
 8000c36:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c3a:	bf08      	it	eq
 8000c3c:	0249      	lsleq	r1, r1, #9
 8000c3e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c42:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c46:	3a7f      	subs	r2, #127	; 0x7f
 8000c48:	bfc2      	ittt	gt
 8000c4a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c4e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c52:	4770      	bxgt	lr
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	3a01      	subs	r2, #1
 8000c5e:	dc5d      	bgt.n	8000d1c <__aeabi_fmul+0x150>
 8000c60:	f112 0f19 	cmn.w	r2, #25
 8000c64:	bfdc      	itt	le
 8000c66:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c6a:	4770      	bxle	lr
 8000c6c:	f1c2 0200 	rsb	r2, r2, #0
 8000c70:	0041      	lsls	r1, r0, #1
 8000c72:	fa21 f102 	lsr.w	r1, r1, r2
 8000c76:	f1c2 0220 	rsb	r2, r2, #32
 8000c7a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c7e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c82:	f140 0000 	adc.w	r0, r0, #0
 8000c86:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c8a:	bf08      	it	eq
 8000c8c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c90:	4770      	bx	lr
 8000c92:	f092 0f00 	teq	r2, #0
 8000c96:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c9a:	bf02      	ittt	eq
 8000c9c:	0040      	lsleq	r0, r0, #1
 8000c9e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ca2:	3a01      	subeq	r2, #1
 8000ca4:	d0f9      	beq.n	8000c9a <__aeabi_fmul+0xce>
 8000ca6:	ea40 000c 	orr.w	r0, r0, ip
 8000caa:	f093 0f00 	teq	r3, #0
 8000cae:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cb2:	bf02      	ittt	eq
 8000cb4:	0049      	lsleq	r1, r1, #1
 8000cb6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000cba:	3b01      	subeq	r3, #1
 8000cbc:	d0f9      	beq.n	8000cb2 <__aeabi_fmul+0xe6>
 8000cbe:	ea41 010c 	orr.w	r1, r1, ip
 8000cc2:	e78f      	b.n	8000be4 <__aeabi_fmul+0x18>
 8000cc4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cc8:	ea92 0f0c 	teq	r2, ip
 8000ccc:	bf18      	it	ne
 8000cce:	ea93 0f0c 	teqne	r3, ip
 8000cd2:	d00a      	beq.n	8000cea <__aeabi_fmul+0x11e>
 8000cd4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cd8:	bf18      	it	ne
 8000cda:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cde:	d1d8      	bne.n	8000c92 <__aeabi_fmul+0xc6>
 8000ce0:	ea80 0001 	eor.w	r0, r0, r1
 8000ce4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ce8:	4770      	bx	lr
 8000cea:	f090 0f00 	teq	r0, #0
 8000cee:	bf17      	itett	ne
 8000cf0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cf4:	4608      	moveq	r0, r1
 8000cf6:	f091 0f00 	teqne	r1, #0
 8000cfa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cfe:	d014      	beq.n	8000d2a <__aeabi_fmul+0x15e>
 8000d00:	ea92 0f0c 	teq	r2, ip
 8000d04:	d101      	bne.n	8000d0a <__aeabi_fmul+0x13e>
 8000d06:	0242      	lsls	r2, r0, #9
 8000d08:	d10f      	bne.n	8000d2a <__aeabi_fmul+0x15e>
 8000d0a:	ea93 0f0c 	teq	r3, ip
 8000d0e:	d103      	bne.n	8000d18 <__aeabi_fmul+0x14c>
 8000d10:	024b      	lsls	r3, r1, #9
 8000d12:	bf18      	it	ne
 8000d14:	4608      	movne	r0, r1
 8000d16:	d108      	bne.n	8000d2a <__aeabi_fmul+0x15e>
 8000d18:	ea80 0001 	eor.w	r0, r0, r1
 8000d1c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d28:	4770      	bx	lr
 8000d2a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d2e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fdiv>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d069      	beq.n	8000e20 <__aeabi_fdiv+0xec>
 8000d4c:	eba2 0203 	sub.w	r2, r2, r3
 8000d50:	ea80 0c01 	eor.w	ip, r0, r1
 8000d54:	0249      	lsls	r1, r1, #9
 8000d56:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d5a:	d037      	beq.n	8000dcc <__aeabi_fdiv+0x98>
 8000d5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d60:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d64:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d68:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d6c:	428b      	cmp	r3, r1
 8000d6e:	bf38      	it	cc
 8000d70:	005b      	lslcc	r3, r3, #1
 8000d72:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d76:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	bf24      	itt	cs
 8000d7e:	1a5b      	subcs	r3, r3, r1
 8000d80:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d84:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d88:	bf24      	itt	cs
 8000d8a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d8e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d92:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d96:	bf24      	itt	cs
 8000d98:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d9c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000da0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000da4:	bf24      	itt	cs
 8000da6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000daa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dae:	011b      	lsls	r3, r3, #4
 8000db0:	bf18      	it	ne
 8000db2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000db6:	d1e0      	bne.n	8000d7a <__aeabi_fdiv+0x46>
 8000db8:	2afd      	cmp	r2, #253	; 0xfd
 8000dba:	f63f af50 	bhi.w	8000c5e <__aeabi_fmul+0x92>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dc4:	bf08      	it	eq
 8000dc6:	f020 0001 	biceq.w	r0, r0, #1
 8000dca:	4770      	bx	lr
 8000dcc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dd0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dd4:	327f      	adds	r2, #127	; 0x7f
 8000dd6:	bfc2      	ittt	gt
 8000dd8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ddc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000de0:	4770      	bxgt	lr
 8000de2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de6:	f04f 0300 	mov.w	r3, #0
 8000dea:	3a01      	subs	r2, #1
 8000dec:	e737      	b.n	8000c5e <__aeabi_fmul+0x92>
 8000dee:	f092 0f00 	teq	r2, #0
 8000df2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000df6:	bf02      	ittt	eq
 8000df8:	0040      	lsleq	r0, r0, #1
 8000dfa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dfe:	3a01      	subeq	r2, #1
 8000e00:	d0f9      	beq.n	8000df6 <__aeabi_fdiv+0xc2>
 8000e02:	ea40 000c 	orr.w	r0, r0, ip
 8000e06:	f093 0f00 	teq	r3, #0
 8000e0a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e0e:	bf02      	ittt	eq
 8000e10:	0049      	lsleq	r1, r1, #1
 8000e12:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e16:	3b01      	subeq	r3, #1
 8000e18:	d0f9      	beq.n	8000e0e <__aeabi_fdiv+0xda>
 8000e1a:	ea41 010c 	orr.w	r1, r1, ip
 8000e1e:	e795      	b.n	8000d4c <__aeabi_fdiv+0x18>
 8000e20:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e24:	ea92 0f0c 	teq	r2, ip
 8000e28:	d108      	bne.n	8000e3c <__aeabi_fdiv+0x108>
 8000e2a:	0242      	lsls	r2, r0, #9
 8000e2c:	f47f af7d 	bne.w	8000d2a <__aeabi_fmul+0x15e>
 8000e30:	ea93 0f0c 	teq	r3, ip
 8000e34:	f47f af70 	bne.w	8000d18 <__aeabi_fmul+0x14c>
 8000e38:	4608      	mov	r0, r1
 8000e3a:	e776      	b.n	8000d2a <__aeabi_fmul+0x15e>
 8000e3c:	ea93 0f0c 	teq	r3, ip
 8000e40:	d104      	bne.n	8000e4c <__aeabi_fdiv+0x118>
 8000e42:	024b      	lsls	r3, r1, #9
 8000e44:	f43f af4c 	beq.w	8000ce0 <__aeabi_fmul+0x114>
 8000e48:	4608      	mov	r0, r1
 8000e4a:	e76e      	b.n	8000d2a <__aeabi_fmul+0x15e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1ca      	bne.n	8000dee <__aeabi_fdiv+0xba>
 8000e58:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e5c:	f47f af5c 	bne.w	8000d18 <__aeabi_fmul+0x14c>
 8000e60:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e64:	f47f af3c 	bne.w	8000ce0 <__aeabi_fmul+0x114>
 8000e68:	e75f      	b.n	8000d2a <__aeabi_fmul+0x15e>
 8000e6a:	bf00      	nop

08000e6c <__gesf2>:
 8000e6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000e70:	e006      	b.n	8000e80 <__cmpsf2+0x4>
 8000e72:	bf00      	nop

08000e74 <__lesf2>:
 8000e74:	f04f 0c01 	mov.w	ip, #1
 8000e78:	e002      	b.n	8000e80 <__cmpsf2+0x4>
 8000e7a:	bf00      	nop

08000e7c <__cmpsf2>:
 8000e7c:	f04f 0c01 	mov.w	ip, #1
 8000e80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e84:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e90:	bf18      	it	ne
 8000e92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e96:	d011      	beq.n	8000ebc <__cmpsf2+0x40>
 8000e98:	b001      	add	sp, #4
 8000e9a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e9e:	bf18      	it	ne
 8000ea0:	ea90 0f01 	teqne	r0, r1
 8000ea4:	bf58      	it	pl
 8000ea6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000eaa:	bf88      	it	hi
 8000eac:	17c8      	asrhi	r0, r1, #31
 8000eae:	bf38      	it	cc
 8000eb0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000eb4:	bf18      	it	ne
 8000eb6:	f040 0001 	orrne.w	r0, r0, #1
 8000eba:	4770      	bx	lr
 8000ebc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ec0:	d102      	bne.n	8000ec8 <__cmpsf2+0x4c>
 8000ec2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ec6:	d105      	bne.n	8000ed4 <__cmpsf2+0x58>
 8000ec8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ecc:	d1e4      	bne.n	8000e98 <__cmpsf2+0x1c>
 8000ece:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ed2:	d0e1      	beq.n	8000e98 <__cmpsf2+0x1c>
 8000ed4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <__aeabi_cfrcmple>:
 8000edc:	4684      	mov	ip, r0
 8000ede:	4608      	mov	r0, r1
 8000ee0:	4661      	mov	r1, ip
 8000ee2:	e7ff      	b.n	8000ee4 <__aeabi_cfcmpeq>

08000ee4 <__aeabi_cfcmpeq>:
 8000ee4:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ee6:	f7ff ffc9 	bl	8000e7c <__cmpsf2>
 8000eea:	2800      	cmp	r0, #0
 8000eec:	bf48      	it	mi
 8000eee:	f110 0f00 	cmnmi.w	r0, #0
 8000ef2:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ef4 <__aeabi_fcmpeq>:
 8000ef4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef8:	f7ff fff4 	bl	8000ee4 <__aeabi_cfcmpeq>
 8000efc:	bf0c      	ite	eq
 8000efe:	2001      	moveq	r0, #1
 8000f00:	2000      	movne	r0, #0
 8000f02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f06:	bf00      	nop

08000f08 <__aeabi_fcmplt>:
 8000f08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f0c:	f7ff ffea 	bl	8000ee4 <__aeabi_cfcmpeq>
 8000f10:	bf34      	ite	cc
 8000f12:	2001      	movcc	r0, #1
 8000f14:	2000      	movcs	r0, #0
 8000f16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1a:	bf00      	nop

08000f1c <__aeabi_fcmple>:
 8000f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f20:	f7ff ffe0 	bl	8000ee4 <__aeabi_cfcmpeq>
 8000f24:	bf94      	ite	ls
 8000f26:	2001      	movls	r0, #1
 8000f28:	2000      	movhi	r0, #0
 8000f2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2e:	bf00      	nop

08000f30 <__aeabi_fcmpge>:
 8000f30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f34:	f7ff ffd2 	bl	8000edc <__aeabi_cfrcmple>
 8000f38:	bf94      	ite	ls
 8000f3a:	2001      	movls	r0, #1
 8000f3c:	2000      	movhi	r0, #0
 8000f3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f42:	bf00      	nop

08000f44 <__aeabi_fcmpgt>:
 8000f44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f48:	f7ff ffc8 	bl	8000edc <__aeabi_cfrcmple>
 8000f4c:	bf34      	ite	cc
 8000f4e:	2001      	movcc	r0, #1
 8000f50:	2000      	movcs	r0, #0
 8000f52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f56:	bf00      	nop

08000f58 <__aeabi_f2iz>:
 8000f58:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f5c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f60:	d30f      	bcc.n	8000f82 <__aeabi_f2iz+0x2a>
 8000f62:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f66:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f6a:	d90d      	bls.n	8000f88 <__aeabi_f2iz+0x30>
 8000f6c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f74:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f78:	fa23 f002 	lsr.w	r0, r3, r2
 8000f7c:	bf18      	it	ne
 8000f7e:	4240      	negne	r0, r0
 8000f80:	4770      	bx	lr
 8000f82:	f04f 0000 	mov.w	r0, #0
 8000f86:	4770      	bx	lr
 8000f88:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f8c:	d101      	bne.n	8000f92 <__aeabi_f2iz+0x3a>
 8000f8e:	0242      	lsls	r2, r0, #9
 8000f90:	d105      	bne.n	8000f9e <__aeabi_f2iz+0x46>
 8000f92:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f96:	bf08      	it	eq
 8000f98:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f9c:	4770      	bx	lr
 8000f9e:	f04f 0000 	mov.w	r0, #0
 8000fa2:	4770      	bx	lr

08000fa4 <__aeabi_f2uiz>:
 8000fa4:	0042      	lsls	r2, r0, #1
 8000fa6:	d20e      	bcs.n	8000fc6 <__aeabi_f2uiz+0x22>
 8000fa8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fac:	d30b      	bcc.n	8000fc6 <__aeabi_f2uiz+0x22>
 8000fae:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fb2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fb6:	d409      	bmi.n	8000fcc <__aeabi_f2uiz+0x28>
 8000fb8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fc0:	fa23 f002 	lsr.w	r0, r3, r2
 8000fc4:	4770      	bx	lr
 8000fc6:	f04f 0000 	mov.w	r0, #0
 8000fca:	4770      	bx	lr
 8000fcc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fd0:	d101      	bne.n	8000fd6 <__aeabi_f2uiz+0x32>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	d102      	bne.n	8000fdc <__aeabi_f2uiz+0x38>
 8000fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8000fda:	4770      	bx	lr
 8000fdc:	f04f 0000 	mov.w	r0, #0
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_ldivmod>:
 8000fe4:	b97b      	cbnz	r3, 8001006 <__aeabi_ldivmod+0x22>
 8000fe6:	b972      	cbnz	r2, 8001006 <__aeabi_ldivmod+0x22>
 8000fe8:	2900      	cmp	r1, #0
 8000fea:	bfbe      	ittt	lt
 8000fec:	2000      	movlt	r0, #0
 8000fee:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ff2:	e006      	blt.n	8001002 <__aeabi_ldivmod+0x1e>
 8000ff4:	bf08      	it	eq
 8000ff6:	2800      	cmpeq	r0, #0
 8000ff8:	bf1c      	itt	ne
 8000ffa:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ffe:	f04f 30ff 	movne.w	r0, #4294967295
 8001002:	f000 b9a7 	b.w	8001354 <__aeabi_idiv0>
 8001006:	f1ad 0c08 	sub.w	ip, sp, #8
 800100a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800100e:	2900      	cmp	r1, #0
 8001010:	db09      	blt.n	8001026 <__aeabi_ldivmod+0x42>
 8001012:	2b00      	cmp	r3, #0
 8001014:	db1a      	blt.n	800104c <__aeabi_ldivmod+0x68>
 8001016:	f000 f835 	bl	8001084 <__udivmoddi4>
 800101a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800101e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001022:	b004      	add	sp, #16
 8001024:	4770      	bx	lr
 8001026:	4240      	negs	r0, r0
 8001028:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800102c:	2b00      	cmp	r3, #0
 800102e:	db1b      	blt.n	8001068 <__aeabi_ldivmod+0x84>
 8001030:	f000 f828 	bl	8001084 <__udivmoddi4>
 8001034:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001038:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800103c:	b004      	add	sp, #16
 800103e:	4240      	negs	r0, r0
 8001040:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001044:	4252      	negs	r2, r2
 8001046:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800104a:	4770      	bx	lr
 800104c:	4252      	negs	r2, r2
 800104e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001052:	f000 f817 	bl	8001084 <__udivmoddi4>
 8001056:	f8dd e004 	ldr.w	lr, [sp, #4]
 800105a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800105e:	b004      	add	sp, #16
 8001060:	4240      	negs	r0, r0
 8001062:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001066:	4770      	bx	lr
 8001068:	4252      	negs	r2, r2
 800106a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800106e:	f000 f809 	bl	8001084 <__udivmoddi4>
 8001072:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001076:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800107a:	b004      	add	sp, #16
 800107c:	4252      	negs	r2, r2
 800107e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001082:	4770      	bx	lr

08001084 <__udivmoddi4>:
 8001084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001088:	468c      	mov	ip, r1
 800108a:	4604      	mov	r4, r0
 800108c:	9e08      	ldr	r6, [sp, #32]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d14b      	bne.n	800112a <__udivmoddi4+0xa6>
 8001092:	428a      	cmp	r2, r1
 8001094:	4615      	mov	r5, r2
 8001096:	d967      	bls.n	8001168 <__udivmoddi4+0xe4>
 8001098:	fab2 f282 	clz	r2, r2
 800109c:	b14a      	cbz	r2, 80010b2 <__udivmoddi4+0x2e>
 800109e:	f1c2 0720 	rsb	r7, r2, #32
 80010a2:	fa01 f302 	lsl.w	r3, r1, r2
 80010a6:	fa20 f707 	lsr.w	r7, r0, r7
 80010aa:	4095      	lsls	r5, r2
 80010ac:	ea47 0c03 	orr.w	ip, r7, r3
 80010b0:	4094      	lsls	r4, r2
 80010b2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80010b6:	fbbc f7fe 	udiv	r7, ip, lr
 80010ba:	fa1f f885 	uxth.w	r8, r5
 80010be:	fb0e c317 	mls	r3, lr, r7, ip
 80010c2:	fb07 f908 	mul.w	r9, r7, r8
 80010c6:	0c21      	lsrs	r1, r4, #16
 80010c8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80010cc:	4599      	cmp	r9, r3
 80010ce:	d909      	bls.n	80010e4 <__udivmoddi4+0x60>
 80010d0:	18eb      	adds	r3, r5, r3
 80010d2:	f107 31ff 	add.w	r1, r7, #4294967295
 80010d6:	f080 811c 	bcs.w	8001312 <__udivmoddi4+0x28e>
 80010da:	4599      	cmp	r9, r3
 80010dc:	f240 8119 	bls.w	8001312 <__udivmoddi4+0x28e>
 80010e0:	3f02      	subs	r7, #2
 80010e2:	442b      	add	r3, r5
 80010e4:	eba3 0309 	sub.w	r3, r3, r9
 80010e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80010ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80010f0:	fb00 f108 	mul.w	r1, r0, r8
 80010f4:	b2a4      	uxth	r4, r4
 80010f6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80010fa:	42a1      	cmp	r1, r4
 80010fc:	d909      	bls.n	8001112 <__udivmoddi4+0x8e>
 80010fe:	192c      	adds	r4, r5, r4
 8001100:	f100 33ff 	add.w	r3, r0, #4294967295
 8001104:	f080 8107 	bcs.w	8001316 <__udivmoddi4+0x292>
 8001108:	42a1      	cmp	r1, r4
 800110a:	f240 8104 	bls.w	8001316 <__udivmoddi4+0x292>
 800110e:	3802      	subs	r0, #2
 8001110:	442c      	add	r4, r5
 8001112:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001116:	2700      	movs	r7, #0
 8001118:	1a64      	subs	r4, r4, r1
 800111a:	b11e      	cbz	r6, 8001124 <__udivmoddi4+0xa0>
 800111c:	2300      	movs	r3, #0
 800111e:	40d4      	lsrs	r4, r2
 8001120:	e9c6 4300 	strd	r4, r3, [r6]
 8001124:	4639      	mov	r1, r7
 8001126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800112a:	428b      	cmp	r3, r1
 800112c:	d909      	bls.n	8001142 <__udivmoddi4+0xbe>
 800112e:	2e00      	cmp	r6, #0
 8001130:	f000 80ec 	beq.w	800130c <__udivmoddi4+0x288>
 8001134:	2700      	movs	r7, #0
 8001136:	e9c6 0100 	strd	r0, r1, [r6]
 800113a:	4638      	mov	r0, r7
 800113c:	4639      	mov	r1, r7
 800113e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001142:	fab3 f783 	clz	r7, r3
 8001146:	2f00      	cmp	r7, #0
 8001148:	d148      	bne.n	80011dc <__udivmoddi4+0x158>
 800114a:	428b      	cmp	r3, r1
 800114c:	d302      	bcc.n	8001154 <__udivmoddi4+0xd0>
 800114e:	4282      	cmp	r2, r0
 8001150:	f200 80fb 	bhi.w	800134a <__udivmoddi4+0x2c6>
 8001154:	1a84      	subs	r4, r0, r2
 8001156:	eb61 0303 	sbc.w	r3, r1, r3
 800115a:	2001      	movs	r0, #1
 800115c:	469c      	mov	ip, r3
 800115e:	2e00      	cmp	r6, #0
 8001160:	d0e0      	beq.n	8001124 <__udivmoddi4+0xa0>
 8001162:	e9c6 4c00 	strd	r4, ip, [r6]
 8001166:	e7dd      	b.n	8001124 <__udivmoddi4+0xa0>
 8001168:	b902      	cbnz	r2, 800116c <__udivmoddi4+0xe8>
 800116a:	deff      	udf	#255	; 0xff
 800116c:	fab2 f282 	clz	r2, r2
 8001170:	2a00      	cmp	r2, #0
 8001172:	f040 808f 	bne.w	8001294 <__udivmoddi4+0x210>
 8001176:	2701      	movs	r7, #1
 8001178:	1b49      	subs	r1, r1, r5
 800117a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800117e:	fa1f f985 	uxth.w	r9, r5
 8001182:	fbb1 fef8 	udiv	lr, r1, r8
 8001186:	fb08 111e 	mls	r1, r8, lr, r1
 800118a:	fb09 f00e 	mul.w	r0, r9, lr
 800118e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8001192:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8001196:	4298      	cmp	r0, r3
 8001198:	d907      	bls.n	80011aa <__udivmoddi4+0x126>
 800119a:	18eb      	adds	r3, r5, r3
 800119c:	f10e 31ff 	add.w	r1, lr, #4294967295
 80011a0:	d202      	bcs.n	80011a8 <__udivmoddi4+0x124>
 80011a2:	4298      	cmp	r0, r3
 80011a4:	f200 80cd 	bhi.w	8001342 <__udivmoddi4+0x2be>
 80011a8:	468e      	mov	lr, r1
 80011aa:	1a1b      	subs	r3, r3, r0
 80011ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80011b0:	fb08 3310 	mls	r3, r8, r0, r3
 80011b4:	fb09 f900 	mul.w	r9, r9, r0
 80011b8:	b2a4      	uxth	r4, r4
 80011ba:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80011be:	45a1      	cmp	r9, r4
 80011c0:	d907      	bls.n	80011d2 <__udivmoddi4+0x14e>
 80011c2:	192c      	adds	r4, r5, r4
 80011c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80011c8:	d202      	bcs.n	80011d0 <__udivmoddi4+0x14c>
 80011ca:	45a1      	cmp	r9, r4
 80011cc:	f200 80b6 	bhi.w	800133c <__udivmoddi4+0x2b8>
 80011d0:	4618      	mov	r0, r3
 80011d2:	eba4 0409 	sub.w	r4, r4, r9
 80011d6:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80011da:	e79e      	b.n	800111a <__udivmoddi4+0x96>
 80011dc:	f1c7 0520 	rsb	r5, r7, #32
 80011e0:	40bb      	lsls	r3, r7
 80011e2:	fa22 fc05 	lsr.w	ip, r2, r5
 80011e6:	ea4c 0c03 	orr.w	ip, ip, r3
 80011ea:	fa21 f405 	lsr.w	r4, r1, r5
 80011ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80011f2:	fbb4 f9fe 	udiv	r9, r4, lr
 80011f6:	fa1f f88c 	uxth.w	r8, ip
 80011fa:	fb0e 4419 	mls	r4, lr, r9, r4
 80011fe:	fa20 f305 	lsr.w	r3, r0, r5
 8001202:	40b9      	lsls	r1, r7
 8001204:	fb09 fa08 	mul.w	sl, r9, r8
 8001208:	4319      	orrs	r1, r3
 800120a:	0c0b      	lsrs	r3, r1, #16
 800120c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001210:	45a2      	cmp	sl, r4
 8001212:	fa02 f207 	lsl.w	r2, r2, r7
 8001216:	fa00 f307 	lsl.w	r3, r0, r7
 800121a:	d90b      	bls.n	8001234 <__udivmoddi4+0x1b0>
 800121c:	eb1c 0404 	adds.w	r4, ip, r4
 8001220:	f109 30ff 	add.w	r0, r9, #4294967295
 8001224:	f080 8088 	bcs.w	8001338 <__udivmoddi4+0x2b4>
 8001228:	45a2      	cmp	sl, r4
 800122a:	f240 8085 	bls.w	8001338 <__udivmoddi4+0x2b4>
 800122e:	f1a9 0902 	sub.w	r9, r9, #2
 8001232:	4464      	add	r4, ip
 8001234:	eba4 040a 	sub.w	r4, r4, sl
 8001238:	fbb4 f0fe 	udiv	r0, r4, lr
 800123c:	fb0e 4410 	mls	r4, lr, r0, r4
 8001240:	fb00 fa08 	mul.w	sl, r0, r8
 8001244:	b289      	uxth	r1, r1
 8001246:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800124a:	45a2      	cmp	sl, r4
 800124c:	d908      	bls.n	8001260 <__udivmoddi4+0x1dc>
 800124e:	eb1c 0404 	adds.w	r4, ip, r4
 8001252:	f100 31ff 	add.w	r1, r0, #4294967295
 8001256:	d26b      	bcs.n	8001330 <__udivmoddi4+0x2ac>
 8001258:	45a2      	cmp	sl, r4
 800125a:	d969      	bls.n	8001330 <__udivmoddi4+0x2ac>
 800125c:	3802      	subs	r0, #2
 800125e:	4464      	add	r4, ip
 8001260:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001264:	fba0 8902 	umull	r8, r9, r0, r2
 8001268:	eba4 040a 	sub.w	r4, r4, sl
 800126c:	454c      	cmp	r4, r9
 800126e:	4641      	mov	r1, r8
 8001270:	46ce      	mov	lr, r9
 8001272:	d354      	bcc.n	800131e <__udivmoddi4+0x29a>
 8001274:	d051      	beq.n	800131a <__udivmoddi4+0x296>
 8001276:	2e00      	cmp	r6, #0
 8001278:	d069      	beq.n	800134e <__udivmoddi4+0x2ca>
 800127a:	1a5a      	subs	r2, r3, r1
 800127c:	eb64 040e 	sbc.w	r4, r4, lr
 8001280:	fa04 f505 	lsl.w	r5, r4, r5
 8001284:	fa22 f307 	lsr.w	r3, r2, r7
 8001288:	40fc      	lsrs	r4, r7
 800128a:	431d      	orrs	r5, r3
 800128c:	e9c6 5400 	strd	r5, r4, [r6]
 8001290:	2700      	movs	r7, #0
 8001292:	e747      	b.n	8001124 <__udivmoddi4+0xa0>
 8001294:	4095      	lsls	r5, r2
 8001296:	f1c2 0320 	rsb	r3, r2, #32
 800129a:	fa21 f003 	lsr.w	r0, r1, r3
 800129e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80012a2:	fbb0 f7f8 	udiv	r7, r0, r8
 80012a6:	fa1f f985 	uxth.w	r9, r5
 80012aa:	fb08 0017 	mls	r0, r8, r7, r0
 80012ae:	fa24 f303 	lsr.w	r3, r4, r3
 80012b2:	4091      	lsls	r1, r2
 80012b4:	fb07 fc09 	mul.w	ip, r7, r9
 80012b8:	430b      	orrs	r3, r1
 80012ba:	0c19      	lsrs	r1, r3, #16
 80012bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80012c0:	458c      	cmp	ip, r1
 80012c2:	fa04 f402 	lsl.w	r4, r4, r2
 80012c6:	d907      	bls.n	80012d8 <__udivmoddi4+0x254>
 80012c8:	1869      	adds	r1, r5, r1
 80012ca:	f107 30ff 	add.w	r0, r7, #4294967295
 80012ce:	d231      	bcs.n	8001334 <__udivmoddi4+0x2b0>
 80012d0:	458c      	cmp	ip, r1
 80012d2:	d92f      	bls.n	8001334 <__udivmoddi4+0x2b0>
 80012d4:	3f02      	subs	r7, #2
 80012d6:	4429      	add	r1, r5
 80012d8:	eba1 010c 	sub.w	r1, r1, ip
 80012dc:	fbb1 f0f8 	udiv	r0, r1, r8
 80012e0:	fb08 1c10 	mls	ip, r8, r0, r1
 80012e4:	fb00 fe09 	mul.w	lr, r0, r9
 80012e8:	b299      	uxth	r1, r3
 80012ea:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80012ee:	458e      	cmp	lr, r1
 80012f0:	d907      	bls.n	8001302 <__udivmoddi4+0x27e>
 80012f2:	1869      	adds	r1, r5, r1
 80012f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80012f8:	d218      	bcs.n	800132c <__udivmoddi4+0x2a8>
 80012fa:	458e      	cmp	lr, r1
 80012fc:	d916      	bls.n	800132c <__udivmoddi4+0x2a8>
 80012fe:	3802      	subs	r0, #2
 8001300:	4429      	add	r1, r5
 8001302:	eba1 010e 	sub.w	r1, r1, lr
 8001306:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800130a:	e73a      	b.n	8001182 <__udivmoddi4+0xfe>
 800130c:	4637      	mov	r7, r6
 800130e:	4630      	mov	r0, r6
 8001310:	e708      	b.n	8001124 <__udivmoddi4+0xa0>
 8001312:	460f      	mov	r7, r1
 8001314:	e6e6      	b.n	80010e4 <__udivmoddi4+0x60>
 8001316:	4618      	mov	r0, r3
 8001318:	e6fb      	b.n	8001112 <__udivmoddi4+0x8e>
 800131a:	4543      	cmp	r3, r8
 800131c:	d2ab      	bcs.n	8001276 <__udivmoddi4+0x1f2>
 800131e:	ebb8 0102 	subs.w	r1, r8, r2
 8001322:	eb69 020c 	sbc.w	r2, r9, ip
 8001326:	3801      	subs	r0, #1
 8001328:	4696      	mov	lr, r2
 800132a:	e7a4      	b.n	8001276 <__udivmoddi4+0x1f2>
 800132c:	4618      	mov	r0, r3
 800132e:	e7e8      	b.n	8001302 <__udivmoddi4+0x27e>
 8001330:	4608      	mov	r0, r1
 8001332:	e795      	b.n	8001260 <__udivmoddi4+0x1dc>
 8001334:	4607      	mov	r7, r0
 8001336:	e7cf      	b.n	80012d8 <__udivmoddi4+0x254>
 8001338:	4681      	mov	r9, r0
 800133a:	e77b      	b.n	8001234 <__udivmoddi4+0x1b0>
 800133c:	3802      	subs	r0, #2
 800133e:	442c      	add	r4, r5
 8001340:	e747      	b.n	80011d2 <__udivmoddi4+0x14e>
 8001342:	f1ae 0e02 	sub.w	lr, lr, #2
 8001346:	442b      	add	r3, r5
 8001348:	e72f      	b.n	80011aa <__udivmoddi4+0x126>
 800134a:	4638      	mov	r0, r7
 800134c:	e707      	b.n	800115e <__udivmoddi4+0xda>
 800134e:	4637      	mov	r7, r6
 8001350:	e6e8      	b.n	8001124 <__udivmoddi4+0xa0>
 8001352:	bf00      	nop

08001354 <__aeabi_idiv0>:
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop

08001358 <read_type_of_capsule>:
#include "main.h"
#include "lcd.h"
#include "modules.h"
#include "core.h"

int read_type_of_capsule(int code1, int code2, int code3){
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]

	LCD_Clear();
 8001364:	f000 fa6e 	bl	8001844 <LCD_Clear>
	if(code1){
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d01d      	beq.n	80013aa <read_type_of_capsule+0x52>
		if(!code3 && !code2){	// code 100 - tipo 5 - Refrigerante
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d10e      	bne.n	8001392 <read_type_of_capsule+0x3a>
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10b      	bne.n	8001392 <read_type_of_capsule+0x3a>

			LCD_String_xy(1,2,"Refrigerante");
 800137a:	4a22      	ldr	r2, [pc, #136]	; (8001404 <read_type_of_capsule+0xac>)
 800137c:	2102      	movs	r1, #2
 800137e:	2001      	movs	r0, #1
 8001380:	f000 fb89 	bl	8001a96 <LCD_String_xy>
			LCD_String_xy(2,4,"Confirma?");
 8001384:	4a20      	ldr	r2, [pc, #128]	; (8001408 <read_type_of_capsule+0xb0>)
 8001386:	2104      	movs	r1, #4
 8001388:	2002      	movs	r0, #2
 800138a:	f000 fb84 	bl	8001a96 <LCD_String_xy>
			return 5;
 800138e:	2305      	movs	r3, #5
 8001390:	e034      	b.n	80013fc <read_type_of_capsule+0xa4>
		}
		else{
			LCD_String_xy(1,4,"Erro na");
 8001392:	4a1e      	ldr	r2, [pc, #120]	; (800140c <read_type_of_capsule+0xb4>)
 8001394:	2104      	movs	r1, #4
 8001396:	2001      	movs	r0, #1
 8001398:	f000 fb7d 	bl	8001a96 <LCD_String_xy>
			LCD_String_xy(2,4,"leitura!");
 800139c:	4a1c      	ldr	r2, [pc, #112]	; (8001410 <read_type_of_capsule+0xb8>)
 800139e:	2104      	movs	r1, #4
 80013a0:	2002      	movs	r0, #2
 80013a2:	f000 fb78 	bl	8001a96 <LCD_String_xy>
			return 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	e028      	b.n	80013fc <read_type_of_capsule+0xa4>
		}
	}
	else{
		LCD_String_xy(2,4,"Confirma?");
 80013aa:	4a17      	ldr	r2, [pc, #92]	; (8001408 <read_type_of_capsule+0xb0>)
 80013ac:	2104      	movs	r1, #4
 80013ae:	2002      	movs	r0, #2
 80013b0:	f000 fb71 	bl	8001a96 <LCD_String_xy>
		if(code2==1){
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d110      	bne.n	80013dc <read_type_of_capsule+0x84>
			if(code3==1){ // code 011 - Tipo 4 - Chá Quente
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d106      	bne.n	80013ce <read_type_of_capsule+0x76>
				LCD_String_xy(1,2,"Chá quente");
 80013c0:	4a14      	ldr	r2, [pc, #80]	; (8001414 <read_type_of_capsule+0xbc>)
 80013c2:	2102      	movs	r1, #2
 80013c4:	2001      	movs	r0, #1
 80013c6:	f000 fb66 	bl	8001a96 <LCD_String_xy>
				return 4;
 80013ca:	2304      	movs	r3, #4
 80013cc:	e016      	b.n	80013fc <read_type_of_capsule+0xa4>
			}
			else{ // code 010 - Tipo 3 - Chá Gelado
				LCD_String_xy(1,2,"Chá gelado");
 80013ce:	4a12      	ldr	r2, [pc, #72]	; (8001418 <read_type_of_capsule+0xc0>)
 80013d0:	2102      	movs	r1, #2
 80013d2:	2001      	movs	r0, #1
 80013d4:	f000 fb5f 	bl	8001a96 <LCD_String_xy>
				return 3;
 80013d8:	2303      	movs	r3, #3
 80013da:	e00f      	b.n	80013fc <read_type_of_capsule+0xa4>
			}
		}
		else{
			if(code3==1){ // code 001 - Tipo 2 - Agua c/ gás
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d106      	bne.n	80013f0 <read_type_of_capsule+0x98>
				LCD_String_xy(1,2,"Agua c/ gás");
 80013e2:	4a0e      	ldr	r2, [pc, #56]	; (800141c <read_type_of_capsule+0xc4>)
 80013e4:	2102      	movs	r1, #2
 80013e6:	2001      	movs	r0, #1
 80013e8:	f000 fb55 	bl	8001a96 <LCD_String_xy>
				return 2;
 80013ec:	2302      	movs	r3, #2
 80013ee:	e005      	b.n	80013fc <read_type_of_capsule+0xa4>
			}
			else{ // code 000 - Tipo 1 - Agua
				LCD_String_xy(1,6,"Agua");
 80013f0:	4a0b      	ldr	r2, [pc, #44]	; (8001420 <read_type_of_capsule+0xc8>)
 80013f2:	2106      	movs	r1, #6
 80013f4:	2001      	movs	r0, #1
 80013f6:	f000 fb4e 	bl	8001a96 <LCD_String_xy>
				return 1;
 80013fa:	2301      	movs	r3, #1
			}
		}
	}
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	0800755c 	.word	0x0800755c
 8001408:	0800756c 	.word	0x0800756c
 800140c:	08007578 	.word	0x08007578
 8001410:	08007580 	.word	0x08007580
 8001414:	0800758c 	.word	0x0800758c
 8001418:	08007598 	.word	0x08007598
 800141c:	080075a4 	.word	0x080075a4
 8001420:	080075b4 	.word	0x080075b4

08001424 <preparing>:

void preparing(int type, ADC_HandleTypeDef* hadc1){
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
	LCD_Clear();
 800142e:	f000 fa09 	bl	8001844 <LCD_Clear>
	int confirm = 0, add = 0, sub = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	617b      	str	r3, [r7, #20]
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	2300      	movs	r3, #0
 800143c:	60bb      	str	r3, [r7, #8]
	int choice=0; // (0 - Natural, 1 - Quente, 2 - Gelada)
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
	HAL_Delay(500);
 8001442:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001446:	f001 fce9 	bl	8002e1c <HAL_Delay>
	switch (type){
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	3b01      	subs	r3, #1
 800144e:	2b04      	cmp	r3, #4
 8001450:	f200 8129 	bhi.w	80016a6 <preparing+0x282>
 8001454:	a201      	add	r2, pc, #4	; (adr r2, 800145c <preparing+0x38>)
 8001456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800145a:	bf00      	nop
 800145c:	08001471 	.word	0x08001471
 8001460:	080015bb 	.word	0x080015bb
 8001464:	08001601 	.word	0x08001601
 8001468:	08001631 	.word	0x08001631
 800146c:	08001661 	.word	0x08001661
		case 1:
			LCD_String_xy(1,2,"Escolha: (+/-)");
 8001470:	4a93      	ldr	r2, [pc, #588]	; (80016c0 <preparing+0x29c>)
 8001472:	2102      	movs	r1, #2
 8001474:	2001      	movs	r0, #1
 8001476:	f000 fb0e 	bl	8001a96 <LCD_String_xy>
			LCD_String_xy(2,4,"Natural");
 800147a:	4a92      	ldr	r2, [pc, #584]	; (80016c4 <preparing+0x2a0>)
 800147c:	2104      	movs	r1, #4
 800147e:	2002      	movs	r0, #2
 8001480:	f000 fb09 	bl	8001a96 <LCD_String_xy>
			while(confirm==0){
 8001484:	e055      	b.n	8001532 <preparing+0x10e>
				confirm = HAL_GPIO_ReadPin(GPIOB, CONFIRM_Pin);
 8001486:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800148a:	488f      	ldr	r0, [pc, #572]	; (80016c8 <preparing+0x2a4>)
 800148c:	f002 fd8c 	bl	8003fa8 <HAL_GPIO_ReadPin>
 8001490:	4603      	mov	r3, r0
 8001492:	617b      	str	r3, [r7, #20]
				add = HAL_GPIO_ReadPin(GPIOB, ADD_Pin);
 8001494:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001498:	488b      	ldr	r0, [pc, #556]	; (80016c8 <preparing+0x2a4>)
 800149a:	f002 fd85 	bl	8003fa8 <HAL_GPIO_ReadPin>
 800149e:	4603      	mov	r3, r0
 80014a0:	60fb      	str	r3, [r7, #12]
				sub = HAL_GPIO_ReadPin(GPIOB, SUB_Pin);
 80014a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014a6:	4888      	ldr	r0, [pc, #544]	; (80016c8 <preparing+0x2a4>)
 80014a8:	f002 fd7e 	bl	8003fa8 <HAL_GPIO_ReadPin>
 80014ac:	4603      	mov	r3, r0
 80014ae:	60bb      	str	r3, [r7, #8]
				HAL_Delay(500);
 80014b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014b4:	f001 fcb2 	bl	8002e1c <HAL_Delay>
				if(add || sub){
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d102      	bne.n	80014c4 <preparing+0xa0>
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d036      	beq.n	8001532 <preparing+0x10e>
					if(add){
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d007      	beq.n	80014da <preparing+0xb6>
						choice++;
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	3301      	adds	r3, #1
 80014ce:	613b      	str	r3, [r7, #16]
						if(choice>2){
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	dd01      	ble.n	80014da <preparing+0xb6>
							choice = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
						}
					}
					if(sub){
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d007      	beq.n	80014f0 <preparing+0xcc>
						choice--;
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	613b      	str	r3, [r7, #16]
						if(choice<0){
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	da01      	bge.n	80014f0 <preparing+0xcc>
							choice=2;
 80014ec:	2302      	movs	r3, #2
 80014ee:	613b      	str	r3, [r7, #16]
						}
					}
					LCD_Clear();
 80014f0:	f000 f9a8 	bl	8001844 <LCD_Clear>
					LCD_String_xy(1,2,"Escolha: (+/-)");
 80014f4:	4a72      	ldr	r2, [pc, #456]	; (80016c0 <preparing+0x29c>)
 80014f6:	2102      	movs	r1, #2
 80014f8:	2001      	movs	r0, #1
 80014fa:	f000 facc 	bl	8001a96 <LCD_String_xy>
					switch (choice){
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d00a      	beq.n	800151a <preparing+0xf6>
 8001504:	2b02      	cmp	r3, #2
 8001506:	d00e      	beq.n	8001526 <preparing+0x102>
 8001508:	2b00      	cmp	r3, #0
 800150a:	d000      	beq.n	800150e <preparing+0xea>
 800150c:	e011      	b.n	8001532 <preparing+0x10e>
						case 0: LCD_String_xy(2,4,"Natural"); break;
 800150e:	4a6d      	ldr	r2, [pc, #436]	; (80016c4 <preparing+0x2a0>)
 8001510:	2104      	movs	r1, #4
 8001512:	2002      	movs	r0, #2
 8001514:	f000 fabf 	bl	8001a96 <LCD_String_xy>
 8001518:	e00b      	b.n	8001532 <preparing+0x10e>
						case 1:	LCD_String_xy(2,4,"Quente"); break;
 800151a:	4a6c      	ldr	r2, [pc, #432]	; (80016cc <preparing+0x2a8>)
 800151c:	2104      	movs	r1, #4
 800151e:	2002      	movs	r0, #2
 8001520:	f000 fab9 	bl	8001a96 <LCD_String_xy>
 8001524:	e005      	b.n	8001532 <preparing+0x10e>
						case 2: LCD_String_xy(2,4,"Gelada"); break;
 8001526:	4a6a      	ldr	r2, [pc, #424]	; (80016d0 <preparing+0x2ac>)
 8001528:	2104      	movs	r1, #4
 800152a:	2002      	movs	r0, #2
 800152c:	f000 fab3 	bl	8001a96 <LCD_String_xy>
 8001530:	bf00      	nop
			while(confirm==0){
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0a6      	beq.n	8001486 <preparing+0x62>
					}
				}
			}

			LCD_Clear();
 8001538:	f000 f984 	bl	8001844 <LCD_Clear>
			switch (choice){
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d011      	beq.n	8001566 <preparing+0x142>
 8001542:	2b02      	cmp	r3, #2
 8001544:	d022      	beq.n	800158c <preparing+0x168>
 8001546:	2b00      	cmp	r3, #0
 8001548:	d000      	beq.n	800154c <preparing+0x128>
					LCD_String_xy(1,4,"Gelada");
					add_water(3000, 2);
					LCD_Clear();
					break;
			}
			break;
 800154a:	e0ac      	b.n	80016a6 <preparing+0x282>
					LCD_String_xy(1,4,"Natural");
 800154c:	4a5d      	ldr	r2, [pc, #372]	; (80016c4 <preparing+0x2a0>)
 800154e:	2104      	movs	r1, #4
 8001550:	2001      	movs	r0, #1
 8001552:	f000 faa0 	bl	8001a96 <LCD_String_xy>
					add_water(3000, 0);
 8001556:	2100      	movs	r1, #0
 8001558:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800155c:	f000 ff40 	bl	80023e0 <add_water>
					LCD_Clear();
 8001560:	f000 f970 	bl	8001844 <LCD_Clear>
					break;
 8001564:	e028      	b.n	80015b8 <preparing+0x194>
					heater(60, hadc1);
 8001566:	6839      	ldr	r1, [r7, #0]
 8001568:	485a      	ldr	r0, [pc, #360]	; (80016d4 <preparing+0x2b0>)
 800156a:	f001 f809 	bl	8002580 <heater>
					LCD_Clear();
 800156e:	f000 f969 	bl	8001844 <LCD_Clear>
					LCD_String_xy(1,4,"Quente");
 8001572:	4a56      	ldr	r2, [pc, #344]	; (80016cc <preparing+0x2a8>)
 8001574:	2104      	movs	r1, #4
 8001576:	2001      	movs	r0, #1
 8001578:	f000 fa8d 	bl	8001a96 <LCD_String_xy>
					add_water(3000, 1);
 800157c:	2101      	movs	r1, #1
 800157e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001582:	f000 ff2d 	bl	80023e0 <add_water>
					LCD_Clear();
 8001586:	f000 f95d 	bl	8001844 <LCD_Clear>
					break;
 800158a:	e015      	b.n	80015b8 <preparing+0x194>
					HAL_Delay(100);
 800158c:	2064      	movs	r0, #100	; 0x64
 800158e:	f001 fc45 	bl	8002e1c <HAL_Delay>
					cooler(15, hadc1);
 8001592:	6839      	ldr	r1, [r7, #0]
 8001594:	4850      	ldr	r0, [pc, #320]	; (80016d8 <preparing+0x2b4>)
 8001596:	f001 f8ff 	bl	8002798 <cooler>
					LCD_Clear();
 800159a:	f000 f953 	bl	8001844 <LCD_Clear>
					LCD_String_xy(1,4,"Gelada");
 800159e:	4a4c      	ldr	r2, [pc, #304]	; (80016d0 <preparing+0x2ac>)
 80015a0:	2104      	movs	r1, #4
 80015a2:	2001      	movs	r0, #1
 80015a4:	f000 fa77 	bl	8001a96 <LCD_String_xy>
					add_water(3000, 2);
 80015a8:	2102      	movs	r1, #2
 80015aa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80015ae:	f000 ff17 	bl	80023e0 <add_water>
					LCD_Clear();
 80015b2:	f000 f947 	bl	8001844 <LCD_Clear>
					break;
 80015b6:	bf00      	nop
			break;
 80015b8:	e075      	b.n	80016a6 <preparing+0x282>
		case 2:
			LCD_String_xy(1,2,"Agua c/ gás");
 80015ba:	4a48      	ldr	r2, [pc, #288]	; (80016dc <preparing+0x2b8>)
 80015bc:	2102      	movs	r1, #2
 80015be:	2001      	movs	r0, #1
 80015c0:	f000 fa69 	bl	8001a96 <LCD_String_xy>
			cooler(15, hadc1);
 80015c4:	6839      	ldr	r1, [r7, #0]
 80015c6:	4844      	ldr	r0, [pc, #272]	; (80016d8 <preparing+0x2b4>)
 80015c8:	f001 f8e6 	bl	8002798 <cooler>
			LCD_Clear();
 80015cc:	f000 f93a 	bl	8001844 <LCD_Clear>
			LCD_String_xy(1,2,"Agua c/ gás");
 80015d0:	4a42      	ldr	r2, [pc, #264]	; (80016dc <preparing+0x2b8>)
 80015d2:	2102      	movs	r1, #2
 80015d4:	2001      	movs	r0, #1
 80015d6:	f000 fa5e 	bl	8001a96 <LCD_String_xy>
			add_water(3000, 2);
 80015da:	2102      	movs	r1, #2
 80015dc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80015e0:	f000 fefe 	bl	80023e0 <add_water>
			LCD_Clear();
 80015e4:	f000 f92e 	bl	8001844 <LCD_Clear>
			LCD_String_xy(1,2,"Agua c/ gás");
 80015e8:	4a3c      	ldr	r2, [pc, #240]	; (80016dc <preparing+0x2b8>)
 80015ea:	2102      	movs	r1, #2
 80015ec:	2001      	movs	r0, #1
 80015ee:	f000 fa52 	bl	8001a96 <LCD_String_xy>
			add_co2(1500);
 80015f2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80015f6:	f000 ff75 	bl	80024e4 <add_co2>
			LCD_Clear();
 80015fa:	f000 f923 	bl	8001844 <LCD_Clear>
			break;
 80015fe:	e052      	b.n	80016a6 <preparing+0x282>
		case 3:
			LCD_String_xy(1,2,"Chá gelado");
 8001600:	4a37      	ldr	r2, [pc, #220]	; (80016e0 <preparing+0x2bc>)
 8001602:	2102      	movs	r1, #2
 8001604:	2001      	movs	r0, #1
 8001606:	f000 fa46 	bl	8001a96 <LCD_String_xy>
			cooler(20, hadc1);
 800160a:	6839      	ldr	r1, [r7, #0]
 800160c:	4835      	ldr	r0, [pc, #212]	; (80016e4 <preparing+0x2c0>)
 800160e:	f001 f8c3 	bl	8002798 <cooler>
			LCD_Clear();
 8001612:	f000 f917 	bl	8001844 <LCD_Clear>
			LCD_String_xy(1,2,"Chá gelado");
 8001616:	4a32      	ldr	r2, [pc, #200]	; (80016e0 <preparing+0x2bc>)
 8001618:	2102      	movs	r1, #2
 800161a:	2001      	movs	r0, #1
 800161c:	f000 fa3b 	bl	8001a96 <LCD_String_xy>
			add_water(2700, 2);
 8001620:	2102      	movs	r1, #2
 8001622:	f640 208c 	movw	r0, #2700	; 0xa8c
 8001626:	f000 fedb 	bl	80023e0 <add_water>
			LCD_Clear();
 800162a:	f000 f90b 	bl	8001844 <LCD_Clear>
			break;
 800162e:	e03a      	b.n	80016a6 <preparing+0x282>
		case 4:
			LCD_String_xy(1,2,"Chá quente");
 8001630:	4a2d      	ldr	r2, [pc, #180]	; (80016e8 <preparing+0x2c4>)
 8001632:	2102      	movs	r1, #2
 8001634:	2001      	movs	r0, #1
 8001636:	f000 fa2e 	bl	8001a96 <LCD_String_xy>
			heater(60, hadc1);
 800163a:	6839      	ldr	r1, [r7, #0]
 800163c:	4825      	ldr	r0, [pc, #148]	; (80016d4 <preparing+0x2b0>)
 800163e:	f000 ff9f 	bl	8002580 <heater>
			LCD_Clear();
 8001642:	f000 f8ff 	bl	8001844 <LCD_Clear>
			LCD_String_xy(1,2,"Chá quente");
 8001646:	4a28      	ldr	r2, [pc, #160]	; (80016e8 <preparing+0x2c4>)
 8001648:	2102      	movs	r1, #2
 800164a:	2001      	movs	r0, #1
 800164c:	f000 fa23 	bl	8001a96 <LCD_String_xy>
			add_water(2700, 1);
 8001650:	2101      	movs	r1, #1
 8001652:	f640 208c 	movw	r0, #2700	; 0xa8c
 8001656:	f000 fec3 	bl	80023e0 <add_water>
			LCD_Clear();
 800165a:	f000 f8f3 	bl	8001844 <LCD_Clear>
			break;
 800165e:	e022      	b.n	80016a6 <preparing+0x282>
		case 5:
			LCD_String_xy(1,2,"Refrigerante");
 8001660:	4a22      	ldr	r2, [pc, #136]	; (80016ec <preparing+0x2c8>)
 8001662:	2102      	movs	r1, #2
 8001664:	2001      	movs	r0, #1
 8001666:	f000 fa16 	bl	8001a96 <LCD_String_xy>
			cooler(17, hadc1);
 800166a:	6839      	ldr	r1, [r7, #0]
 800166c:	4820      	ldr	r0, [pc, #128]	; (80016f0 <preparing+0x2cc>)
 800166e:	f001 f893 	bl	8002798 <cooler>
			LCD_Clear();
 8001672:	f000 f8e7 	bl	8001844 <LCD_Clear>
			LCD_String_xy(1,2,"Refrigerante");
 8001676:	4a1d      	ldr	r2, [pc, #116]	; (80016ec <preparing+0x2c8>)
 8001678:	2102      	movs	r1, #2
 800167a:	2001      	movs	r0, #1
 800167c:	f000 fa0b 	bl	8001a96 <LCD_String_xy>
			add_water(4000, 2);
 8001680:	2102      	movs	r1, #2
 8001682:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001686:	f000 feab 	bl	80023e0 <add_water>
			LCD_Clear();
 800168a:	f000 f8db 	bl	8001844 <LCD_Clear>
			LCD_String_xy(1,2,"Refrigerante");
 800168e:	4a17      	ldr	r2, [pc, #92]	; (80016ec <preparing+0x2c8>)
 8001690:	2102      	movs	r1, #2
 8001692:	2001      	movs	r0, #1
 8001694:	f000 f9ff 	bl	8001a96 <LCD_String_xy>
			add_co2(2560);
 8001698:	f44f 6020 	mov.w	r0, #2560	; 0xa00
 800169c:	f000 ff22 	bl	80024e4 <add_co2>
			LCD_Clear();
 80016a0:	f000 f8d0 	bl	8001844 <LCD_Clear>
			break;
 80016a4:	bf00      	nop
	}

	LCD_String_xy(2,4,"Pronto!");
 80016a6:	4a13      	ldr	r2, [pc, #76]	; (80016f4 <preparing+0x2d0>)
 80016a8:	2104      	movs	r1, #4
 80016aa:	2002      	movs	r0, #2
 80016ac:	f000 f9f3 	bl	8001a96 <LCD_String_xy>
	HAL_Delay(3000);
 80016b0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80016b4:	f001 fbb2 	bl	8002e1c <HAL_Delay>
}
 80016b8:	bf00      	nop
 80016ba:	3718      	adds	r7, #24
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	080075bc 	.word	0x080075bc
 80016c4:	080075cc 	.word	0x080075cc
 80016c8:	40010c00 	.word	0x40010c00
 80016cc:	080075d4 	.word	0x080075d4
 80016d0:	080075dc 	.word	0x080075dc
 80016d4:	42700000 	.word	0x42700000
 80016d8:	41700000 	.word	0x41700000
 80016dc:	080075a4 	.word	0x080075a4
 80016e0:	08007598 	.word	0x08007598
 80016e4:	41a00000 	.word	0x41a00000
 80016e8:	0800758c 	.word	0x0800758c
 80016ec:	0800755c 	.word	0x0800755c
 80016f0:	41880000 	.word	0x41880000
 80016f4:	080075e4 	.word	0x080075e4

080016f8 <writePort>:
char ccedilha [2] = "ç";
char oacentuado [2] = "ó";
char grau [2] = "°";


void writePort(char x){ // Função auxiliar para escrever na porta 8 bits
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	71fb      	strb	r3, [r7, #7]
	int value;
	value = x & 0x01;
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, value);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	b2db      	uxtb	r3, r3
 800170e:	461a      	mov	r2, r3
 8001710:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001714:	482a      	ldr	r0, [pc, #168]	; (80017c0 <writePort+0xc8>)
 8001716:	f002 fc5e 	bl	8003fd6 <HAL_GPIO_WritePin>
	value = x & 0x02;
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, value);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	b2db      	uxtb	r3, r3
 8001726:	461a      	mov	r2, r3
 8001728:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800172c:	4824      	ldr	r0, [pc, #144]	; (80017c0 <writePort+0xc8>)
 800172e:	f002 fc52 	bl	8003fd6 <HAL_GPIO_WritePin>
	value = x & 0x04;
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	f003 0304 	and.w	r3, r3, #4
 8001738:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, value);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	461a      	mov	r2, r3
 8001740:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001744:	481e      	ldr	r0, [pc, #120]	; (80017c0 <writePort+0xc8>)
 8001746:	f002 fc46 	bl	8003fd6 <HAL_GPIO_WritePin>
	value = x & 0x08;
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	f003 0308 	and.w	r3, r3, #8
 8001750:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, value);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	b2db      	uxtb	r3, r3
 8001756:	461a      	mov	r2, r3
 8001758:	2108      	movs	r1, #8
 800175a:	481a      	ldr	r0, [pc, #104]	; (80017c4 <writePort+0xcc>)
 800175c:	f002 fc3b 	bl	8003fd6 <HAL_GPIO_WritePin>
	value = x & 0x10;
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	f003 0310 	and.w	r3, r3, #16
 8001766:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, value);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	b2db      	uxtb	r3, r3
 800176c:	461a      	mov	r2, r3
 800176e:	2110      	movs	r1, #16
 8001770:	4814      	ldr	r0, [pc, #80]	; (80017c4 <writePort+0xcc>)
 8001772:	f002 fc30 	bl	8003fd6 <HAL_GPIO_WritePin>
	value = x & 0x20;
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	f003 0320 	and.w	r3, r3, #32
 800177c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, value);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	b2db      	uxtb	r3, r3
 8001782:	461a      	mov	r2, r3
 8001784:	2120      	movs	r1, #32
 8001786:	480f      	ldr	r0, [pc, #60]	; (80017c4 <writePort+0xcc>)
 8001788:	f002 fc25 	bl	8003fd6 <HAL_GPIO_WritePin>
	value = x & 0x40;
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001792:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, value);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	b2db      	uxtb	r3, r3
 8001798:	461a      	mov	r2, r3
 800179a:	2140      	movs	r1, #64	; 0x40
 800179c:	4809      	ldr	r0, [pc, #36]	; (80017c4 <writePort+0xcc>)
 800179e:	f002 fc1a 	bl	8003fd6 <HAL_GPIO_WritePin>
	value = x & 0x80;
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017a8:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, value);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	461a      	mov	r2, r3
 80017b0:	2180      	movs	r1, #128	; 0x80
 80017b2:	4804      	ldr	r0, [pc, #16]	; (80017c4 <writePort+0xcc>)
 80017b4:	f002 fc0f 	bl	8003fd6 <HAL_GPIO_WritePin>
}
 80017b8:	bf00      	nop
 80017ba:	3710      	adds	r7, #16
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40010800 	.word	0x40010800
 80017c4:	40010c00 	.word	0x40010c00

080017c8 <LCD_Init>:


void LCD_Init()  // Inicializa
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
	LCD_Custom_Char(0, acomacento);
 80017cc:	4916      	ldr	r1, [pc, #88]	; (8001828 <LCD_Init+0x60>)
 80017ce:	2000      	movs	r0, #0
 80017d0:	f000 f93c 	bl	8001a4c <LCD_Custom_Char>
	LCD_Custom_Char(1, acomtil);
 80017d4:	4915      	ldr	r1, [pc, #84]	; (800182c <LCD_Init+0x64>)
 80017d6:	2001      	movs	r0, #1
 80017d8:	f000 f938 	bl	8001a4c <LCD_Custom_Char>
	LCD_Custom_Char(2, ecomacento);
 80017dc:	4914      	ldr	r1, [pc, #80]	; (8001830 <LCD_Init+0x68>)
 80017de:	2002      	movs	r0, #2
 80017e0:	f000 f934 	bl	8001a4c <LCD_Custom_Char>
	LCD_Custom_Char(3, ocomtil);
 80017e4:	4913      	ldr	r1, [pc, #76]	; (8001834 <LCD_Init+0x6c>)
 80017e6:	2003      	movs	r0, #3
 80017e8:	f000 f930 	bl	8001a4c <LCD_Custom_Char>
	LCD_Custom_Char(4, cedilha); // Salva desenhos dos caracteres especiais
 80017ec:	4912      	ldr	r1, [pc, #72]	; (8001838 <LCD_Init+0x70>)
 80017ee:	2004      	movs	r0, #4
 80017f0:	f000 f92c 	bl	8001a4c <LCD_Custom_Char>
	LCD_Custom_Char(5, ocomacento);
 80017f4:	4911      	ldr	r1, [pc, #68]	; (800183c <LCD_Init+0x74>)
 80017f6:	2005      	movs	r0, #5
 80017f8:	f000 f928 	bl	8001a4c <LCD_Custom_Char>
	LCD_Custom_Char(6, grausimbolo);
 80017fc:	4910      	ldr	r1, [pc, #64]	; (8001840 <LCD_Init+0x78>)
 80017fe:	2006      	movs	r0, #6
 8001800:	f000 f924 	bl	8001a4c <LCD_Custom_Char>

	HAL_Delay(15);
 8001804:	200f      	movs	r0, #15
 8001806:	f001 fb09 	bl	8002e1c <HAL_Delay>
    LCD_Command(0x38);
 800180a:	2038      	movs	r0, #56	; 0x38
 800180c:	f000 f822 	bl	8001854 <LCD_Command>
    LCD_Command(0x01);
 8001810:	2001      	movs	r0, #1
 8001812:	f000 f81f 	bl	8001854 <LCD_Command>
    LCD_Command(0x0c);
 8001816:	200c      	movs	r0, #12
 8001818:	f000 f81c 	bl	8001854 <LCD_Command>
    LCD_Command(0x06);
 800181c:	2006      	movs	r0, #6
 800181e:	f000 f819 	bl	8001854 <LCD_Command>
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000000 	.word	0x20000000
 800182c:	20000008 	.word	0x20000008
 8001830:	20000018 	.word	0x20000018
 8001834:	20000020 	.word	0x20000020
 8001838:	20000010 	.word	0x20000010
 800183c:	20000028 	.word	0x20000028
 8001840:	20000030 	.word	0x20000030

08001844 <LCD_Clear>:

void LCD_Clear() // Limpa o display
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
    	LCD_Command(0x01);
 8001848:	2001      	movs	r0, #1
 800184a:	f000 f803 	bl	8001854 <LCD_Command>
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
	...

08001854 <LCD_Command>:

void LCD_Command(char cmd) // Envia comandos para o display
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	71fb      	strb	r3, [r7, #7]

	writePort(cmd);
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff49 	bl	80016f8 <writePort>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	f44f 7180 	mov.w	r1, #256	; 0x100
 800186c:	480b      	ldr	r0, [pc, #44]	; (800189c <LCD_Command+0x48>)
 800186e:	f002 fbb2 	bl	8003fd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 8001872:	2201      	movs	r2, #1
 8001874:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001878:	4808      	ldr	r0, [pc, #32]	; (800189c <LCD_Command+0x48>)
 800187a:	f002 fbac 	bl	8003fd6 <HAL_GPIO_WritePin>
	asm("nop");
 800187e:	bf00      	nop
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 8001880:	2200      	movs	r2, #0
 8001882:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001886:	4805      	ldr	r0, [pc, #20]	; (800189c <LCD_Command+0x48>)
 8001888:	f002 fba5 	bl	8003fd6 <HAL_GPIO_WritePin>
	HAL_Delay(3);
 800188c:	2003      	movs	r0, #3
 800188e:	f001 fac5 	bl	8002e1c <HAL_Delay>
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40010c00 	.word	0x40010c00

080018a0 <LCD_Char>:

void LCD_Char(char dat) // Escreve um caractere no display
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	71fb      	strb	r3, [r7, #7]
	writePort(dat);
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff23 	bl	80016f8 <writePort>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 80018b2:	2201      	movs	r2, #1
 80018b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018b8:	480b      	ldr	r0, [pc, #44]	; (80018e8 <LCD_Char+0x48>)
 80018ba:	f002 fb8c 	bl	8003fd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 80018be:	2201      	movs	r2, #1
 80018c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018c4:	4808      	ldr	r0, [pc, #32]	; (80018e8 <LCD_Char+0x48>)
 80018c6:	f002 fb86 	bl	8003fd6 <HAL_GPIO_WritePin>
	asm("nop");
 80018ca:	bf00      	nop
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 80018cc:	2200      	movs	r2, #0
 80018ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018d2:	4805      	ldr	r0, [pc, #20]	; (80018e8 <LCD_Char+0x48>)
 80018d4:	f002 fb7f 	bl	8003fd6 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80018d8:	2001      	movs	r0, #1
 80018da:	f001 fa9f 	bl	8002e1c <HAL_Delay>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40010c00 	.word	0x40010c00

080018ec <LCD_String>:

void LCD_String(const char *msg) // Escreve uma string no display
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
	while((*msg)!=0)
 80018f4:	e093      	b.n	8001a1e <LCD_String+0x132>
	{
	    if((*msg) == aacentuado[0] && *(msg+1) == aacentuado[1]){
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	781a      	ldrb	r2, [r3, #0]
 80018fa:	4b4d      	ldr	r3, [pc, #308]	; (8001a30 <LCD_String+0x144>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d10d      	bne.n	800191e <LCD_String+0x32>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	3301      	adds	r3, #1
 8001906:	781a      	ldrb	r2, [r3, #0]
 8001908:	4b49      	ldr	r3, [pc, #292]	; (8001a30 <LCD_String+0x144>)
 800190a:	785b      	ldrb	r3, [r3, #1]
 800190c:	429a      	cmp	r2, r3
 800190e:	d106      	bne.n	800191e <LCD_String+0x32>
	    	LCD_Char(0);
 8001910:	2000      	movs	r0, #0
 8001912:	f7ff ffc5 	bl	80018a0 <LCD_Char>
	    	msg+=2;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	3302      	adds	r3, #2
 800191a:	607b      	str	r3, [r7, #4]
 800191c:	e07f      	b.n	8001a1e <LCD_String+0x132>
	    }
	    else if((*msg) == atil[0] && *(msg+1) == atil[1]){
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	781a      	ldrb	r2, [r3, #0]
 8001922:	4b44      	ldr	r3, [pc, #272]	; (8001a34 <LCD_String+0x148>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	429a      	cmp	r2, r3
 8001928:	d10d      	bne.n	8001946 <LCD_String+0x5a>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	3301      	adds	r3, #1
 800192e:	781a      	ldrb	r2, [r3, #0]
 8001930:	4b40      	ldr	r3, [pc, #256]	; (8001a34 <LCD_String+0x148>)
 8001932:	785b      	ldrb	r3, [r3, #1]
 8001934:	429a      	cmp	r2, r3
 8001936:	d106      	bne.n	8001946 <LCD_String+0x5a>
	    	LCD_Char(1);
 8001938:	2001      	movs	r0, #1
 800193a:	f7ff ffb1 	bl	80018a0 <LCD_Char>
	    	msg+=2;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3302      	adds	r3, #2
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	e06b      	b.n	8001a1e <LCD_String+0x132>
	    }
	    else if((*msg) == eacentuado[0] && *(msg+1) == eacentuado[1]){
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	781a      	ldrb	r2, [r3, #0]
 800194a:	4b3b      	ldr	r3, [pc, #236]	; (8001a38 <LCD_String+0x14c>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d10d      	bne.n	800196e <LCD_String+0x82>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	3301      	adds	r3, #1
 8001956:	781a      	ldrb	r2, [r3, #0]
 8001958:	4b37      	ldr	r3, [pc, #220]	; (8001a38 <LCD_String+0x14c>)
 800195a:	785b      	ldrb	r3, [r3, #1]
 800195c:	429a      	cmp	r2, r3
 800195e:	d106      	bne.n	800196e <LCD_String+0x82>
	    	LCD_Char(2);
 8001960:	2002      	movs	r0, #2
 8001962:	f7ff ff9d 	bl	80018a0 <LCD_Char>
	    	msg+=2;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	3302      	adds	r3, #2
 800196a:	607b      	str	r3, [r7, #4]
 800196c:	e057      	b.n	8001a1e <LCD_String+0x132>
	    }
	    else if((*msg) == otil[0] && *(msg+1) == otil[1]){
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	781a      	ldrb	r2, [r3, #0]
 8001972:	4b32      	ldr	r3, [pc, #200]	; (8001a3c <LCD_String+0x150>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d10d      	bne.n	8001996 <LCD_String+0xaa>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	3301      	adds	r3, #1
 800197e:	781a      	ldrb	r2, [r3, #0]
 8001980:	4b2e      	ldr	r3, [pc, #184]	; (8001a3c <LCD_String+0x150>)
 8001982:	785b      	ldrb	r3, [r3, #1]
 8001984:	429a      	cmp	r2, r3
 8001986:	d106      	bne.n	8001996 <LCD_String+0xaa>
	    	LCD_Char(3);
 8001988:	2003      	movs	r0, #3
 800198a:	f7ff ff89 	bl	80018a0 <LCD_Char>
	    	msg+=2;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	3302      	adds	r3, #2
 8001992:	607b      	str	r3, [r7, #4]
 8001994:	e043      	b.n	8001a1e <LCD_String+0x132>
	    }
	    else if((*msg) == ccedilha[0] && *(msg+1) == ccedilha[1]){
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	781a      	ldrb	r2, [r3, #0]
 800199a:	4b29      	ldr	r3, [pc, #164]	; (8001a40 <LCD_String+0x154>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d10d      	bne.n	80019be <LCD_String+0xd2>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3301      	adds	r3, #1
 80019a6:	781a      	ldrb	r2, [r3, #0]
 80019a8:	4b25      	ldr	r3, [pc, #148]	; (8001a40 <LCD_String+0x154>)
 80019aa:	785b      	ldrb	r3, [r3, #1]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d106      	bne.n	80019be <LCD_String+0xd2>
	    	LCD_Char(4);
 80019b0:	2004      	movs	r0, #4
 80019b2:	f7ff ff75 	bl	80018a0 <LCD_Char>
	    	msg+=2;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	3302      	adds	r3, #2
 80019ba:	607b      	str	r3, [r7, #4]
 80019bc:	e02f      	b.n	8001a1e <LCD_String+0x132>
	    }
	    else if((*msg) == oacentuado[0] && *(msg+1) == oacentuado[1]){
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	781a      	ldrb	r2, [r3, #0]
 80019c2:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <LCD_String+0x158>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d10d      	bne.n	80019e6 <LCD_String+0xfa>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	3301      	adds	r3, #1
 80019ce:	781a      	ldrb	r2, [r3, #0]
 80019d0:	4b1c      	ldr	r3, [pc, #112]	; (8001a44 <LCD_String+0x158>)
 80019d2:	785b      	ldrb	r3, [r3, #1]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d106      	bne.n	80019e6 <LCD_String+0xfa>
			LCD_Char(5);
 80019d8:	2005      	movs	r0, #5
 80019da:	f7ff ff61 	bl	80018a0 <LCD_Char>
			msg+=2;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3302      	adds	r3, #2
 80019e2:	607b      	str	r3, [r7, #4]
 80019e4:	e01b      	b.n	8001a1e <LCD_String+0x132>
	    }
	    else if((*msg) == grau[0] && *(msg+1) == grau[1]){
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	781a      	ldrb	r2, [r3, #0]
 80019ea:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <LCD_String+0x15c>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d10d      	bne.n	8001a0e <LCD_String+0x122>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	3301      	adds	r3, #1
 80019f6:	781a      	ldrb	r2, [r3, #0]
 80019f8:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <LCD_String+0x15c>)
 80019fa:	785b      	ldrb	r3, [r3, #1]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d106      	bne.n	8001a0e <LCD_String+0x122>
			LCD_Char(6);
 8001a00:	2006      	movs	r0, #6
 8001a02:	f7ff ff4d 	bl	80018a0 <LCD_Char>
			msg+=2;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	3302      	adds	r3, #2
 8001a0a:	607b      	str	r3, [r7, #4]
 8001a0c:	e007      	b.n	8001a1e <LCD_String+0x132>
	    }
	    else{
		  LCD_Char(*msg);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff ff44 	bl	80018a0 <LCD_Char>
		  msg++;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	607b      	str	r3, [r7, #4]
	while((*msg)!=0)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f47f af67 	bne.w	80018f6 <LCD_String+0xa>
	    }
	}
}
 8001a28:	bf00      	nop
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000038 	.word	0x20000038
 8001a34:	20000044 	.word	0x20000044
 8001a38:	2000003c 	.word	0x2000003c
 8001a3c:	20000040 	.word	0x20000040
 8001a40:	20000048 	.word	0x20000048
 8001a44:	2000004c 	.word	0x2000004c
 8001a48:	20000050 	.word	0x20000050

08001a4c <LCD_Custom_Char>:


void LCD_Custom_Char (unsigned char loc, unsigned char *msg) // Grava caracteres especiais na cgram
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	6039      	str	r1, [r7, #0]
 8001a56:	71fb      	strb	r3, [r7, #7]
    unsigned char i;
    if(loc<8)
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	2b07      	cmp	r3, #7
 8001a5c:	d817      	bhi.n	8001a8e <LCD_Custom_Char+0x42>
    {
     LCD_Command (0x40 + (loc*8));
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	3308      	adds	r3, #8
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff fef3 	bl	8001854 <LCD_Command>
     for(i=0;i<8;i++)
 8001a6e:	2300      	movs	r3, #0
 8001a70:	73fb      	strb	r3, [r7, #15]
 8001a72:	e009      	b.n	8001a88 <LCD_Custom_Char+0x3c>
        LCD_Char(msg[i]);
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	4413      	add	r3, r2
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ff0f 	bl	80018a0 <LCD_Char>
     for(i=0;i<8;i++)
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
 8001a84:	3301      	adds	r3, #1
 8001a86:	73fb      	strb	r3, [r7, #15]
 8001a88:	7bfb      	ldrb	r3, [r7, #15]
 8001a8a:	2b07      	cmp	r3, #7
 8001a8c:	d9f2      	bls.n	8001a74 <LCD_Custom_Char+0x28>
    }
}
 8001a8e:	bf00      	nop
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <LCD_String_xy>:

void LCD_String_xy(char row,char pos,const char *msg) // Escreve string na posição X Y desejada
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b084      	sub	sp, #16
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	603a      	str	r2, [r7, #0]
 8001aa0:	71fb      	strb	r3, [r7, #7]
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	71bb      	strb	r3, [r7, #6]
    char location=0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	73fb      	strb	r3, [r7, #15]
    if(row<=1)
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d80d      	bhi.n	8001acc <LCD_String_xy+0x36>
    {
        location=(0x80) | ((pos) & 0x0f);
 8001ab0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001ab4:	f003 030f 	and.w	r3, r3, #15
 8001ab8:	b25b      	sxtb	r3, r3
 8001aba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001abe:	b25b      	sxtb	r3, r3
 8001ac0:	73fb      	strb	r3, [r7, #15]
        LCD_Command(location);
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff fec5 	bl	8001854 <LCD_Command>
 8001aca:	e00c      	b.n	8001ae6 <LCD_String_xy+0x50>
    }
    else
    {
        location=(0xC0) | ((pos) & 0x0f);
 8001acc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001ad0:	f003 030f 	and.w	r3, r3, #15
 8001ad4:	b25b      	sxtb	r3, r3
 8001ad6:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001ada:	b25b      	sxtb	r3, r3
 8001adc:	73fb      	strb	r3, [r7, #15]
        LCD_Command(location);
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff feb7 	bl	8001854 <LCD_Command>
    }
    LCD_String(msg);
 8001ae6:	6838      	ldr	r0, [r7, #0]
 8001ae8:	f7ff ff00 	bl	80018ec <LCD_String>
}
 8001aec:	bf00      	nop
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001af4:	b5b0      	push	{r4, r5, r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  uint8_t read = 0, press_water=1;
 8001afa:	2300      	movs	r3, #0
 8001afc:	71fb      	strb	r3, [r7, #7]
 8001afe:	2301      	movs	r3, #1
 8001b00:	71bb      	strb	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b02:	f001 f929 	bl	8002d58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b06:	f000 f8e3 	bl	8001cd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b0a:	f000 fb75 	bl	80021f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b0e:	f000 fb55 	bl	80021bc <MX_DMA_Init>
  MX_ADC1_Init();
 8001b12:	f000 f935 	bl	8001d80 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001b16:	f000 fa29 	bl	8001f6c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b1a:	f000 fab3 	bl	8002084 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001b1e:	f000 faff 	bl	8002120 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1 ); // TIM_CHANNEL_1 = PUMP_WATER
 8001b22:	2100      	movs	r1, #0
 8001b24:	485d      	ldr	r0, [pc, #372]	; (8001c9c <main+0x1a8>)
 8001b26:	f003 f8fb 	bl	8004d20 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2 ); // TIM_CHANNEL_2 = HEATER
 8001b2a:	2104      	movs	r1, #4
 8001b2c:	485b      	ldr	r0, [pc, #364]	; (8001c9c <main+0x1a8>)
 8001b2e:	f003 f8f7 	bl	8004d20 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3 ); // TIM_CHANNEL_3 = COOLER
 8001b32:	2108      	movs	r1, #8
 8001b34:	4859      	ldr	r0, [pc, #356]	; (8001c9c <main+0x1a8>)
 8001b36:	f003 f8f3 	bl	8004d20 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 8001b3a:	4859      	ldr	r0, [pc, #356]	; (8001ca0 <main+0x1ac>)
 8001b3c:	f003 f846 	bl	8004bcc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 8001b40:	4858      	ldr	r0, [pc, #352]	; (8001ca4 <main+0x1b0>)
 8001b42:	f003 f843 	bl	8004bcc <HAL_TIM_Base_Start_IT>
	HAL_ADCEx_Calibration_Start(&hadc1);
 8001b46:	4858      	ldr	r0, [pc, #352]	; (8001ca8 <main+0x1b4>)
 8001b48:	f001 fd3c 	bl	80035c4 <HAL_ADCEx_Calibration_Start>
	LCD_Init();
 8001b4c:	f7ff fe3c 	bl	80017c8 <LCD_Init>
	LCD_Clear();
 8001b50:	f7ff fe78 	bl	8001844 <LCD_Clear>
	t = time(NULL);
 8001b54:	2000      	movs	r0, #0
 8001b56:	f004 f94f 	bl	8005df8 <time>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	460c      	mov	r4, r1
 8001b5e:	4a53      	ldr	r2, [pc, #332]	; (8001cac <main+0x1b8>)
 8001b60:	e9c2 3400 	strd	r3, r4, [r2]
	tm = *localtime(&t);
 8001b64:	4851      	ldr	r0, [pc, #324]	; (8001cac <main+0x1b8>)
 8001b66:	f003 ff5d 	bl	8005a24 <localtime>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	4b50      	ldr	r3, [pc, #320]	; (8001cb0 <main+0x1bc>)
 8001b6e:	461c      	mov	r4, r3
 8001b70:	4615      	mov	r5, r2
 8001b72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b7a:	682b      	ldr	r3, [r5, #0]
 8001b7c:	6023      	str	r3, [r4, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

while(1){
		HAL_Delay(100);
 8001b7e:	2064      	movs	r0, #100	; 0x64
 8001b80:	f001 f94c 	bl	8002e1c <HAL_Delay>
		sprintf(hora_string, "%02d:%02d:%02d", tm.tm_hour, tm.tm_min, tm.tm_sec);
 8001b84:	4b4a      	ldr	r3, [pc, #296]	; (8001cb0 <main+0x1bc>)
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	4b49      	ldr	r3, [pc, #292]	; (8001cb0 <main+0x1bc>)
 8001b8a:	6859      	ldr	r1, [r3, #4]
 8001b8c:	4b48      	ldr	r3, [pc, #288]	; (8001cb0 <main+0x1bc>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	460b      	mov	r3, r1
 8001b94:	4947      	ldr	r1, [pc, #284]	; (8001cb4 <main+0x1c0>)
 8001b96:	4848      	ldr	r0, [pc, #288]	; (8001cb8 <main+0x1c4>)
 8001b98:	f004 f90e 	bl	8005db8 <siprintf>
		LCD_String_xy(1,4,hora_string);
 8001b9c:	4a46      	ldr	r2, [pc, #280]	; (8001cb8 <main+0x1c4>)
 8001b9e:	2104      	movs	r1, #4
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	f7ff ff78 	bl	8001a96 <LCD_String_xy>

		read = HAL_GPIO_ReadPin(GPIOA, READ_Pin);
 8001ba6:	2180      	movs	r1, #128	; 0x80
 8001ba8:	4844      	ldr	r0, [pc, #272]	; (8001cbc <main+0x1c8>)
 8001baa:	f002 f9fd 	bl	8003fa8 <HAL_GPIO_ReadPin>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	71fb      	strb	r3, [r7, #7]
		press_water = HAL_GPIO_ReadPin(GPIOC, PRESS_WATER_Pin);
 8001bb2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bb6:	4842      	ldr	r0, [pc, #264]	; (8001cc0 <main+0x1cc>)
 8001bb8:	f002 f9f6 	bl	8003fa8 <HAL_GPIO_ReadPin>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	71bb      	strb	r3, [r7, #6]
		if(press_water==0){
 8001bc0:	79bb      	ldrb	r3, [r7, #6]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d11a      	bne.n	8001bfc <main+0x108>
			LCD_Clear();
 8001bc6:	f7ff fe3d 	bl	8001844 <LCD_Clear>
			LCD_String_xy(1,3,"Sem água no");
 8001bca:	4a3e      	ldr	r2, [pc, #248]	; (8001cc4 <main+0x1d0>)
 8001bcc:	2103      	movs	r1, #3
 8001bce:	2001      	movs	r0, #1
 8001bd0:	f7ff ff61 	bl	8001a96 <LCD_String_xy>
			LCD_String_xy(2,3,"reservatório");
 8001bd4:	4a3c      	ldr	r2, [pc, #240]	; (8001cc8 <main+0x1d4>)
 8001bd6:	2103      	movs	r1, #3
 8001bd8:	2002      	movs	r0, #2
 8001bda:	f7ff ff5c 	bl	8001a96 <LCD_String_xy>
			while(1){
				HAL_Delay(4000);
 8001bde:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001be2:	f001 f91b 	bl	8002e1c <HAL_Delay>
				press_water = HAL_GPIO_ReadPin(GPIOC, PRESS_WATER_Pin);
 8001be6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bea:	4835      	ldr	r0, [pc, #212]	; (8001cc0 <main+0x1cc>)
 8001bec:	f002 f9dc 	bl	8003fa8 <HAL_GPIO_ReadPin>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	71bb      	strb	r3, [r7, #6]
				if(press_water) break;
 8001bf4:	79bb      	ldrb	r3, [r7, #6]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d14d      	bne.n	8001c96 <main+0x1a2>
				HAL_Delay(4000);
 8001bfa:	e7f0      	b.n	8001bde <main+0xea>
			}
		}
		else if(read){ // Se for colocado uma cápsula
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d0bd      	beq.n	8001b7e <main+0x8a>
			read = 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	71fb      	strb	r3, [r7, #7]
			opt_reader1 = HAL_GPIO_ReadPin(GPIOA, OPT_READ1_Pin); // Lê os códigos
 8001c06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c0a:	482c      	ldr	r0, [pc, #176]	; (8001cbc <main+0x1c8>)
 8001c0c:	f002 f9cc 	bl	8003fa8 <HAL_GPIO_ReadPin>
 8001c10:	4603      	mov	r3, r0
 8001c12:	717b      	strb	r3, [r7, #5]
			opt_reader2 = HAL_GPIO_ReadPin(GPIOA, OPT_READ2_Pin);
 8001c14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c18:	4828      	ldr	r0, [pc, #160]	; (8001cbc <main+0x1c8>)
 8001c1a:	f002 f9c5 	bl	8003fa8 <HAL_GPIO_ReadPin>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	713b      	strb	r3, [r7, #4]
			opt_reader3 = HAL_GPIO_ReadPin(GPIOA, OPT_READ3_Pin);
 8001c22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c26:	4825      	ldr	r0, [pc, #148]	; (8001cbc <main+0x1c8>)
 8001c28:	f002 f9be 	bl	8003fa8 <HAL_GPIO_ReadPin>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	70fb      	strb	r3, [r7, #3]
			type_of_drink = read_type_of_capsule(opt_reader1, opt_reader2, opt_reader3); //Retorna tipo e mostra na tela
 8001c30:	797b      	ldrb	r3, [r7, #5]
 8001c32:	7939      	ldrb	r1, [r7, #4]
 8001c34:	78fa      	ldrb	r2, [r7, #3]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff fb8e 	bl	8001358 <read_type_of_capsule>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	70bb      	strb	r3, [r7, #2]
			if(type_of_drink==0){
 8001c40:	78bb      	ldrb	r3, [r7, #2]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d106      	bne.n	8001c54 <main+0x160>
				HAL_Delay(3000); // Espera 3 segundos com a tela de erro
 8001c46:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001c4a:	f001 f8e7 	bl	8002e1c <HAL_Delay>
				LCD_Clear();
 8001c4e:	f7ff fdf9 	bl	8001844 <LCD_Clear>
 8001c52:	e794      	b.n	8001b7e <main+0x8a>
			}
			else{ // Se for um tipo válido...
				confirm = 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	707b      	strb	r3, [r7, #1]
				while(1){
					confirm = HAL_GPIO_ReadPin(GPIOB, CONFIRM_Pin); // Espera confirmação ou cancelamento
 8001c58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c5c:	481b      	ldr	r0, [pc, #108]	; (8001ccc <main+0x1d8>)
 8001c5e:	f002 f9a3 	bl	8003fa8 <HAL_GPIO_ReadPin>
 8001c62:	4603      	mov	r3, r0
 8001c64:	707b      	strb	r3, [r7, #1]
					cancel = HAL_GPIO_ReadPin(GPIOB, CANCEL_Pin);
 8001c66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c6a:	4818      	ldr	r0, [pc, #96]	; (8001ccc <main+0x1d8>)
 8001c6c:	f002 f99c 	bl	8003fa8 <HAL_GPIO_ReadPin>
 8001c70:	4603      	mov	r3, r0
 8001c72:	703b      	strb	r3, [r7, #0]
					if(confirm==1){
 8001c74:	787b      	ldrb	r3, [r7, #1]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d105      	bne.n	8001c86 <main+0x192>
						preparing(type_of_drink, &hadc1);
 8001c7a:	78bb      	ldrb	r3, [r7, #2]
 8001c7c:	490a      	ldr	r1, [pc, #40]	; (8001ca8 <main+0x1b4>)
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fbd0 	bl	8001424 <preparing>
						break;
 8001c84:	e004      	b.n	8001c90 <main+0x19c>
					}
					else if(cancel==1)	break;
 8001c86:	783b      	ldrb	r3, [r7, #0]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d000      	beq.n	8001c8e <main+0x19a>
					confirm = HAL_GPIO_ReadPin(GPIOB, CONFIRM_Pin); // Espera confirmação ou cancelamento
 8001c8c:	e7e4      	b.n	8001c58 <main+0x164>
					else if(cancel==1)	break;
 8001c8e:	bf00      	nop
				}
				LCD_Clear();
 8001c90:	f7ff fdd8 	bl	8001844 <LCD_Clear>
 8001c94:	e773      	b.n	8001b7e <main+0x8a>
				if(press_water) break;
 8001c96:	bf00      	nop
		HAL_Delay(100);
 8001c98:	e771      	b.n	8001b7e <main+0x8a>
 8001c9a:	bf00      	nop
 8001c9c:	2000042c 	.word	0x2000042c
 8001ca0:	2000034c 	.word	0x2000034c
 8001ca4:	200002f8 	.word	0x200002f8
 8001ca8:	20000394 	.word	0x20000394
 8001cac:	200002f0 	.word	0x200002f0
 8001cb0:	200003c4 	.word	0x200003c4
 8001cb4:	080075ec 	.word	0x080075ec
 8001cb8:	20000340 	.word	0x20000340
 8001cbc:	40010800 	.word	0x40010800
 8001cc0:	40011000 	.word	0x40011000
 8001cc4:	080075fc 	.word	0x080075fc
 8001cc8:	0800760c 	.word	0x0800760c
 8001ccc:	40010c00 	.word	0x40010c00

08001cd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b094      	sub	sp, #80	; 0x50
 8001cd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cda:	2228      	movs	r2, #40	; 0x28
 8001cdc:	2100      	movs	r1, #0
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f003 ffac 	bl	8005c3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ce4:	f107 0314 	add.w	r3, r7, #20
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cf4:	1d3b      	adds	r3, r7, #4
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	605a      	str	r2, [r3, #4]
 8001cfc:	609a      	str	r2, [r3, #8]
 8001cfe:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d00:	2302      	movs	r3, #2
 8001d02:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d04:	2301      	movs	r3, #1
 8001d06:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d08:	2310      	movs	r3, #16
 8001d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001d10:	2300      	movs	r3, #0
 8001d12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL14;
 8001d14:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8001d18:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f002 f98a 	bl	8004038 <HAL_RCC_OscConfig>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001d2a:	f000 fb53 	bl	80023d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d2e:	230f      	movs	r3, #15
 8001d30:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d32:	2302      	movs	r3, #2
 8001d34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d3e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d40:	2300      	movs	r3, #0
 8001d42:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	2102      	movs	r1, #2
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f002 fbf4 	bl	8004538 <HAL_RCC_ClockConfig>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001d56:	f000 fb3d 	bl	80023d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8001d5e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d62:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d64:	1d3b      	adds	r3, r7, #4
 8001d66:	4618      	mov	r0, r3
 8001d68:	f002 fd6e 	bl	8004848 <HAL_RCCEx_PeriphCLKConfig>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001d72:	f000 fb2f 	bl	80023d4 <Error_Handler>
  }
}
 8001d76:	bf00      	nop
 8001d78:	3750      	adds	r7, #80	; 0x50
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
	...

08001d80 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d86:	1d3b      	adds	r3, r7, #4
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001d90:	4b74      	ldr	r3, [pc, #464]	; (8001f64 <MX_ADC1_Init+0x1e4>)
 8001d92:	4a75      	ldr	r2, [pc, #468]	; (8001f68 <MX_ADC1_Init+0x1e8>)
 8001d94:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001d96:	4b73      	ldr	r3, [pc, #460]	; (8001f64 <MX_ADC1_Init+0x1e4>)
 8001d98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d9c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d9e:	4b71      	ldr	r3, [pc, #452]	; (8001f64 <MX_ADC1_Init+0x1e4>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001da4:	4b6f      	ldr	r3, [pc, #444]	; (8001f64 <MX_ADC1_Init+0x1e4>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001daa:	4b6e      	ldr	r3, [pc, #440]	; (8001f64 <MX_ADC1_Init+0x1e4>)
 8001dac:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001db0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001db2:	4b6c      	ldr	r3, [pc, #432]	; (8001f64 <MX_ADC1_Init+0x1e4>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 16;
 8001db8:	4b6a      	ldr	r3, [pc, #424]	; (8001f64 <MX_ADC1_Init+0x1e4>)
 8001dba:	2210      	movs	r2, #16
 8001dbc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001dbe:	4869      	ldr	r0, [pc, #420]	; (8001f64 <MX_ADC1_Init+0x1e4>)
 8001dc0:	f001 f84e 	bl	8002e60 <HAL_ADC_Init>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001dca:	f000 fb03 	bl	80023d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dda:	1d3b      	adds	r3, r7, #4
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4861      	ldr	r0, [pc, #388]	; (8001f64 <MX_ADC1_Init+0x1e4>)
 8001de0:	f001 fa06 	bl	80031f0 <HAL_ADC_ConfigChannel>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001dea:	f000 faf3 	bl	80023d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001dee:	2302      	movs	r3, #2
 8001df0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001df2:	1d3b      	adds	r3, r7, #4
 8001df4:	4619      	mov	r1, r3
 8001df6:	485b      	ldr	r0, [pc, #364]	; (8001f64 <MX_ADC1_Init+0x1e4>)
 8001df8:	f001 f9fa 	bl	80031f0 <HAL_ADC_ConfigChannel>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001e02:	f000 fae7 	bl	80023d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001e06:	2303      	movs	r3, #3
 8001e08:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e0a:	1d3b      	adds	r3, r7, #4
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4855      	ldr	r0, [pc, #340]	; (8001f64 <MX_ADC1_Init+0x1e4>)
 8001e10:	f001 f9ee 	bl	80031f0 <HAL_ADC_ConfigChannel>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8001e1a:	f000 fadb 	bl	80023d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001e1e:	2304      	movs	r3, #4
 8001e20:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e22:	1d3b      	adds	r3, r7, #4
 8001e24:	4619      	mov	r1, r3
 8001e26:	484f      	ldr	r0, [pc, #316]	; (8001f64 <MX_ADC1_Init+0x1e4>)
 8001e28:	f001 f9e2 	bl	80031f0 <HAL_ADC_ConfigChannel>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001e32:	f000 facf 	bl	80023d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001e36:	2305      	movs	r3, #5
 8001e38:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e3a:	1d3b      	adds	r3, r7, #4
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4849      	ldr	r0, [pc, #292]	; (8001f64 <MX_ADC1_Init+0x1e4>)
 8001e40:	f001 f9d6 	bl	80031f0 <HAL_ADC_ConfigChannel>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8001e4a:	f000 fac3 	bl	80023d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001e4e:	2306      	movs	r3, #6
 8001e50:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e52:	1d3b      	adds	r3, r7, #4
 8001e54:	4619      	mov	r1, r3
 8001e56:	4843      	ldr	r0, [pc, #268]	; (8001f64 <MX_ADC1_Init+0x1e4>)
 8001e58:	f001 f9ca 	bl	80031f0 <HAL_ADC_ConfigChannel>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8001e62:	f000 fab7 	bl	80023d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001e66:	2307      	movs	r3, #7
 8001e68:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e6a:	1d3b      	adds	r3, r7, #4
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	483d      	ldr	r0, [pc, #244]	; (8001f64 <MX_ADC1_Init+0x1e4>)
 8001e70:	f001 f9be 	bl	80031f0 <HAL_ADC_ConfigChannel>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8001e7a:	f000 faab 	bl	80023d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001e7e:	2308      	movs	r3, #8
 8001e80:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e82:	1d3b      	adds	r3, r7, #4
 8001e84:	4619      	mov	r1, r3
 8001e86:	4837      	ldr	r0, [pc, #220]	; (8001f64 <MX_ADC1_Init+0x1e4>)
 8001e88:	f001 f9b2 	bl	80031f0 <HAL_ADC_ConfigChannel>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001e92:	f000 fa9f 	bl	80023d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001e96:	2304      	movs	r3, #4
 8001e98:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001e9a:	2309      	movs	r3, #9
 8001e9c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e9e:	1d3b      	adds	r3, r7, #4
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4830      	ldr	r0, [pc, #192]	; (8001f64 <MX_ADC1_Init+0x1e4>)
 8001ea4:	f001 f9a4 	bl	80031f0 <HAL_ADC_ConfigChannel>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8001eae:	f000 fa91 	bl	80023d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001eb2:	230a      	movs	r3, #10
 8001eb4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001eb6:	1d3b      	adds	r3, r7, #4
 8001eb8:	4619      	mov	r1, r3
 8001eba:	482a      	ldr	r0, [pc, #168]	; (8001f64 <MX_ADC1_Init+0x1e4>)
 8001ebc:	f001 f998 	bl	80031f0 <HAL_ADC_ConfigChannel>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_ADC1_Init+0x14a>
  {
    Error_Handler();
 8001ec6:	f000 fa85 	bl	80023d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8001eca:	230b      	movs	r3, #11
 8001ecc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ece:	1d3b      	adds	r3, r7, #4
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4824      	ldr	r0, [pc, #144]	; (8001f64 <MX_ADC1_Init+0x1e4>)
 8001ed4:	f001 f98c 	bl	80031f0 <HAL_ADC_ConfigChannel>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_ADC1_Init+0x162>
  {
    Error_Handler();
 8001ede:	f000 fa79 	bl	80023d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8001ee2:	230c      	movs	r3, #12
 8001ee4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ee6:	1d3b      	adds	r3, r7, #4
 8001ee8:	4619      	mov	r1, r3
 8001eea:	481e      	ldr	r0, [pc, #120]	; (8001f64 <MX_ADC1_Init+0x1e4>)
 8001eec:	f001 f980 	bl	80031f0 <HAL_ADC_ConfigChannel>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_ADC1_Init+0x17a>
  {
    Error_Handler();
 8001ef6:	f000 fa6d 	bl	80023d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8001efa:	230d      	movs	r3, #13
 8001efc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001efe:	1d3b      	adds	r3, r7, #4
 8001f00:	4619      	mov	r1, r3
 8001f02:	4818      	ldr	r0, [pc, #96]	; (8001f64 <MX_ADC1_Init+0x1e4>)
 8001f04:	f001 f974 	bl	80031f0 <HAL_ADC_ConfigChannel>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_ADC1_Init+0x192>
  {
    Error_Handler();
 8001f0e:	f000 fa61 	bl	80023d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8001f12:	230e      	movs	r3, #14
 8001f14:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f16:	1d3b      	adds	r3, r7, #4
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4812      	ldr	r0, [pc, #72]	; (8001f64 <MX_ADC1_Init+0x1e4>)
 8001f1c:	f001 f968 	bl	80031f0 <HAL_ADC_ConfigChannel>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <MX_ADC1_Init+0x1aa>
  {
    Error_Handler();
 8001f26:	f000 fa55 	bl	80023d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_15;
 8001f2a:	230f      	movs	r3, #15
 8001f2c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f2e:	1d3b      	adds	r3, r7, #4
 8001f30:	4619      	mov	r1, r3
 8001f32:	480c      	ldr	r0, [pc, #48]	; (8001f64 <MX_ADC1_Init+0x1e4>)
 8001f34:	f001 f95c 	bl	80031f0 <HAL_ADC_ConfigChannel>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_ADC1_Init+0x1c2>
  {
    Error_Handler();
 8001f3e:	f000 fa49 	bl	80023d4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_16;
 8001f42:	2310      	movs	r3, #16
 8001f44:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f46:	1d3b      	adds	r3, r7, #4
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4806      	ldr	r0, [pc, #24]	; (8001f64 <MX_ADC1_Init+0x1e4>)
 8001f4c:	f001 f950 	bl	80031f0 <HAL_ADC_ConfigChannel>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_ADC1_Init+0x1da>
  {
    Error_Handler();
 8001f56:	f000 fa3d 	bl	80023d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f5a:	bf00      	nop
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20000394 	.word	0x20000394
 8001f68:	40012400 	.word	0x40012400

08001f6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08e      	sub	sp, #56	; 0x38
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	605a      	str	r2, [r3, #4]
 8001f7c:	609a      	str	r2, [r3, #8]
 8001f7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f80:	f107 0320 	add.w	r3, r7, #32
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f8a:	1d3b      	adds	r3, r7, #4
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	611a      	str	r2, [r3, #16]
 8001f98:	615a      	str	r2, [r3, #20]
 8001f9a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f9c:	4b38      	ldr	r3, [pc, #224]	; (8002080 <MX_TIM2_Init+0x114>)
 8001f9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fa2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001fa4:	4b36      	ldr	r3, [pc, #216]	; (8002080 <MX_TIM2_Init+0x114>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001faa:	4b35      	ldr	r3, [pc, #212]	; (8002080 <MX_TIM2_Init+0x114>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000-1;
 8001fb0:	4b33      	ldr	r3, [pc, #204]	; (8002080 <MX_TIM2_Init+0x114>)
 8001fb2:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001fb6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fb8:	4b31      	ldr	r3, [pc, #196]	; (8002080 <MX_TIM2_Init+0x114>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fbe:	4b30      	ldr	r3, [pc, #192]	; (8002080 <MX_TIM2_Init+0x114>)
 8001fc0:	2280      	movs	r2, #128	; 0x80
 8001fc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fc4:	482e      	ldr	r0, [pc, #184]	; (8002080 <MX_TIM2_Init+0x114>)
 8001fc6:	f002 fdb1 	bl	8004b2c <HAL_TIM_Base_Init>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001fd0:	f000 fa00 	bl	80023d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4827      	ldr	r0, [pc, #156]	; (8002080 <MX_TIM2_Init+0x114>)
 8001fe2:	f003 f905 	bl	80051f0 <HAL_TIM_ConfigClockSource>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001fec:	f000 f9f2 	bl	80023d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ff0:	4823      	ldr	r0, [pc, #140]	; (8002080 <MX_TIM2_Init+0x114>)
 8001ff2:	f002 fe3d 	bl	8004c70 <HAL_TIM_PWM_Init>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001ffc:	f000 f9ea 	bl	80023d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002000:	2300      	movs	r3, #0
 8002002:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002004:	2300      	movs	r3, #0
 8002006:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002008:	f107 0320 	add.w	r3, r7, #32
 800200c:	4619      	mov	r1, r3
 800200e:	481c      	ldr	r0, [pc, #112]	; (8002080 <MX_TIM2_Init+0x114>)
 8002010:	f003 fc6e 	bl	80058f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800201a:	f000 f9db 	bl	80023d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800201e:	2360      	movs	r3, #96	; 0x60
 8002020:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002022:	2300      	movs	r3, #0
 8002024:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800202e:	1d3b      	adds	r3, r7, #4
 8002030:	2200      	movs	r2, #0
 8002032:	4619      	mov	r1, r3
 8002034:	4812      	ldr	r0, [pc, #72]	; (8002080 <MX_TIM2_Init+0x114>)
 8002036:	f003 f81d 	bl	8005074 <HAL_TIM_PWM_ConfigChannel>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002040:	f000 f9c8 	bl	80023d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002044:	1d3b      	adds	r3, r7, #4
 8002046:	2204      	movs	r2, #4
 8002048:	4619      	mov	r1, r3
 800204a:	480d      	ldr	r0, [pc, #52]	; (8002080 <MX_TIM2_Init+0x114>)
 800204c:	f003 f812 	bl	8005074 <HAL_TIM_PWM_ConfigChannel>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8002056:	f000 f9bd 	bl	80023d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800205a:	1d3b      	adds	r3, r7, #4
 800205c:	2208      	movs	r2, #8
 800205e:	4619      	mov	r1, r3
 8002060:	4807      	ldr	r0, [pc, #28]	; (8002080 <MX_TIM2_Init+0x114>)
 8002062:	f003 f807 	bl	8005074 <HAL_TIM_PWM_ConfigChannel>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 800206c:	f000 f9b2 	bl	80023d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002070:	4803      	ldr	r0, [pc, #12]	; (8002080 <MX_TIM2_Init+0x114>)
 8002072:	f000 fd97 	bl	8002ba4 <HAL_TIM_MspPostInit>

}
 8002076:	bf00      	nop
 8002078:	3738      	adds	r7, #56	; 0x38
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	2000042c 	.word	0x2000042c

08002084 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800208a:	f107 0308 	add.w	r3, r7, #8
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	605a      	str	r2, [r3, #4]
 8002094:	609a      	str	r2, [r3, #8]
 8002096:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002098:	463b      	mov	r3, r7
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020a0:	4b1d      	ldr	r3, [pc, #116]	; (8002118 <MX_TIM3_Init+0x94>)
 80020a2:	4a1e      	ldr	r2, [pc, #120]	; (800211c <MX_TIM3_Init+0x98>)
 80020a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000;
 80020a6:	4b1c      	ldr	r3, [pc, #112]	; (8002118 <MX_TIM3_Init+0x94>)
 80020a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ae:	4b1a      	ldr	r3, [pc, #104]	; (8002118 <MX_TIM3_Init+0x94>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16800-1;
 80020b4:	4b18      	ldr	r3, [pc, #96]	; (8002118 <MX_TIM3_Init+0x94>)
 80020b6:	f244 129f 	movw	r2, #16799	; 0x419f
 80020ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020bc:	4b16      	ldr	r3, [pc, #88]	; (8002118 <MX_TIM3_Init+0x94>)
 80020be:	2200      	movs	r2, #0
 80020c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020c2:	4b15      	ldr	r3, [pc, #84]	; (8002118 <MX_TIM3_Init+0x94>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80020c8:	4813      	ldr	r0, [pc, #76]	; (8002118 <MX_TIM3_Init+0x94>)
 80020ca:	f002 fd2f 	bl	8004b2c <HAL_TIM_Base_Init>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80020d4:	f000 f97e 	bl	80023d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80020de:	f107 0308 	add.w	r3, r7, #8
 80020e2:	4619      	mov	r1, r3
 80020e4:	480c      	ldr	r0, [pc, #48]	; (8002118 <MX_TIM3_Init+0x94>)
 80020e6:	f003 f883 	bl	80051f0 <HAL_TIM_ConfigClockSource>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80020f0:	f000 f970 	bl	80023d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020f4:	2300      	movs	r3, #0
 80020f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020f8:	2300      	movs	r3, #0
 80020fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020fc:	463b      	mov	r3, r7
 80020fe:	4619      	mov	r1, r3
 8002100:	4805      	ldr	r0, [pc, #20]	; (8002118 <MX_TIM3_Init+0x94>)
 8002102:	f003 fbf5 	bl	80058f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800210c:	f000 f962 	bl	80023d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002110:	bf00      	nop
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	2000034c 	.word	0x2000034c
 800211c:	40000400 	.word	0x40000400

08002120 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002126:	f107 0308 	add.w	r3, r7, #8
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	605a      	str	r2, [r3, #4]
 8002130:	609a      	str	r2, [r3, #8]
 8002132:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002134:	463b      	mov	r3, r7
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800213c:	4b1d      	ldr	r3, [pc, #116]	; (80021b4 <MX_TIM4_Init+0x94>)
 800213e:	4a1e      	ldr	r2, [pc, #120]	; (80021b8 <MX_TIM4_Init+0x98>)
 8002140:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2000;
 8002142:	4b1c      	ldr	r3, [pc, #112]	; (80021b4 <MX_TIM4_Init+0x94>)
 8002144:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002148:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800214a:	4b1a      	ldr	r3, [pc, #104]	; (80021b4 <MX_TIM4_Init+0x94>)
 800214c:	2200      	movs	r2, #0
 800214e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 28000-1;
 8002150:	4b18      	ldr	r3, [pc, #96]	; (80021b4 <MX_TIM4_Init+0x94>)
 8002152:	f646 525f 	movw	r2, #27999	; 0x6d5f
 8002156:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002158:	4b16      	ldr	r3, [pc, #88]	; (80021b4 <MX_TIM4_Init+0x94>)
 800215a:	2200      	movs	r2, #0
 800215c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800215e:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <MX_TIM4_Init+0x94>)
 8002160:	2200      	movs	r2, #0
 8002162:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002164:	4813      	ldr	r0, [pc, #76]	; (80021b4 <MX_TIM4_Init+0x94>)
 8002166:	f002 fce1 	bl	8004b2c <HAL_TIM_Base_Init>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002170:	f000 f930 	bl	80023d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002174:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002178:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800217a:	f107 0308 	add.w	r3, r7, #8
 800217e:	4619      	mov	r1, r3
 8002180:	480c      	ldr	r0, [pc, #48]	; (80021b4 <MX_TIM4_Init+0x94>)
 8002182:	f003 f835 	bl	80051f0 <HAL_TIM_ConfigClockSource>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800218c:	f000 f922 	bl	80023d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002190:	2300      	movs	r3, #0
 8002192:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002194:	2300      	movs	r3, #0
 8002196:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002198:	463b      	mov	r3, r7
 800219a:	4619      	mov	r1, r3
 800219c:	4805      	ldr	r0, [pc, #20]	; (80021b4 <MX_TIM4_Init+0x94>)
 800219e:	f003 fba7 	bl	80058f0 <HAL_TIMEx_MasterConfigSynchronization>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80021a8:	f000 f914 	bl	80023d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80021ac:	bf00      	nop
 80021ae:	3718      	adds	r7, #24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	200002f8 	.word	0x200002f8
 80021b8:	40000800 	.word	0x40000800

080021bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021c2:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <MX_DMA_Init+0x38>)
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	4a0b      	ldr	r2, [pc, #44]	; (80021f4 <MX_DMA_Init+0x38>)
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	6153      	str	r3, [r2, #20]
 80021ce:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <MX_DMA_Init+0x38>)
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	607b      	str	r3, [r7, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80021da:	2200      	movs	r2, #0
 80021dc:	2100      	movs	r1, #0
 80021de:	200b      	movs	r0, #11
 80021e0:	f001 fb63 	bl	80038aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80021e4:	200b      	movs	r0, #11
 80021e6:	f001 fb7c 	bl	80038e2 <HAL_NVIC_EnableIRQ>

}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40021000 	.word	0x40021000

080021f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b088      	sub	sp, #32
 80021fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021fe:	f107 0310 	add.w	r3, r7, #16
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	605a      	str	r2, [r3, #4]
 8002208:	609a      	str	r2, [r3, #8]
 800220a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800220c:	4b4c      	ldr	r3, [pc, #304]	; (8002340 <MX_GPIO_Init+0x148>)
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	4a4b      	ldr	r2, [pc, #300]	; (8002340 <MX_GPIO_Init+0x148>)
 8002212:	f043 0310 	orr.w	r3, r3, #16
 8002216:	6193      	str	r3, [r2, #24]
 8002218:	4b49      	ldr	r3, [pc, #292]	; (8002340 <MX_GPIO_Init+0x148>)
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	f003 0310 	and.w	r3, r3, #16
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002224:	4b46      	ldr	r3, [pc, #280]	; (8002340 <MX_GPIO_Init+0x148>)
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	4a45      	ldr	r2, [pc, #276]	; (8002340 <MX_GPIO_Init+0x148>)
 800222a:	f043 0320 	orr.w	r3, r3, #32
 800222e:	6193      	str	r3, [r2, #24]
 8002230:	4b43      	ldr	r3, [pc, #268]	; (8002340 <MX_GPIO_Init+0x148>)
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	f003 0320 	and.w	r3, r3, #32
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800223c:	4b40      	ldr	r3, [pc, #256]	; (8002340 <MX_GPIO_Init+0x148>)
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	4a3f      	ldr	r2, [pc, #252]	; (8002340 <MX_GPIO_Init+0x148>)
 8002242:	f043 0304 	orr.w	r3, r3, #4
 8002246:	6193      	str	r3, [r2, #24]
 8002248:	4b3d      	ldr	r3, [pc, #244]	; (8002340 <MX_GPIO_Init+0x148>)
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	607b      	str	r3, [r7, #4]
 8002252:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002254:	4b3a      	ldr	r3, [pc, #232]	; (8002340 <MX_GPIO_Init+0x148>)
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	4a39      	ldr	r2, [pc, #228]	; (8002340 <MX_GPIO_Init+0x148>)
 800225a:	f043 0308 	orr.w	r3, r3, #8
 800225e:	6193      	str	r3, [r2, #24]
 8002260:	4b37      	ldr	r3, [pc, #220]	; (8002340 <MX_GPIO_Init+0x148>)
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	f003 0308 	and.w	r3, r3, #8
 8002268:	603b      	str	r3, [r7, #0]
 800226a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800226c:	2200      	movs	r2, #0
 800226e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002272:	4834      	ldr	r0, [pc, #208]	; (8002344 <MX_GPIO_Init+0x14c>)
 8002274:	f001 feaf 	bl	8003fd6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, VALV_WATER_Pin|VALV_CO2_Pin|VALV_HOT_WATER_Pin|VALV_COLD_WATER_Pin
 8002278:	2200      	movs	r2, #0
 800227a:	f640 71fb 	movw	r1, #4091	; 0xffb
 800227e:	4832      	ldr	r0, [pc, #200]	; (8002348 <MX_GPIO_Init+0x150>)
 8002280:	f001 fea9 	bl	8003fd6 <HAL_GPIO_WritePin>
                          |B3_Pin|B4_Pin|B5_Pin|B6_Pin
                          |B7_Pin|RS_Pin|E_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, B0_Pin|B1_Pin|B2_Pin, GPIO_PIN_RESET);
 8002284:	2200      	movs	r2, #0
 8002286:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 800228a:	4830      	ldr	r0, [pc, #192]	; (800234c <MX_GPIO_Init+0x154>)
 800228c:	f001 fea3 	bl	8003fd6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002290:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002294:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002296:	2301      	movs	r3, #1
 8002298:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229e:	2302      	movs	r3, #2
 80022a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022a2:	f107 0310 	add.w	r3, r7, #16
 80022a6:	4619      	mov	r1, r3
 80022a8:	4826      	ldr	r0, [pc, #152]	; (8002344 <MX_GPIO_Init+0x14c>)
 80022aa:	f001 fd23 	bl	8003cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PRESS_WATER_Pin PRESS_CO2_Pin */
  GPIO_InitStruct.Pin = PRESS_WATER_Pin|PRESS_CO2_Pin;
 80022ae:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80022b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022b4:	2300      	movs	r3, #0
 80022b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022bc:	f107 0310 	add.w	r3, r7, #16
 80022c0:	4619      	mov	r1, r3
 80022c2:	4820      	ldr	r0, [pc, #128]	; (8002344 <MX_GPIO_Init+0x14c>)
 80022c4:	f001 fd16 	bl	8003cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : READ_Pin OPT_READ1_Pin OPT_READ2_Pin OPT_READ3_Pin */
  GPIO_InitStruct.Pin = READ_Pin|OPT_READ1_Pin|OPT_READ2_Pin|OPT_READ3_Pin;
 80022c8:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80022cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d6:	f107 0310 	add.w	r3, r7, #16
 80022da:	4619      	mov	r1, r3
 80022dc:	481b      	ldr	r0, [pc, #108]	; (800234c <MX_GPIO_Init+0x154>)
 80022de:	f001 fd09 	bl	8003cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VALV_WATER_Pin VALV_CO2_Pin VALV_HOT_WATER_Pin VALV_COLD_WATER_Pin
                           B3_Pin B4_Pin B5_Pin B6_Pin
                           B7_Pin RS_Pin E_Pin */
  GPIO_InitStruct.Pin = VALV_WATER_Pin|VALV_CO2_Pin|VALV_HOT_WATER_Pin|VALV_COLD_WATER_Pin
 80022e2:	f640 73fb 	movw	r3, #4091	; 0xffb
 80022e6:	613b      	str	r3, [r7, #16]
                          |B3_Pin|B4_Pin|B5_Pin|B6_Pin
                          |B7_Pin|RS_Pin|E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e8:	2301      	movs	r3, #1
 80022ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f0:	2302      	movs	r3, #2
 80022f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f4:	f107 0310 	add.w	r3, r7, #16
 80022f8:	4619      	mov	r1, r3
 80022fa:	4813      	ldr	r0, [pc, #76]	; (8002348 <MX_GPIO_Init+0x150>)
 80022fc:	f001 fcfa 	bl	8003cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CANCEL_Pin ADD_Pin SUB_Pin CONFIRM_Pin */
  GPIO_InitStruct.Pin = CANCEL_Pin|ADD_Pin|SUB_Pin|CONFIRM_Pin;
 8002300:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002304:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230a:	2300      	movs	r3, #0
 800230c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800230e:	f107 0310 	add.w	r3, r7, #16
 8002312:	4619      	mov	r1, r3
 8002314:	480c      	ldr	r0, [pc, #48]	; (8002348 <MX_GPIO_Init+0x150>)
 8002316:	f001 fced 	bl	8003cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B0_Pin B1_Pin B2_Pin */
  GPIO_InitStruct.Pin = B0_Pin|B1_Pin|B2_Pin;
 800231a:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 800231e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002320:	2301      	movs	r3, #1
 8002322:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	2300      	movs	r3, #0
 8002326:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002328:	2302      	movs	r3, #2
 800232a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800232c:	f107 0310 	add.w	r3, r7, #16
 8002330:	4619      	mov	r1, r3
 8002332:	4806      	ldr	r0, [pc, #24]	; (800234c <MX_GPIO_Init+0x154>)
 8002334:	f001 fcde 	bl	8003cf4 <HAL_GPIO_Init>

}
 8002338:	bf00      	nop
 800233a:	3720      	adds	r7, #32
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40021000 	.word	0x40021000
 8002344:	40011000 	.word	0x40011000
 8002348:	40010c00 	.word	0x40010c00
 800234c:	40010800 	.word	0x40010800

08002350 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
	if(htim == &htim3) HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a1a      	ldr	r2, [pc, #104]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d104      	bne.n	800236a <HAL_TIM_PeriodElapsedCallback+0x1a>
 8002360:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002364:	4818      	ldr	r0, [pc, #96]	; (80023c8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002366:	f001 fe4e 	bl	8004006 <HAL_GPIO_TogglePin>
	if(htim == &htim4){
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a17      	ldr	r2, [pc, #92]	; (80023cc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d123      	bne.n	80023ba <HAL_TIM_PeriodElapsedCallback+0x6a>
		tm.tm_sec++;
 8002372:	4b17      	ldr	r3, [pc, #92]	; (80023d0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	3301      	adds	r3, #1
 8002378:	4a15      	ldr	r2, [pc, #84]	; (80023d0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800237a:	6013      	str	r3, [r2, #0]
		if(tm.tm_sec>=60){
 800237c:	4b14      	ldr	r3, [pc, #80]	; (80023d0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b3b      	cmp	r3, #59	; 0x3b
 8002382:	dd07      	ble.n	8002394 <HAL_TIM_PeriodElapsedCallback+0x44>
			tm.tm_sec=0;
 8002384:	4b12      	ldr	r3, [pc, #72]	; (80023d0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
			tm.tm_min+=1;
 800238a:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	3301      	adds	r3, #1
 8002390:	4a0f      	ldr	r2, [pc, #60]	; (80023d0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002392:	6053      	str	r3, [r2, #4]
		}
		if(tm.tm_min>=60){
 8002394:	4b0e      	ldr	r3, [pc, #56]	; (80023d0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b3b      	cmp	r3, #59	; 0x3b
 800239a:	dd07      	ble.n	80023ac <HAL_TIM_PeriodElapsedCallback+0x5c>
			tm.tm_min=0;
 800239c:	4b0c      	ldr	r3, [pc, #48]	; (80023d0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800239e:	2200      	movs	r2, #0
 80023a0:	605a      	str	r2, [r3, #4]
			tm.tm_hour+=1;
 80023a2:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	3301      	adds	r3, #1
 80023a8:	4a09      	ldr	r2, [pc, #36]	; (80023d0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80023aa:	6093      	str	r3, [r2, #8]
		}
		if(tm.tm_hour>=24){
 80023ac:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	2b17      	cmp	r3, #23
 80023b2:	dd02      	ble.n	80023ba <HAL_TIM_PeriodElapsedCallback+0x6a>
			tm.tm_hour=0;
 80023b4:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	609a      	str	r2, [r3, #8]
		}
	}
}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	2000034c 	.word	0x2000034c
 80023c8:	40011000 	.word	0x40011000
 80023cc:	200002f8 	.word	0x200002f8
 80023d0:	200003c4 	.word	0x200003c4

080023d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80023d8:	bf00      	nop
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr

080023e0 <add_water>:
uint32_t adcData[16];
float adc1, temperature1;
float adc2, temperature2;
uint32_t dutyCycle = 0, flag = 0;

void add_water(int time, int type){ // Type 0 - Natural, Type 1 - Quente, Type 2 = Gelada
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
	if(type == 0)HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d105      	bne.n	80023fc <add_water+0x1c>
 80023f0:	2201      	movs	r2, #1
 80023f2:	2101      	movs	r1, #1
 80023f4:	4838      	ldr	r0, [pc, #224]	; (80024d8 <add_water+0xf8>)
 80023f6:	f001 fdee 	bl	8003fd6 <HAL_GPIO_WritePin>
 80023fa:	e012      	b.n	8002422 <add_water+0x42>
	else if (type == 1) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d106      	bne.n	8002410 <add_water+0x30>
 8002402:	2201      	movs	r2, #1
 8002404:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002408:	4833      	ldr	r0, [pc, #204]	; (80024d8 <add_water+0xf8>)
 800240a:	f001 fde4 	bl	8003fd6 <HAL_GPIO_WritePin>
 800240e:	e008      	b.n	8002422 <add_water+0x42>
	else if (type == 2) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	2b02      	cmp	r3, #2
 8002414:	d105      	bne.n	8002422 <add_water+0x42>
 8002416:	2201      	movs	r2, #1
 8002418:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800241c:	482e      	ldr	r0, [pc, #184]	; (80024d8 <add_water+0xf8>)
 800241e:	f001 fdda 	bl	8003fd6 <HAL_GPIO_WritePin>
	LCD_String_xy(2,2,"Adic. água...");
 8002422:	4a2e      	ldr	r2, [pc, #184]	; (80024dc <add_water+0xfc>)
 8002424:	2102      	movs	r1, #2
 8002426:	2002      	movs	r0, #2
 8002428:	f7ff fb35 	bl	8001a96 <LCD_String_xy>
	while(dutyCycle < 200){ // 0.2 ms para rampa de subida
 800242c:	e010      	b.n	8002450 <add_water+0x70>
		TIM2->CCR1 = dutyCycle*20;
 800242e:	4b2c      	ldr	r3, [pc, #176]	; (80024e0 <add_water+0x100>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002436:	4613      	mov	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	634b      	str	r3, [r1, #52]	; 0x34
		dutyCycle +=1;
 8002440:	4b27      	ldr	r3, [pc, #156]	; (80024e0 <add_water+0x100>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	3301      	adds	r3, #1
 8002446:	4a26      	ldr	r2, [pc, #152]	; (80024e0 <add_water+0x100>)
 8002448:	6013      	str	r3, [r2, #0]
		HAL_Delay(1);
 800244a:	2001      	movs	r0, #1
 800244c:	f000 fce6 	bl	8002e1c <HAL_Delay>
	while(dutyCycle < 200){ // 0.2 ms para rampa de subida
 8002450:	4b23      	ldr	r3, [pc, #140]	; (80024e0 <add_water+0x100>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2bc7      	cmp	r3, #199	; 0xc7
 8002456:	d9ea      	bls.n	800242e <add_water+0x4e>
	}
	HAL_Delay(time-450); // permanece o tempo necessário com a bomba aberta
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f5a3 73e1 	sub.w	r3, r3, #450	; 0x1c2
 800245e:	4618      	mov	r0, r3
 8002460:	f000 fcdc 	bl	8002e1c <HAL_Delay>
	dutyCycle = 250;
 8002464:	4b1e      	ldr	r3, [pc, #120]	; (80024e0 <add_water+0x100>)
 8002466:	22fa      	movs	r2, #250	; 0xfa
 8002468:	601a      	str	r2, [r3, #0]
	while(dutyCycle>0){ // 0.25 para rampa de descida
 800246a:	e00d      	b.n	8002488 <add_water+0xa8>
		TIM2->CCR1 = dutyCycle * 16;
 800246c:	4b1c      	ldr	r3, [pc, #112]	; (80024e0 <add_water+0x100>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002474:	011b      	lsls	r3, r3, #4
 8002476:	6353      	str	r3, [r2, #52]	; 0x34
		dutyCycle -=1;
 8002478:	4b19      	ldr	r3, [pc, #100]	; (80024e0 <add_water+0x100>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	3b01      	subs	r3, #1
 800247e:	4a18      	ldr	r2, [pc, #96]	; (80024e0 <add_water+0x100>)
 8002480:	6013      	str	r3, [r2, #0]
		HAL_Delay(1);
 8002482:	2001      	movs	r0, #1
 8002484:	f000 fcca 	bl	8002e1c <HAL_Delay>
	while(dutyCycle>0){ // 0.25 para rampa de descida
 8002488:	4b15      	ldr	r3, [pc, #84]	; (80024e0 <add_water+0x100>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1ed      	bne.n	800246c <add_water+0x8c>
	}
	TIM2->CCR1 = 0;
 8002490:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002494:	2200      	movs	r2, #0
 8002496:	635a      	str	r2, [r3, #52]	; 0x34
	if(type == 0)HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d105      	bne.n	80024aa <add_water+0xca>
 800249e:	2200      	movs	r2, #0
 80024a0:	2101      	movs	r1, #1
 80024a2:	480d      	ldr	r0, [pc, #52]	; (80024d8 <add_water+0xf8>)
 80024a4:	f001 fd97 	bl	8003fd6 <HAL_GPIO_WritePin>
	else if (type == 1) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
	else if (type == 2) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
}
 80024a8:	e012      	b.n	80024d0 <add_water+0xf0>
	else if (type == 1) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d106      	bne.n	80024be <add_water+0xde>
 80024b0:	2200      	movs	r2, #0
 80024b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024b6:	4808      	ldr	r0, [pc, #32]	; (80024d8 <add_water+0xf8>)
 80024b8:	f001 fd8d 	bl	8003fd6 <HAL_GPIO_WritePin>
}
 80024bc:	e008      	b.n	80024d0 <add_water+0xf0>
	else if (type == 2) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d105      	bne.n	80024d0 <add_water+0xf0>
 80024c4:	2200      	movs	r2, #0
 80024c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024ca:	4803      	ldr	r0, [pc, #12]	; (80024d8 <add_water+0xf8>)
 80024cc:	f001 fd83 	bl	8003fd6 <HAL_GPIO_WritePin>
}
 80024d0:	bf00      	nop
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40010c00 	.word	0x40010c00
 80024dc:	0800761c 	.word	0x0800761c
 80024e0:	200002b4 	.word	0x200002b4

080024e4 <add_co2>:

void add_co2(int time){
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
	int press_co2=1;
 80024ec:	2301      	movs	r3, #1
 80024ee:	60fb      	str	r3, [r7, #12]
	press_co2 = HAL_GPIO_ReadPin(GPIOC, PRESS_CO2_Pin);
 80024f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024f4:	481d      	ldr	r0, [pc, #116]	; (800256c <add_co2+0x88>)
 80024f6:	f001 fd57 	bl	8003fa8 <HAL_GPIO_ReadPin>
 80024fa:	4603      	mov	r3, r0
 80024fc:	60fb      	str	r3, [r7, #12]
	if(press_co2==0){
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d11b      	bne.n	800253c <add_co2+0x58>
		LCD_Clear();
 8002504:	f7ff f99e 	bl	8001844 <LCD_Clear>
		LCD_String_xy(1,3,"Sem CO2 no");
 8002508:	4a19      	ldr	r2, [pc, #100]	; (8002570 <add_co2+0x8c>)
 800250a:	2103      	movs	r1, #3
 800250c:	2001      	movs	r0, #1
 800250e:	f7ff fac2 	bl	8001a96 <LCD_String_xy>
		LCD_String_xy(2,3,"reservatório");
 8002512:	4a18      	ldr	r2, [pc, #96]	; (8002574 <add_co2+0x90>)
 8002514:	2103      	movs	r1, #3
 8002516:	2002      	movs	r0, #2
 8002518:	f7ff fabd 	bl	8001a96 <LCD_String_xy>
		while(1){
			HAL_Delay(4000);
 800251c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002520:	f000 fc7c 	bl	8002e1c <HAL_Delay>
			press_co2 = HAL_GPIO_ReadPin(GPIOC, PRESS_CO2_Pin);
 8002524:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002528:	4810      	ldr	r0, [pc, #64]	; (800256c <add_co2+0x88>)
 800252a:	f001 fd3d 	bl	8003fa8 <HAL_GPIO_ReadPin>
 800252e:	4603      	mov	r3, r0
 8002530:	60fb      	str	r3, [r7, #12]
			if(press_co2) break;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d100      	bne.n	800253a <add_co2+0x56>
			HAL_Delay(4000);
 8002538:	e7f0      	b.n	800251c <add_co2+0x38>
			if(press_co2) break;
 800253a:	bf00      	nop
		}
	}
	LCD_String_xy(2,2,"Adic. CO2...");
 800253c:	4a0e      	ldr	r2, [pc, #56]	; (8002578 <add_co2+0x94>)
 800253e:	2102      	movs	r1, #2
 8002540:	2002      	movs	r0, #2
 8002542:	f7ff faa8 	bl	8001a96 <LCD_String_xy>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8002546:	2201      	movs	r2, #1
 8002548:	2102      	movs	r1, #2
 800254a:	480c      	ldr	r0, [pc, #48]	; (800257c <add_co2+0x98>)
 800254c:	f001 fd43 	bl	8003fd6 <HAL_GPIO_WritePin>
	HAL_Delay(time);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4618      	mov	r0, r3
 8002554:	f000 fc62 	bl	8002e1c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8002558:	2200      	movs	r2, #0
 800255a:	2102      	movs	r1, #2
 800255c:	4807      	ldr	r0, [pc, #28]	; (800257c <add_co2+0x98>)
 800255e:	f001 fd3a 	bl	8003fd6 <HAL_GPIO_WritePin>
}
 8002562:	bf00      	nop
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40011000 	.word	0x40011000
 8002570:	0800762c 	.word	0x0800762c
 8002574:	08007638 	.word	0x08007638
 8002578:	08007648 	.word	0x08007648
 800257c:	40010c00 	.word	0x40010c00

08002580 <heater>:

void heater(float desired_temperature, ADC_HandleTypeDef* hadc1){
 8002580:	b590      	push	{r4, r7, lr}
 8002582:	b089      	sub	sp, #36	; 0x24
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
	int i, j, kp=40;
 800258a:	2328      	movs	r3, #40	; 0x28
 800258c:	617b      	str	r3, [r7, #20]
	char string_t[4];
	float error;
	LCD_Clear();
 800258e:	f7ff f959 	bl	8001844 <LCD_Clear>
	LCD_String_xy(1,2,"Aquecendo...");
 8002592:	4a75      	ldr	r2, [pc, #468]	; (8002768 <heater+0x1e8>)
 8002594:	2102      	movs	r1, #2
 8002596:	2001      	movs	r0, #1
 8002598:	f7ff fa7d 	bl	8001a96 <LCD_String_xy>
	LCD_String_xy(2,1,"Até ");
 800259c:	4a73      	ldr	r2, [pc, #460]	; (800276c <heater+0x1ec>)
 800259e:	2101      	movs	r1, #1
 80025a0:	2002      	movs	r0, #2
 80025a2:	f7ff fa78 	bl	8001a96 <LCD_String_xy>
	LCD_String_xy(2,7,"°C");
 80025a6:	4a72      	ldr	r2, [pc, #456]	; (8002770 <heater+0x1f0>)
 80025a8:	2107      	movs	r1, #7
 80025aa:	2002      	movs	r0, #2
 80025ac:	f7ff fa73 	bl	8001a96 <LCD_String_xy>
	LCD_String_xy(2,10,"T=");
 80025b0:	4a70      	ldr	r2, [pc, #448]	; (8002774 <heater+0x1f4>)
 80025b2:	210a      	movs	r1, #10
 80025b4:	2002      	movs	r0, #2
 80025b6:	f7ff fa6e 	bl	8001a96 <LCD_String_xy>
	LCD_String_xy(2,14,"°C");
 80025ba:	4a6d      	ldr	r2, [pc, #436]	; (8002770 <heater+0x1f0>)
 80025bc:	210e      	movs	r1, #14
 80025be:	2002      	movs	r0, #2
 80025c0:	f7ff fa69 	bl	8001a96 <LCD_String_xy>
	sprintf(string_t, "%02d", (int)desired_temperature);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f7fe fcc7 	bl	8000f58 <__aeabi_f2iz>
 80025ca:	4602      	mov	r2, r0
 80025cc:	f107 030c 	add.w	r3, r7, #12
 80025d0:	4969      	ldr	r1, [pc, #420]	; (8002778 <heater+0x1f8>)
 80025d2:	4618      	mov	r0, r3
 80025d4:	f003 fbf0 	bl	8005db8 <siprintf>
	LCD_String_xy(2,5,string_t);
 80025d8:	f107 030c 	add.w	r3, r7, #12
 80025dc:	461a      	mov	r2, r3
 80025de:	2105      	movs	r1, #5
 80025e0:	2002      	movs	r0, #2
 80025e2:	f7ff fa58 	bl	8001a96 <LCD_String_xy>
	while(1){
		adc1=0;
 80025e6:	4b65      	ldr	r3, [pc, #404]	; (800277c <heater+0x1fc>)
 80025e8:	f04f 0200 	mov.w	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
		for(i=0;i<4;i++){
 80025ee:	2300      	movs	r3, #0
 80025f0:	61fb      	str	r3, [r7, #28]
 80025f2:	e02a      	b.n	800264a <heater+0xca>
			HAL_ADC_Start_DMA(hadc1, adcData, CONVERSION);// lê temperatura 4x16 vezes em dois canais (32)
 80025f4:	2210      	movs	r2, #16
 80025f6:	4962      	ldr	r1, [pc, #392]	; (8002780 <heater+0x200>)
 80025f8:	6838      	ldr	r0, [r7, #0]
 80025fa:	f000 fd09 	bl	8003010 <HAL_ADC_Start_DMA>
			while(flag==0);
 80025fe:	bf00      	nop
 8002600:	4b60      	ldr	r3, [pc, #384]	; (8002784 <heater+0x204>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0fb      	beq.n	8002600 <heater+0x80>
			flag=0;
 8002608:	4b5e      	ldr	r3, [pc, #376]	; (8002784 <heater+0x204>)
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]
			for(j=0;j<CONVERSION/2;j++){ // Acumula apenas do canal 1 (A3)
 800260e:	2300      	movs	r3, #0
 8002610:	61bb      	str	r3, [r7, #24]
 8002612:	e014      	b.n	800263e <heater+0xbe>
				adc1+=adcData[j];
 8002614:	4a5a      	ldr	r2, [pc, #360]	; (8002780 <heater+0x200>)
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800261c:	4618      	mov	r0, r3
 800261e:	f7fe fa7d 	bl	8000b1c <__aeabi_ui2f>
 8002622:	4602      	mov	r2, r0
 8002624:	4b55      	ldr	r3, [pc, #340]	; (800277c <heater+0x1fc>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4619      	mov	r1, r3
 800262a:	4610      	mov	r0, r2
 800262c:	f7fe f9c6 	bl	80009bc <__addsf3>
 8002630:	4603      	mov	r3, r0
 8002632:	461a      	mov	r2, r3
 8002634:	4b51      	ldr	r3, [pc, #324]	; (800277c <heater+0x1fc>)
 8002636:	601a      	str	r2, [r3, #0]
			for(j=0;j<CONVERSION/2;j++){ // Acumula apenas do canal 1 (A3)
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	3301      	adds	r3, #1
 800263c:	61bb      	str	r3, [r7, #24]
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	2b07      	cmp	r3, #7
 8002642:	dde7      	ble.n	8002614 <heater+0x94>
		for(i=0;i<4;i++){
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	3301      	adds	r3, #1
 8002648:	61fb      	str	r3, [r7, #28]
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	2b03      	cmp	r3, #3
 800264e:	ddd1      	ble.n	80025f4 <heater+0x74>
			}
		}
		temperature1 = (adc1/(CONVERSION*2))*ADC_SCALE; // média canal 1 em volts
 8002650:	4b4a      	ldr	r3, [pc, #296]	; (800277c <heater+0x1fc>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 8002658:	4618      	mov	r0, r3
 800265a:	f7fe fb6b 	bl	8000d34 <__aeabi_fdiv>
 800265e:	4603      	mov	r3, r0
 8002660:	4618      	mov	r0, r3
 8002662:	f7fd feeb 	bl	800043c <__aeabi_f2d>
 8002666:	a33c      	add	r3, pc, #240	; (adr r3, 8002758 <heater+0x1d8>)
 8002668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266c:	f7fd ff3e 	bl	80004ec <__aeabi_dmul>
 8002670:	4603      	mov	r3, r0
 8002672:	460c      	mov	r4, r1
 8002674:	4618      	mov	r0, r3
 8002676:	4621      	mov	r1, r4
 8002678:	f7fe f94a 	bl	8000910 <__aeabi_d2f>
 800267c:	4602      	mov	r2, r0
 800267e:	4b42      	ldr	r3, [pc, #264]	; (8002788 <heater+0x208>)
 8002680:	601a      	str	r2, [r3, #0]
		temperature1 /= DEGREE_CONVERSION; // converte para graus
 8002682:	4b41      	ldr	r3, [pc, #260]	; (8002788 <heater+0x208>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f7fd fed8 	bl	800043c <__aeabi_f2d>
 800268c:	a334      	add	r3, pc, #208	; (adr r3, 8002760 <heater+0x1e0>)
 800268e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002692:	f7fe f855 	bl	8000740 <__aeabi_ddiv>
 8002696:	4603      	mov	r3, r0
 8002698:	460c      	mov	r4, r1
 800269a:	4618      	mov	r0, r3
 800269c:	4621      	mov	r1, r4
 800269e:	f7fe f937 	bl	8000910 <__aeabi_d2f>
 80026a2:	4602      	mov	r2, r0
 80026a4:	4b38      	ldr	r3, [pc, #224]	; (8002788 <heater+0x208>)
 80026a6:	601a      	str	r2, [r3, #0]
		if(temperature1>100) temperature1 = 100;
 80026a8:	4b37      	ldr	r3, [pc, #220]	; (8002788 <heater+0x208>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4937      	ldr	r1, [pc, #220]	; (800278c <heater+0x20c>)
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fe fc48 	bl	8000f44 <__aeabi_fcmpgt>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d002      	beq.n	80026c0 <heater+0x140>
 80026ba:	4b33      	ldr	r3, [pc, #204]	; (8002788 <heater+0x208>)
 80026bc:	4a33      	ldr	r2, [pc, #204]	; (800278c <heater+0x20c>)
 80026be:	601a      	str	r2, [r3, #0]
		if(temperature1<5) temperature1 = 5;
 80026c0:	4b31      	ldr	r3, [pc, #196]	; (8002788 <heater+0x208>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4932      	ldr	r1, [pc, #200]	; (8002790 <heater+0x210>)
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7fe fc1e 	bl	8000f08 <__aeabi_fcmplt>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d002      	beq.n	80026d8 <heater+0x158>
 80026d2:	4b2d      	ldr	r3, [pc, #180]	; (8002788 <heater+0x208>)
 80026d4:	4a2e      	ldr	r2, [pc, #184]	; (8002790 <heater+0x210>)
 80026d6:	601a      	str	r2, [r3, #0]
		sprintf(string_t, "%02d", (int)temperature1);
 80026d8:	4b2b      	ldr	r3, [pc, #172]	; (8002788 <heater+0x208>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4618      	mov	r0, r3
 80026de:	f7fe fc3b 	bl	8000f58 <__aeabi_f2iz>
 80026e2:	4602      	mov	r2, r0
 80026e4:	f107 030c 	add.w	r3, r7, #12
 80026e8:	4923      	ldr	r1, [pc, #140]	; (8002778 <heater+0x1f8>)
 80026ea:	4618      	mov	r0, r3
 80026ec:	f003 fb64 	bl	8005db8 <siprintf>
		LCD_String_xy(2,12,string_t);
 80026f0:	f107 030c 	add.w	r3, r7, #12
 80026f4:	461a      	mov	r2, r3
 80026f6:	210c      	movs	r1, #12
 80026f8:	2002      	movs	r0, #2
 80026fa:	f7ff f9cc 	bl	8001a96 <LCD_String_xy>
		// controle
		error = desired_temperature - temperature1;
 80026fe:	4b22      	ldr	r3, [pc, #136]	; (8002788 <heater+0x208>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4619      	mov	r1, r3
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f7fe f957 	bl	80009b8 <__aeabi_fsub>
 800270a:	4603      	mov	r3, r0
 800270c:	613b      	str	r3, [r7, #16]
		if(error<0) break;
 800270e:	f04f 0100 	mov.w	r1, #0
 8002712:	6938      	ldr	r0, [r7, #16]
 8002714:	f7fe fbf8 	bl	8000f08 <__aeabi_fcmplt>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d113      	bne.n	8002746 <heater+0x1c6>
		else{
			TIM2->CCR2 = error * kp;
 800271e:	6978      	ldr	r0, [r7, #20]
 8002720:	f7fe fa00 	bl	8000b24 <__aeabi_i2f>
 8002724:	4603      	mov	r3, r0
 8002726:	6939      	ldr	r1, [r7, #16]
 8002728:	4618      	mov	r0, r3
 800272a:	f7fe fa4f 	bl	8000bcc <__aeabi_fmul>
 800272e:	4603      	mov	r3, r0
 8002730:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002734:	4618      	mov	r0, r3
 8002736:	f7fe fc35 	bl	8000fa4 <__aeabi_f2uiz>
 800273a:	4603      	mov	r3, r0
 800273c:	63a3      	str	r3, [r4, #56]	; 0x38
		}
		HAL_Delay(50);
 800273e:	2032      	movs	r0, #50	; 0x32
 8002740:	f000 fb6c 	bl	8002e1c <HAL_Delay>
		adc1=0;
 8002744:	e74f      	b.n	80025e6 <heater+0x66>
		if(error<0) break;
 8002746:	bf00      	nop
	}
	TIM2->CCR2 = 0;
 8002748:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800274c:	2200      	movs	r2, #0
 800274e:	639a      	str	r2, [r3, #56]	; 0x38

}
 8002750:	bf00      	nop
 8002752:	3724      	adds	r7, #36	; 0x24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd90      	pop	{r4, r7, pc}
 8002758:	e734d9b4 	.word	0xe734d9b4
 800275c:	3f4a680c 	.word	0x3f4a680c
 8002760:	47ae147b 	.word	0x47ae147b
 8002764:	3f747ae1 	.word	0x3f747ae1
 8002768:	08007658 	.word	0x08007658
 800276c:	08007668 	.word	0x08007668
 8002770:	08007670 	.word	0x08007670
 8002774:	08007674 	.word	0x08007674
 8002778:	08007678 	.word	0x08007678
 800277c:	20000478 	.word	0x20000478
 8002780:	20000480 	.word	0x20000480
 8002784:	200002b8 	.word	0x200002b8
 8002788:	20000474 	.word	0x20000474
 800278c:	42c80000 	.word	0x42c80000
 8002790:	40a00000 	.word	0x40a00000
 8002794:	00000000 	.word	0x00000000

08002798 <cooler>:

void cooler(float desired_temperature, ADC_HandleTypeDef* hadc1){
 8002798:	b590      	push	{r4, r7, lr}
 800279a:	b089      	sub	sp, #36	; 0x24
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]

	int i, j, kp=100;
 80027a2:	2364      	movs	r3, #100	; 0x64
 80027a4:	617b      	str	r3, [r7, #20]
	char string_t[4];
	float error;
	LCD_Clear();
 80027a6:	f7ff f84d 	bl	8001844 <LCD_Clear>
	LCD_String_xy(1,2,"Resfriando...");
 80027aa:	4a75      	ldr	r2, [pc, #468]	; (8002980 <cooler+0x1e8>)
 80027ac:	2102      	movs	r1, #2
 80027ae:	2001      	movs	r0, #1
 80027b0:	f7ff f971 	bl	8001a96 <LCD_String_xy>
	LCD_String_xy(2,1,"Até ");
 80027b4:	4a73      	ldr	r2, [pc, #460]	; (8002984 <cooler+0x1ec>)
 80027b6:	2101      	movs	r1, #1
 80027b8:	2002      	movs	r0, #2
 80027ba:	f7ff f96c 	bl	8001a96 <LCD_String_xy>
	LCD_String_xy(2,7,"°C");
 80027be:	4a72      	ldr	r2, [pc, #456]	; (8002988 <cooler+0x1f0>)
 80027c0:	2107      	movs	r1, #7
 80027c2:	2002      	movs	r0, #2
 80027c4:	f7ff f967 	bl	8001a96 <LCD_String_xy>
	LCD_String_xy(2,10,"T=");
 80027c8:	4a70      	ldr	r2, [pc, #448]	; (800298c <cooler+0x1f4>)
 80027ca:	210a      	movs	r1, #10
 80027cc:	2002      	movs	r0, #2
 80027ce:	f7ff f962 	bl	8001a96 <LCD_String_xy>
	LCD_String_xy(2,14,"°C");
 80027d2:	4a6d      	ldr	r2, [pc, #436]	; (8002988 <cooler+0x1f0>)
 80027d4:	210e      	movs	r1, #14
 80027d6:	2002      	movs	r0, #2
 80027d8:	f7ff f95d 	bl	8001a96 <LCD_String_xy>
	sprintf(string_t, "%02d", (int)desired_temperature);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f7fe fbbb 	bl	8000f58 <__aeabi_f2iz>
 80027e2:	4602      	mov	r2, r0
 80027e4:	f107 030c 	add.w	r3, r7, #12
 80027e8:	4969      	ldr	r1, [pc, #420]	; (8002990 <cooler+0x1f8>)
 80027ea:	4618      	mov	r0, r3
 80027ec:	f003 fae4 	bl	8005db8 <siprintf>
	LCD_String_xy(2,5,string_t);
 80027f0:	f107 030c 	add.w	r3, r7, #12
 80027f4:	461a      	mov	r2, r3
 80027f6:	2105      	movs	r1, #5
 80027f8:	2002      	movs	r0, #2
 80027fa:	f7ff f94c 	bl	8001a96 <LCD_String_xy>
	while(1){
		adc2=0;
 80027fe:	4b65      	ldr	r3, [pc, #404]	; (8002994 <cooler+0x1fc>)
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
		for(i=0;i<4;i++){
 8002806:	2300      	movs	r3, #0
 8002808:	61fb      	str	r3, [r7, #28]
 800280a:	e02a      	b.n	8002862 <cooler+0xca>
			HAL_ADC_Start_DMA(hadc1, adcData, CONVERSION);// lê temperatura 4x16 vezes em dois canais (32)
 800280c:	2210      	movs	r2, #16
 800280e:	4962      	ldr	r1, [pc, #392]	; (8002998 <cooler+0x200>)
 8002810:	6838      	ldr	r0, [r7, #0]
 8002812:	f000 fbfd 	bl	8003010 <HAL_ADC_Start_DMA>
			while(flag==0);
 8002816:	bf00      	nop
 8002818:	4b60      	ldr	r3, [pc, #384]	; (800299c <cooler+0x204>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0fb      	beq.n	8002818 <cooler+0x80>
			flag=0;
 8002820:	4b5e      	ldr	r3, [pc, #376]	; (800299c <cooler+0x204>)
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]
			for(j=CONVERSION/2;j<CONVERSION;j++){ // Acumula apenas do canal 1 (A3)
 8002826:	2308      	movs	r3, #8
 8002828:	61bb      	str	r3, [r7, #24]
 800282a:	e014      	b.n	8002856 <cooler+0xbe>
				adc2+=adcData[j];
 800282c:	4a5a      	ldr	r2, [pc, #360]	; (8002998 <cooler+0x200>)
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002834:	4618      	mov	r0, r3
 8002836:	f7fe f971 	bl	8000b1c <__aeabi_ui2f>
 800283a:	4602      	mov	r2, r0
 800283c:	4b55      	ldr	r3, [pc, #340]	; (8002994 <cooler+0x1fc>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4619      	mov	r1, r3
 8002842:	4610      	mov	r0, r2
 8002844:	f7fe f8ba 	bl	80009bc <__addsf3>
 8002848:	4603      	mov	r3, r0
 800284a:	461a      	mov	r2, r3
 800284c:	4b51      	ldr	r3, [pc, #324]	; (8002994 <cooler+0x1fc>)
 800284e:	601a      	str	r2, [r3, #0]
			for(j=CONVERSION/2;j<CONVERSION;j++){ // Acumula apenas do canal 1 (A3)
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	3301      	adds	r3, #1
 8002854:	61bb      	str	r3, [r7, #24]
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	2b0f      	cmp	r3, #15
 800285a:	dde7      	ble.n	800282c <cooler+0x94>
		for(i=0;i<4;i++){
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	3301      	adds	r3, #1
 8002860:	61fb      	str	r3, [r7, #28]
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	2b03      	cmp	r3, #3
 8002866:	ddd1      	ble.n	800280c <cooler+0x74>
			}
		}
		temperature2 = (adc2/(CONVERSION*2))*ADC_SCALE; // média canal 1 em volts
 8002868:	4b4a      	ldr	r3, [pc, #296]	; (8002994 <cooler+0x1fc>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 8002870:	4618      	mov	r0, r3
 8002872:	f7fe fa5f 	bl	8000d34 <__aeabi_fdiv>
 8002876:	4603      	mov	r3, r0
 8002878:	4618      	mov	r0, r3
 800287a:	f7fd fddf 	bl	800043c <__aeabi_f2d>
 800287e:	a33c      	add	r3, pc, #240	; (adr r3, 8002970 <cooler+0x1d8>)
 8002880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002884:	f7fd fe32 	bl	80004ec <__aeabi_dmul>
 8002888:	4603      	mov	r3, r0
 800288a:	460c      	mov	r4, r1
 800288c:	4618      	mov	r0, r3
 800288e:	4621      	mov	r1, r4
 8002890:	f7fe f83e 	bl	8000910 <__aeabi_d2f>
 8002894:	4602      	mov	r2, r0
 8002896:	4b42      	ldr	r3, [pc, #264]	; (80029a0 <cooler+0x208>)
 8002898:	601a      	str	r2, [r3, #0]
		temperature2 /= DEGREE_CONVERSION; // converte para graus
 800289a:	4b41      	ldr	r3, [pc, #260]	; (80029a0 <cooler+0x208>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fd fdcc 	bl	800043c <__aeabi_f2d>
 80028a4:	a334      	add	r3, pc, #208	; (adr r3, 8002978 <cooler+0x1e0>)
 80028a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028aa:	f7fd ff49 	bl	8000740 <__aeabi_ddiv>
 80028ae:	4603      	mov	r3, r0
 80028b0:	460c      	mov	r4, r1
 80028b2:	4618      	mov	r0, r3
 80028b4:	4621      	mov	r1, r4
 80028b6:	f7fe f82b 	bl	8000910 <__aeabi_d2f>
 80028ba:	4602      	mov	r2, r0
 80028bc:	4b38      	ldr	r3, [pc, #224]	; (80029a0 <cooler+0x208>)
 80028be:	601a      	str	r2, [r3, #0]
		if(temperature2>50) temperature2 = 50;
 80028c0:	4b37      	ldr	r3, [pc, #220]	; (80029a0 <cooler+0x208>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4937      	ldr	r1, [pc, #220]	; (80029a4 <cooler+0x20c>)
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fe fb3c 	bl	8000f44 <__aeabi_fcmpgt>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d002      	beq.n	80028d8 <cooler+0x140>
 80028d2:	4b33      	ldr	r3, [pc, #204]	; (80029a0 <cooler+0x208>)
 80028d4:	4a33      	ldr	r2, [pc, #204]	; (80029a4 <cooler+0x20c>)
 80028d6:	601a      	str	r2, [r3, #0]
		if(temperature2<5) temperature2 = 5;
 80028d8:	4b31      	ldr	r3, [pc, #196]	; (80029a0 <cooler+0x208>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4932      	ldr	r1, [pc, #200]	; (80029a8 <cooler+0x210>)
 80028de:	4618      	mov	r0, r3
 80028e0:	f7fe fb12 	bl	8000f08 <__aeabi_fcmplt>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d002      	beq.n	80028f0 <cooler+0x158>
 80028ea:	4b2d      	ldr	r3, [pc, #180]	; (80029a0 <cooler+0x208>)
 80028ec:	4a2e      	ldr	r2, [pc, #184]	; (80029a8 <cooler+0x210>)
 80028ee:	601a      	str	r2, [r3, #0]
		sprintf(string_t, "%02d", (int)temperature2);
 80028f0:	4b2b      	ldr	r3, [pc, #172]	; (80029a0 <cooler+0x208>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7fe fb2f 	bl	8000f58 <__aeabi_f2iz>
 80028fa:	4602      	mov	r2, r0
 80028fc:	f107 030c 	add.w	r3, r7, #12
 8002900:	4923      	ldr	r1, [pc, #140]	; (8002990 <cooler+0x1f8>)
 8002902:	4618      	mov	r0, r3
 8002904:	f003 fa58 	bl	8005db8 <siprintf>
		LCD_String_xy(2,12,string_t);
 8002908:	f107 030c 	add.w	r3, r7, #12
 800290c:	461a      	mov	r2, r3
 800290e:	210c      	movs	r1, #12
 8002910:	2002      	movs	r0, #2
 8002912:	f7ff f8c0 	bl	8001a96 <LCD_String_xy>
		// controle
		error = temperature2 - desired_temperature;
 8002916:	4b22      	ldr	r3, [pc, #136]	; (80029a0 <cooler+0x208>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	4618      	mov	r0, r3
 800291e:	f7fe f84b 	bl	80009b8 <__aeabi_fsub>
 8002922:	4603      	mov	r3, r0
 8002924:	613b      	str	r3, [r7, #16]
		if(error<0) break;
 8002926:	f04f 0100 	mov.w	r1, #0
 800292a:	6938      	ldr	r0, [r7, #16]
 800292c:	f7fe faec 	bl	8000f08 <__aeabi_fcmplt>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d113      	bne.n	800295e <cooler+0x1c6>
		else{
			TIM2->CCR3 = error * kp;
 8002936:	6978      	ldr	r0, [r7, #20]
 8002938:	f7fe f8f4 	bl	8000b24 <__aeabi_i2f>
 800293c:	4603      	mov	r3, r0
 800293e:	6939      	ldr	r1, [r7, #16]
 8002940:	4618      	mov	r0, r3
 8002942:	f7fe f943 	bl	8000bcc <__aeabi_fmul>
 8002946:	4603      	mov	r3, r0
 8002948:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800294c:	4618      	mov	r0, r3
 800294e:	f7fe fb29 	bl	8000fa4 <__aeabi_f2uiz>
 8002952:	4603      	mov	r3, r0
 8002954:	63e3      	str	r3, [r4, #60]	; 0x3c
		}
		HAL_Delay(50);
 8002956:	2032      	movs	r0, #50	; 0x32
 8002958:	f000 fa60 	bl	8002e1c <HAL_Delay>
		adc2=0;
 800295c:	e74f      	b.n	80027fe <cooler+0x66>
		if(error<0) break;
 800295e:	bf00      	nop
	}
	TIM2->CCR3 = 0;
 8002960:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002964:	2200      	movs	r2, #0
 8002966:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002968:	bf00      	nop
 800296a:	3724      	adds	r7, #36	; 0x24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd90      	pop	{r4, r7, pc}
 8002970:	e734d9b4 	.word	0xe734d9b4
 8002974:	3f4a680c 	.word	0x3f4a680c
 8002978:	47ae147b 	.word	0x47ae147b
 800297c:	3f747ae1 	.word	0x3f747ae1
 8002980:	08007680 	.word	0x08007680
 8002984:	08007668 	.word	0x08007668
 8002988:	08007670 	.word	0x08007670
 800298c:	08007674 	.word	0x08007674
 8002990:	08007678 	.word	0x08007678
 8002994:	2000047c 	.word	0x2000047c
 8002998:	20000480 	.word	0x20000480
 800299c:	200002b8 	.word	0x200002b8
 80029a0:	200004c0 	.word	0x200004c0
 80029a4:	42480000 	.word	0x42480000
 80029a8:	40a00000 	.word	0x40a00000

080029ac <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
	flag = 1;
 80029b4:	4b03      	ldr	r3, [pc, #12]	; (80029c4 <HAL_ADC_ConvCpltCallback+0x18>)
 80029b6:	2201      	movs	r2, #1
 80029b8:	601a      	str	r2, [r3, #0]
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr
 80029c4:	200002b8 	.word	0x200002b8

080029c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80029ce:	4b15      	ldr	r3, [pc, #84]	; (8002a24 <HAL_MspInit+0x5c>)
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	4a14      	ldr	r2, [pc, #80]	; (8002a24 <HAL_MspInit+0x5c>)
 80029d4:	f043 0301 	orr.w	r3, r3, #1
 80029d8:	6193      	str	r3, [r2, #24]
 80029da:	4b12      	ldr	r3, [pc, #72]	; (8002a24 <HAL_MspInit+0x5c>)
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	60bb      	str	r3, [r7, #8]
 80029e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029e6:	4b0f      	ldr	r3, [pc, #60]	; (8002a24 <HAL_MspInit+0x5c>)
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	4a0e      	ldr	r2, [pc, #56]	; (8002a24 <HAL_MspInit+0x5c>)
 80029ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f0:	61d3      	str	r3, [r2, #28]
 80029f2:	4b0c      	ldr	r3, [pc, #48]	; (8002a24 <HAL_MspInit+0x5c>)
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fa:	607b      	str	r3, [r7, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80029fe:	4b0a      	ldr	r3, [pc, #40]	; (8002a28 <HAL_MspInit+0x60>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	4a04      	ldr	r2, [pc, #16]	; (8002a28 <HAL_MspInit+0x60>)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a1a:	bf00      	nop
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr
 8002a24:	40021000 	.word	0x40021000
 8002a28:	40010000 	.word	0x40010000

08002a2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b088      	sub	sp, #32
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a34:	f107 0310 	add.w	r3, r7, #16
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	605a      	str	r2, [r3, #4]
 8002a3e:	609a      	str	r2, [r3, #8]
 8002a40:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a28      	ldr	r2, [pc, #160]	; (8002ae8 <HAL_ADC_MspInit+0xbc>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d149      	bne.n	8002ae0 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a4c:	4b27      	ldr	r3, [pc, #156]	; (8002aec <HAL_ADC_MspInit+0xc0>)
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	4a26      	ldr	r2, [pc, #152]	; (8002aec <HAL_ADC_MspInit+0xc0>)
 8002a52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a56:	6193      	str	r3, [r2, #24]
 8002a58:	4b24      	ldr	r3, [pc, #144]	; (8002aec <HAL_ADC_MspInit+0xc0>)
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a64:	4b21      	ldr	r3, [pc, #132]	; (8002aec <HAL_ADC_MspInit+0xc0>)
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	4a20      	ldr	r2, [pc, #128]	; (8002aec <HAL_ADC_MspInit+0xc0>)
 8002a6a:	f043 0304 	orr.w	r3, r3, #4
 8002a6e:	6193      	str	r3, [r2, #24]
 8002a70:	4b1e      	ldr	r3, [pc, #120]	; (8002aec <HAL_ADC_MspInit+0xc0>)
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	60bb      	str	r3, [r7, #8]
 8002a7a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002a7c:	2318      	movs	r3, #24
 8002a7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a80:	2303      	movs	r3, #3
 8002a82:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a84:	f107 0310 	add.w	r3, r7, #16
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4819      	ldr	r0, [pc, #100]	; (8002af0 <HAL_ADC_MspInit+0xc4>)
 8002a8c:	f001 f932 	bl	8003cf4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002a90:	4b18      	ldr	r3, [pc, #96]	; (8002af4 <HAL_ADC_MspInit+0xc8>)
 8002a92:	4a19      	ldr	r2, [pc, #100]	; (8002af8 <HAL_ADC_MspInit+0xcc>)
 8002a94:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a96:	4b17      	ldr	r3, [pc, #92]	; (8002af4 <HAL_ADC_MspInit+0xc8>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a9c:	4b15      	ldr	r3, [pc, #84]	; (8002af4 <HAL_ADC_MspInit+0xc8>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002aa2:	4b14      	ldr	r3, [pc, #80]	; (8002af4 <HAL_ADC_MspInit+0xc8>)
 8002aa4:	2280      	movs	r2, #128	; 0x80
 8002aa6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002aa8:	4b12      	ldr	r3, [pc, #72]	; (8002af4 <HAL_ADC_MspInit+0xc8>)
 8002aaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aae:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ab0:	4b10      	ldr	r3, [pc, #64]	; (8002af4 <HAL_ADC_MspInit+0xc8>)
 8002ab2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ab6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002ab8:	4b0e      	ldr	r3, [pc, #56]	; (8002af4 <HAL_ADC_MspInit+0xc8>)
 8002aba:	2220      	movs	r2, #32
 8002abc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002abe:	4b0d      	ldr	r3, [pc, #52]	; (8002af4 <HAL_ADC_MspInit+0xc8>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ac4:	480b      	ldr	r0, [pc, #44]	; (8002af4 <HAL_ADC_MspInit+0xc8>)
 8002ac6:	f000 ff27 	bl	8003918 <HAL_DMA_Init>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002ad0:	f7ff fc80 	bl	80023d4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a07      	ldr	r2, [pc, #28]	; (8002af4 <HAL_ADC_MspInit+0xc8>)
 8002ad8:	621a      	str	r2, [r3, #32]
 8002ada:	4a06      	ldr	r2, [pc, #24]	; (8002af4 <HAL_ADC_MspInit+0xc8>)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002ae0:	bf00      	nop
 8002ae2:	3720      	adds	r7, #32
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40012400 	.word	0x40012400
 8002aec:	40021000 	.word	0x40021000
 8002af0:	40010800 	.word	0x40010800
 8002af4:	200003e8 	.word	0x200003e8
 8002af8:	40020008 	.word	0x40020008

08002afc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b0c:	d10c      	bne.n	8002b28 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b0e:	4b22      	ldr	r3, [pc, #136]	; (8002b98 <HAL_TIM_Base_MspInit+0x9c>)
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	4a21      	ldr	r2, [pc, #132]	; (8002b98 <HAL_TIM_Base_MspInit+0x9c>)
 8002b14:	f043 0301 	orr.w	r3, r3, #1
 8002b18:	61d3      	str	r3, [r2, #28]
 8002b1a:	4b1f      	ldr	r3, [pc, #124]	; (8002b98 <HAL_TIM_Base_MspInit+0x9c>)
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	617b      	str	r3, [r7, #20]
 8002b24:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002b26:	e032      	b.n	8002b8e <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a1b      	ldr	r2, [pc, #108]	; (8002b9c <HAL_TIM_Base_MspInit+0xa0>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d114      	bne.n	8002b5c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b32:	4b19      	ldr	r3, [pc, #100]	; (8002b98 <HAL_TIM_Base_MspInit+0x9c>)
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	4a18      	ldr	r2, [pc, #96]	; (8002b98 <HAL_TIM_Base_MspInit+0x9c>)
 8002b38:	f043 0302 	orr.w	r3, r3, #2
 8002b3c:	61d3      	str	r3, [r2, #28]
 8002b3e:	4b16      	ldr	r3, [pc, #88]	; (8002b98 <HAL_TIM_Base_MspInit+0x9c>)
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	613b      	str	r3, [r7, #16]
 8002b48:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	201d      	movs	r0, #29
 8002b50:	f000 feab 	bl	80038aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002b54:	201d      	movs	r0, #29
 8002b56:	f000 fec4 	bl	80038e2 <HAL_NVIC_EnableIRQ>
}
 8002b5a:	e018      	b.n	8002b8e <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a0f      	ldr	r2, [pc, #60]	; (8002ba0 <HAL_TIM_Base_MspInit+0xa4>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d113      	bne.n	8002b8e <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b66:	4b0c      	ldr	r3, [pc, #48]	; (8002b98 <HAL_TIM_Base_MspInit+0x9c>)
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	4a0b      	ldr	r2, [pc, #44]	; (8002b98 <HAL_TIM_Base_MspInit+0x9c>)
 8002b6c:	f043 0304 	orr.w	r3, r3, #4
 8002b70:	61d3      	str	r3, [r2, #28]
 8002b72:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <HAL_TIM_Base_MspInit+0x9c>)
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	f003 0304 	and.w	r3, r3, #4
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002b7e:	2200      	movs	r2, #0
 8002b80:	2100      	movs	r1, #0
 8002b82:	201e      	movs	r0, #30
 8002b84:	f000 fe91 	bl	80038aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002b88:	201e      	movs	r0, #30
 8002b8a:	f000 feaa 	bl	80038e2 <HAL_NVIC_EnableIRQ>
}
 8002b8e:	bf00      	nop
 8002b90:	3718      	adds	r7, #24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	40000400 	.word	0x40000400
 8002ba0:	40000800 	.word	0x40000800

08002ba4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b088      	sub	sp, #32
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bac:	f107 0310 	add.w	r3, r7, #16
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	605a      	str	r2, [r3, #4]
 8002bb6:	609a      	str	r2, [r3, #8]
 8002bb8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bc2:	d117      	bne.n	8002bf4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc4:	4b0d      	ldr	r3, [pc, #52]	; (8002bfc <HAL_TIM_MspPostInit+0x58>)
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	4a0c      	ldr	r2, [pc, #48]	; (8002bfc <HAL_TIM_MspPostInit+0x58>)
 8002bca:	f043 0304 	orr.w	r3, r3, #4
 8002bce:	6193      	str	r3, [r2, #24]
 8002bd0:	4b0a      	ldr	r3, [pc, #40]	; (8002bfc <HAL_TIM_MspPostInit+0x58>)
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002bdc:	2307      	movs	r3, #7
 8002bde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be0:	2302      	movs	r3, #2
 8002be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be4:	2302      	movs	r3, #2
 8002be6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be8:	f107 0310 	add.w	r3, r7, #16
 8002bec:	4619      	mov	r1, r3
 8002bee:	4804      	ldr	r0, [pc, #16]	; (8002c00 <HAL_TIM_MspPostInit+0x5c>)
 8002bf0:	f001 f880 	bl	8003cf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002bf4:	bf00      	nop
 8002bf6:	3720      	adds	r7, #32
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	40010800 	.word	0x40010800

08002c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002c08:	bf00      	nop
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr

08002c10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c14:	e7fe      	b.n	8002c14 <HardFault_Handler+0x4>

08002c16 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c16:	b480      	push	{r7}
 8002c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c1a:	e7fe      	b.n	8002c1a <MemManage_Handler+0x4>

08002c1c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c20:	e7fe      	b.n	8002c20 <BusFault_Handler+0x4>

08002c22 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c22:	b480      	push	{r7}
 8002c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c26:	e7fe      	b.n	8002c26 <UsageFault_Handler+0x4>

08002c28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c2c:	bf00      	nop
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bc80      	pop	{r7}
 8002c32:	4770      	bx	lr

08002c34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c38:	bf00      	nop
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bc80      	pop	{r7}
 8002c3e:	4770      	bx	lr

08002c40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c44:	bf00      	nop
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr

08002c4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c50:	f000 f8c8 	bl	8002de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c54:	bf00      	nop
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002c5c:	4802      	ldr	r0, [pc, #8]	; (8002c68 <DMA1_Channel1_IRQHandler+0x10>)
 8002c5e:	f000 ff15 	bl	8003a8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002c62:	bf00      	nop
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	200003e8 	.word	0x200003e8

08002c6c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002c70:	4802      	ldr	r0, [pc, #8]	; (8002c7c <TIM3_IRQHandler+0x10>)
 8002c72:	f002 f8f7 	bl	8004e64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002c76:	bf00      	nop
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	2000034c 	.word	0x2000034c

08002c80 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002c84:	4802      	ldr	r0, [pc, #8]	; (8002c90 <TIM4_IRQHandler+0x10>)
 8002c86:	f002 f8ed 	bl	8004e64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	200002f8 	.word	0x200002f8

08002c94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c9c:	4a14      	ldr	r2, [pc, #80]	; (8002cf0 <_sbrk+0x5c>)
 8002c9e:	4b15      	ldr	r3, [pc, #84]	; (8002cf4 <_sbrk+0x60>)
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ca8:	4b13      	ldr	r3, [pc, #76]	; (8002cf8 <_sbrk+0x64>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d102      	bne.n	8002cb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cb0:	4b11      	ldr	r3, [pc, #68]	; (8002cf8 <_sbrk+0x64>)
 8002cb2:	4a12      	ldr	r2, [pc, #72]	; (8002cfc <_sbrk+0x68>)
 8002cb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cb6:	4b10      	ldr	r3, [pc, #64]	; (8002cf8 <_sbrk+0x64>)
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d207      	bcs.n	8002cd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cc4:	f002 fe84 	bl	80059d0 <__errno>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	230c      	movs	r3, #12
 8002ccc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002cce:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd2:	e009      	b.n	8002ce8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cd4:	4b08      	ldr	r3, [pc, #32]	; (8002cf8 <_sbrk+0x64>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cda:	4b07      	ldr	r3, [pc, #28]	; (8002cf8 <_sbrk+0x64>)
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	4a05      	ldr	r2, [pc, #20]	; (8002cf8 <_sbrk+0x64>)
 8002ce4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3718      	adds	r7, #24
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	20005000 	.word	0x20005000
 8002cf4:	00000400 	.word	0x00000400
 8002cf8:	200002c0 	.word	0x200002c0
 8002cfc:	200004d0 	.word	0x200004d0

08002d00 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d04:	bf00      	nop
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr

08002d0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002d0c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002d0e:	e003      	b.n	8002d18 <LoopCopyDataInit>

08002d10 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002d10:	4b0b      	ldr	r3, [pc, #44]	; (8002d40 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002d12:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002d14:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002d16:	3104      	adds	r1, #4

08002d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002d18:	480a      	ldr	r0, [pc, #40]	; (8002d44 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002d1a:	4b0b      	ldr	r3, [pc, #44]	; (8002d48 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002d1c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002d1e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002d20:	d3f6      	bcc.n	8002d10 <CopyDataInit>
  ldr r2, =_sbss
 8002d22:	4a0a      	ldr	r2, [pc, #40]	; (8002d4c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002d24:	e002      	b.n	8002d2c <LoopFillZerobss>

08002d26 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002d26:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002d28:	f842 3b04 	str.w	r3, [r2], #4

08002d2c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002d2c:	4b08      	ldr	r3, [pc, #32]	; (8002d50 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002d2e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002d30:	d3f9      	bcc.n	8002d26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d32:	f7ff ffe5 	bl	8002d00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d36:	f002 fe51 	bl	80059dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d3a:	f7fe fedb 	bl	8001af4 <main>
  bx lr
 8002d3e:	4770      	bx	lr
  ldr r3, =_sidata
 8002d40:	08007944 	.word	0x08007944
  ldr r0, =_sdata
 8002d44:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002d48:	20000294 	.word	0x20000294
  ldr r2, =_sbss
 8002d4c:	20000298 	.word	0x20000298
  ldr r3, = _ebss
 8002d50:	200004cc 	.word	0x200004cc

08002d54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d54:	e7fe      	b.n	8002d54 <ADC1_2_IRQHandler>
	...

08002d58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d5c:	4b08      	ldr	r3, [pc, #32]	; (8002d80 <HAL_Init+0x28>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a07      	ldr	r2, [pc, #28]	; (8002d80 <HAL_Init+0x28>)
 8002d62:	f043 0310 	orr.w	r3, r3, #16
 8002d66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d68:	2003      	movs	r0, #3
 8002d6a:	f000 fd93 	bl	8003894 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d6e:	2000      	movs	r0, #0
 8002d70:	f000 f808 	bl	8002d84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d74:	f7ff fe28 	bl	80029c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40022000 	.word	0x40022000

08002d84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d8c:	4b12      	ldr	r3, [pc, #72]	; (8002dd8 <HAL_InitTick+0x54>)
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	4b12      	ldr	r3, [pc, #72]	; (8002ddc <HAL_InitTick+0x58>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	4619      	mov	r1, r3
 8002d96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 fdab 	bl	80038fe <HAL_SYSTICK_Config>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e00e      	b.n	8002dd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b0f      	cmp	r3, #15
 8002db6:	d80a      	bhi.n	8002dce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002db8:	2200      	movs	r2, #0
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc0:	f000 fd73 	bl	80038aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dc4:	4a06      	ldr	r2, [pc, #24]	; (8002de0 <HAL_InitTick+0x5c>)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	e000      	b.n	8002dd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3708      	adds	r7, #8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	20000058 	.word	0x20000058
 8002ddc:	20000060 	.word	0x20000060
 8002de0:	2000005c 	.word	0x2000005c

08002de4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002de8:	4b05      	ldr	r3, [pc, #20]	; (8002e00 <HAL_IncTick+0x1c>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	461a      	mov	r2, r3
 8002dee:	4b05      	ldr	r3, [pc, #20]	; (8002e04 <HAL_IncTick+0x20>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4413      	add	r3, r2
 8002df4:	4a03      	ldr	r2, [pc, #12]	; (8002e04 <HAL_IncTick+0x20>)
 8002df6:	6013      	str	r3, [r2, #0]
}
 8002df8:	bf00      	nop
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bc80      	pop	{r7}
 8002dfe:	4770      	bx	lr
 8002e00:	20000060 	.word	0x20000060
 8002e04:	200004c4 	.word	0x200004c4

08002e08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e0c:	4b02      	ldr	r3, [pc, #8]	; (8002e18 <HAL_GetTick+0x10>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr
 8002e18:	200004c4 	.word	0x200004c4

08002e1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e24:	f7ff fff0 	bl	8002e08 <HAL_GetTick>
 8002e28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e34:	d005      	beq.n	8002e42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e36:	4b09      	ldr	r3, [pc, #36]	; (8002e5c <HAL_Delay+0x40>)
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	4413      	add	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e42:	bf00      	nop
 8002e44:	f7ff ffe0 	bl	8002e08 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d8f7      	bhi.n	8002e44 <HAL_Delay+0x28>
  {
  }
}
 8002e54:	bf00      	nop
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	20000060 	.word	0x20000060

08002e60 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002e74:	2300      	movs	r3, #0
 8002e76:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e0be      	b.n	8003000 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d109      	bne.n	8002ea4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7ff fdc4 	bl	8002a2c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 faed 	bl	8003484 <ADC_ConversionStop_Disable>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb2:	f003 0310 	and.w	r3, r3, #16
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f040 8099 	bne.w	8002fee <HAL_ADC_Init+0x18e>
 8002ebc:	7dfb      	ldrb	r3, [r7, #23]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f040 8095 	bne.w	8002fee <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ecc:	f023 0302 	bic.w	r3, r3, #2
 8002ed0:	f043 0202 	orr.w	r2, r3, #2
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ee0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	7b1b      	ldrb	r3, [r3, #12]
 8002ee6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ee8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002eea:	68ba      	ldr	r2, [r7, #8]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ef8:	d003      	beq.n	8002f02 <HAL_ADC_Init+0xa2>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d102      	bne.n	8002f08 <HAL_ADC_Init+0xa8>
 8002f02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f06:	e000      	b.n	8002f0a <HAL_ADC_Init+0xaa>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	7d1b      	ldrb	r3, [r3, #20]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d119      	bne.n	8002f4c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	7b1b      	ldrb	r3, [r3, #12]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d109      	bne.n	8002f34 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	3b01      	subs	r3, #1
 8002f26:	035a      	lsls	r2, r3, #13
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f30:	613b      	str	r3, [r7, #16]
 8002f32:	e00b      	b.n	8002f4c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f38:	f043 0220 	orr.w	r2, r3, #32
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f44:	f043 0201 	orr.w	r2, r3, #1
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	4b28      	ldr	r3, [pc, #160]	; (8003008 <HAL_ADC_Init+0x1a8>)
 8002f68:	4013      	ands	r3, r2
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	6812      	ldr	r2, [r2, #0]
 8002f6e:	68b9      	ldr	r1, [r7, #8]
 8002f70:	430b      	orrs	r3, r1
 8002f72:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f7c:	d003      	beq.n	8002f86 <HAL_ADC_Init+0x126>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d104      	bne.n	8002f90 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	051b      	lsls	r3, r3, #20
 8002f8e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f96:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689a      	ldr	r2, [r3, #8]
 8002faa:	4b18      	ldr	r3, [pc, #96]	; (800300c <HAL_ADC_Init+0x1ac>)
 8002fac:	4013      	ands	r3, r2
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d10b      	bne.n	8002fcc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbe:	f023 0303 	bic.w	r3, r3, #3
 8002fc2:	f043 0201 	orr.w	r2, r3, #1
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002fca:	e018      	b.n	8002ffe <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd0:	f023 0312 	bic.w	r3, r3, #18
 8002fd4:	f043 0210 	orr.w	r2, r3, #16
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe0:	f043 0201 	orr.w	r2, r3, #1
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002fec:	e007      	b.n	8002ffe <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff2:	f043 0210 	orr.w	r2, r3, #16
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3718      	adds	r7, #24
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	ffe1f7fd 	.word	0xffe1f7fd
 800300c:	ff1f0efe 	.word	0xff1f0efe

08003010 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800301c:	2300      	movs	r3, #0
 800301e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a64      	ldr	r2, [pc, #400]	; (80031b8 <HAL_ADC_Start_DMA+0x1a8>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d004      	beq.n	8003034 <HAL_ADC_Start_DMA+0x24>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a63      	ldr	r2, [pc, #396]	; (80031bc <HAL_ADC_Start_DMA+0x1ac>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d106      	bne.n	8003042 <HAL_ADC_Start_DMA+0x32>
 8003034:	4b60      	ldr	r3, [pc, #384]	; (80031b8 <HAL_ADC_Start_DMA+0x1a8>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800303c:	2b00      	cmp	r3, #0
 800303e:	f040 80b3 	bne.w	80031a8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003048:	2b01      	cmp	r3, #1
 800304a:	d101      	bne.n	8003050 <HAL_ADC_Start_DMA+0x40>
 800304c:	2302      	movs	r3, #2
 800304e:	e0ae      	b.n	80031ae <HAL_ADC_Start_DMA+0x19e>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f000 f9c1 	bl	80033e0 <ADC_Enable>
 800305e:	4603      	mov	r3, r0
 8003060:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003062:	7dfb      	ldrb	r3, [r7, #23]
 8003064:	2b00      	cmp	r3, #0
 8003066:	f040 809a 	bne.w	800319e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003072:	f023 0301 	bic.w	r3, r3, #1
 8003076:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a4e      	ldr	r2, [pc, #312]	; (80031bc <HAL_ADC_Start_DMA+0x1ac>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d105      	bne.n	8003094 <HAL_ADC_Start_DMA+0x84>
 8003088:	4b4b      	ldr	r3, [pc, #300]	; (80031b8 <HAL_ADC_Start_DMA+0x1a8>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d115      	bne.n	80030c0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003098:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d026      	beq.n	80030fc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030be:	e01d      	b.n	80030fc <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a39      	ldr	r2, [pc, #228]	; (80031b8 <HAL_ADC_Start_DMA+0x1a8>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d004      	beq.n	80030e0 <HAL_ADC_Start_DMA+0xd0>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a38      	ldr	r2, [pc, #224]	; (80031bc <HAL_ADC_Start_DMA+0x1ac>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d10d      	bne.n	80030fc <HAL_ADC_Start_DMA+0xec>
 80030e0:	4b35      	ldr	r3, [pc, #212]	; (80031b8 <HAL_ADC_Start_DMA+0x1a8>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d007      	beq.n	80030fc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003100:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d006      	beq.n	8003116 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310c:	f023 0206 	bic.w	r2, r3, #6
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	62da      	str	r2, [r3, #44]	; 0x2c
 8003114:	e002      	b.n	800311c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	4a25      	ldr	r2, [pc, #148]	; (80031c0 <HAL_ADC_Start_DMA+0x1b0>)
 800312a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	4a24      	ldr	r2, [pc, #144]	; (80031c4 <HAL_ADC_Start_DMA+0x1b4>)
 8003132:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	4a23      	ldr	r2, [pc, #140]	; (80031c8 <HAL_ADC_Start_DMA+0x1b8>)
 800313a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f06f 0202 	mvn.w	r2, #2
 8003144:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003154:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6a18      	ldr	r0, [r3, #32]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	334c      	adds	r3, #76	; 0x4c
 8003160:	4619      	mov	r1, r3
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f000 fc31 	bl	80039cc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003174:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003178:	d108      	bne.n	800318c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003188:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800318a:	e00f      	b.n	80031ac <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800319a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800319c:	e006      	b.n	80031ac <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80031a6:	e001      	b.n	80031ac <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80031ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3718      	adds	r7, #24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	40012400 	.word	0x40012400
 80031bc:	40012800 	.word	0x40012800
 80031c0:	080034f9 	.word	0x080034f9
 80031c4:	08003575 	.word	0x08003575
 80031c8:	08003591 	.word	0x08003591

080031cc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	bc80      	pop	{r7}
 80031dc:	4770      	bx	lr

080031de <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80031de:	b480      	push	{r7}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80031e6:	bf00      	nop
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr

080031f0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031fa:	2300      	movs	r3, #0
 80031fc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80031fe:	2300      	movs	r3, #0
 8003200:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003208:	2b01      	cmp	r3, #1
 800320a:	d101      	bne.n	8003210 <HAL_ADC_ConfigChannel+0x20>
 800320c:	2302      	movs	r3, #2
 800320e:	e0dc      	b.n	80033ca <HAL_ADC_ConfigChannel+0x1da>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2b06      	cmp	r3, #6
 800321e:	d81c      	bhi.n	800325a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	4613      	mov	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4413      	add	r3, r2
 8003230:	3b05      	subs	r3, #5
 8003232:	221f      	movs	r2, #31
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	43db      	mvns	r3, r3
 800323a:	4019      	ands	r1, r3
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	6818      	ldr	r0, [r3, #0]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	4613      	mov	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	3b05      	subs	r3, #5
 800324c:	fa00 f203 	lsl.w	r2, r0, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	430a      	orrs	r2, r1
 8003256:	635a      	str	r2, [r3, #52]	; 0x34
 8003258:	e03c      	b.n	80032d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b0c      	cmp	r3, #12
 8003260:	d81c      	bhi.n	800329c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	4613      	mov	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	3b23      	subs	r3, #35	; 0x23
 8003274:	221f      	movs	r2, #31
 8003276:	fa02 f303 	lsl.w	r3, r2, r3
 800327a:	43db      	mvns	r3, r3
 800327c:	4019      	ands	r1, r3
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	6818      	ldr	r0, [r3, #0]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	4613      	mov	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4413      	add	r3, r2
 800328c:	3b23      	subs	r3, #35	; 0x23
 800328e:	fa00 f203 	lsl.w	r2, r0, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	430a      	orrs	r2, r1
 8003298:	631a      	str	r2, [r3, #48]	; 0x30
 800329a:	e01b      	b.n	80032d4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	3b41      	subs	r3, #65	; 0x41
 80032ae:	221f      	movs	r2, #31
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	43db      	mvns	r3, r3
 80032b6:	4019      	ands	r1, r3
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	6818      	ldr	r0, [r3, #0]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	3b41      	subs	r3, #65	; 0x41
 80032c8:	fa00 f203 	lsl.w	r2, r0, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2b09      	cmp	r3, #9
 80032da:	d91c      	bls.n	8003316 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68d9      	ldr	r1, [r3, #12]
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	4613      	mov	r3, r2
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	4413      	add	r3, r2
 80032ec:	3b1e      	subs	r3, #30
 80032ee:	2207      	movs	r2, #7
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	43db      	mvns	r3, r3
 80032f6:	4019      	ands	r1, r3
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	6898      	ldr	r0, [r3, #8]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	4613      	mov	r3, r2
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	4413      	add	r3, r2
 8003306:	3b1e      	subs	r3, #30
 8003308:	fa00 f203 	lsl.w	r2, r0, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	430a      	orrs	r2, r1
 8003312:	60da      	str	r2, [r3, #12]
 8003314:	e019      	b.n	800334a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6919      	ldr	r1, [r3, #16]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	4613      	mov	r3, r2
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	4413      	add	r3, r2
 8003326:	2207      	movs	r2, #7
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	43db      	mvns	r3, r3
 800332e:	4019      	ands	r1, r3
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	6898      	ldr	r0, [r3, #8]
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	4613      	mov	r3, r2
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	4413      	add	r3, r2
 800333e:	fa00 f203 	lsl.w	r2, r0, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2b10      	cmp	r3, #16
 8003350:	d003      	beq.n	800335a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003356:	2b11      	cmp	r3, #17
 8003358:	d132      	bne.n	80033c0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a1d      	ldr	r2, [pc, #116]	; (80033d4 <HAL_ADC_ConfigChannel+0x1e4>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d125      	bne.n	80033b0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d126      	bne.n	80033c0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003380:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2b10      	cmp	r3, #16
 8003388:	d11a      	bne.n	80033c0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800338a:	4b13      	ldr	r3, [pc, #76]	; (80033d8 <HAL_ADC_ConfigChannel+0x1e8>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a13      	ldr	r2, [pc, #76]	; (80033dc <HAL_ADC_ConfigChannel+0x1ec>)
 8003390:	fba2 2303 	umull	r2, r3, r2, r3
 8003394:	0c9a      	lsrs	r2, r3, #18
 8003396:	4613      	mov	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033a0:	e002      	b.n	80033a8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	3b01      	subs	r3, #1
 80033a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1f9      	bne.n	80033a2 <HAL_ADC_ConfigChannel+0x1b2>
 80033ae:	e007      	b.n	80033c0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b4:	f043 0220 	orr.w	r2, r3, #32
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80033c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3714      	adds	r7, #20
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bc80      	pop	{r7}
 80033d2:	4770      	bx	lr
 80033d4:	40012400 	.word	0x40012400
 80033d8:	20000058 	.word	0x20000058
 80033dc:	431bde83 	.word	0x431bde83

080033e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80033ec:	2300      	movs	r3, #0
 80033ee:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d039      	beq.n	8003472 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f042 0201 	orr.w	r2, r2, #1
 800340c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800340e:	4b1b      	ldr	r3, [pc, #108]	; (800347c <ADC_Enable+0x9c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a1b      	ldr	r2, [pc, #108]	; (8003480 <ADC_Enable+0xa0>)
 8003414:	fba2 2303 	umull	r2, r3, r2, r3
 8003418:	0c9b      	lsrs	r3, r3, #18
 800341a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800341c:	e002      	b.n	8003424 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	3b01      	subs	r3, #1
 8003422:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1f9      	bne.n	800341e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800342a:	f7ff fced 	bl	8002e08 <HAL_GetTick>
 800342e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003430:	e018      	b.n	8003464 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003432:	f7ff fce9 	bl	8002e08 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d911      	bls.n	8003464 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003444:	f043 0210 	orr.w	r2, r3, #16
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003450:	f043 0201 	orr.w	r2, r3, #1
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e007      	b.n	8003474 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b01      	cmp	r3, #1
 8003470:	d1df      	bne.n	8003432 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	20000058 	.word	0x20000058
 8003480:	431bde83 	.word	0x431bde83

08003484 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b01      	cmp	r3, #1
 800349c:	d127      	bne.n	80034ee <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0201 	bic.w	r2, r2, #1
 80034ac:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80034ae:	f7ff fcab 	bl	8002e08 <HAL_GetTick>
 80034b2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80034b4:	e014      	b.n	80034e0 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80034b6:	f7ff fca7 	bl	8002e08 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d90d      	bls.n	80034e0 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c8:	f043 0210 	orr.w	r2, r3, #16
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d4:	f043 0201 	orr.w	r2, r3, #1
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e007      	b.n	80034f0 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d0e3      	beq.n	80034b6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800350e:	2b00      	cmp	r3, #0
 8003510:	d127      	bne.n	8003562 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003516:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003528:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800352c:	d115      	bne.n	800355a <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003532:	2b00      	cmp	r3, #0
 8003534:	d111      	bne.n	800355a <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003546:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d105      	bne.n	800355a <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003552:	f043 0201 	orr.w	r2, r3, #1
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f7ff fa26 	bl	80029ac <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003560:	e004      	b.n	800356c <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	4798      	blx	r3
}
 800356c:	bf00      	nop
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f7ff fe22 	bl	80031cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003588:	bf00      	nop
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ae:	f043 0204 	orr.w	r2, r3, #4
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f7ff fe11 	bl	80031de <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035bc:	bf00      	nop
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80035c4:	b590      	push	{r4, r7, lr}
 80035c6:	b087      	sub	sp, #28
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035cc:	2300      	movs	r3, #0
 80035ce:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80035d0:	2300      	movs	r3, #0
 80035d2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d101      	bne.n	80035e2 <HAL_ADCEx_Calibration_Start+0x1e>
 80035de:	2302      	movs	r3, #2
 80035e0:	e086      	b.n	80036f0 <HAL_ADCEx_Calibration_Start+0x12c>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7ff ff4a 	bl	8003484 <ADC_ConversionStop_Disable>
 80035f0:	4603      	mov	r3, r0
 80035f2:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80035f4:	7dfb      	ldrb	r3, [r7, #23]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d175      	bne.n	80036e6 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003602:	f023 0302 	bic.w	r3, r3, #2
 8003606:	f043 0202 	orr.w	r2, r3, #2
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800360e:	4b3a      	ldr	r3, [pc, #232]	; (80036f8 <HAL_ADCEx_Calibration_Start+0x134>)
 8003610:	681c      	ldr	r4, [r3, #0]
 8003612:	2002      	movs	r0, #2
 8003614:	f001 f9ce 	bl	80049b4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003618:	4603      	mov	r3, r0
 800361a:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800361e:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003620:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003622:	e002      	b.n	800362a <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	3b01      	subs	r3, #1
 8003628:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1f9      	bne.n	8003624 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f7ff fed5 	bl	80033e0 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f042 0208 	orr.w	r2, r2, #8
 8003644:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003646:	f7ff fbdf 	bl	8002e08 <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800364c:	e014      	b.n	8003678 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800364e:	f7ff fbdb 	bl	8002e08 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b0a      	cmp	r3, #10
 800365a:	d90d      	bls.n	8003678 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003660:	f023 0312 	bic.w	r3, r3, #18
 8003664:	f043 0210 	orr.w	r2, r3, #16
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e03b      	b.n	80036f0 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f003 0308 	and.w	r3, r3, #8
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1e3      	bne.n	800364e <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f042 0204 	orr.w	r2, r2, #4
 8003694:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003696:	f7ff fbb7 	bl	8002e08 <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800369c:	e014      	b.n	80036c8 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800369e:	f7ff fbb3 	bl	8002e08 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b0a      	cmp	r3, #10
 80036aa:	d90d      	bls.n	80036c8 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b0:	f023 0312 	bic.w	r3, r3, #18
 80036b4:	f043 0210 	orr.w	r2, r3, #16
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e013      	b.n	80036f0 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 0304 	and.w	r3, r3, #4
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1e3      	bne.n	800369e <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036da:	f023 0303 	bic.w	r3, r3, #3
 80036de:	f043 0201 	orr.w	r2, r3, #1
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80036ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	371c      	adds	r7, #28
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd90      	pop	{r4, r7, pc}
 80036f8:	20000058 	.word	0x20000058

080036fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f003 0307 	and.w	r3, r3, #7
 800370a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800370c:	4b0c      	ldr	r3, [pc, #48]	; (8003740 <__NVIC_SetPriorityGrouping+0x44>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003718:	4013      	ands	r3, r2
 800371a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003724:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800372c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800372e:	4a04      	ldr	r2, [pc, #16]	; (8003740 <__NVIC_SetPriorityGrouping+0x44>)
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	60d3      	str	r3, [r2, #12]
}
 8003734:	bf00      	nop
 8003736:	3714      	adds	r7, #20
 8003738:	46bd      	mov	sp, r7
 800373a:	bc80      	pop	{r7}
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	e000ed00 	.word	0xe000ed00

08003744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003748:	4b04      	ldr	r3, [pc, #16]	; (800375c <__NVIC_GetPriorityGrouping+0x18>)
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	0a1b      	lsrs	r3, r3, #8
 800374e:	f003 0307 	and.w	r3, r3, #7
}
 8003752:	4618      	mov	r0, r3
 8003754:	46bd      	mov	sp, r7
 8003756:	bc80      	pop	{r7}
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	e000ed00 	.word	0xe000ed00

08003760 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	4603      	mov	r3, r0
 8003768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800376a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376e:	2b00      	cmp	r3, #0
 8003770:	db0b      	blt.n	800378a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003772:	79fb      	ldrb	r3, [r7, #7]
 8003774:	f003 021f 	and.w	r2, r3, #31
 8003778:	4906      	ldr	r1, [pc, #24]	; (8003794 <__NVIC_EnableIRQ+0x34>)
 800377a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800377e:	095b      	lsrs	r3, r3, #5
 8003780:	2001      	movs	r0, #1
 8003782:	fa00 f202 	lsl.w	r2, r0, r2
 8003786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	bc80      	pop	{r7}
 8003792:	4770      	bx	lr
 8003794:	e000e100 	.word	0xe000e100

08003798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	4603      	mov	r3, r0
 80037a0:	6039      	str	r1, [r7, #0]
 80037a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	db0a      	blt.n	80037c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	b2da      	uxtb	r2, r3
 80037b0:	490c      	ldr	r1, [pc, #48]	; (80037e4 <__NVIC_SetPriority+0x4c>)
 80037b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b6:	0112      	lsls	r2, r2, #4
 80037b8:	b2d2      	uxtb	r2, r2
 80037ba:	440b      	add	r3, r1
 80037bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037c0:	e00a      	b.n	80037d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	4908      	ldr	r1, [pc, #32]	; (80037e8 <__NVIC_SetPriority+0x50>)
 80037c8:	79fb      	ldrb	r3, [r7, #7]
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	3b04      	subs	r3, #4
 80037d0:	0112      	lsls	r2, r2, #4
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	440b      	add	r3, r1
 80037d6:	761a      	strb	r2, [r3, #24]
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	bc80      	pop	{r7}
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	e000e100 	.word	0xe000e100
 80037e8:	e000ed00 	.word	0xe000ed00

080037ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b089      	sub	sp, #36	; 0x24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f003 0307 	and.w	r3, r3, #7
 80037fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	f1c3 0307 	rsb	r3, r3, #7
 8003806:	2b04      	cmp	r3, #4
 8003808:	bf28      	it	cs
 800380a:	2304      	movcs	r3, #4
 800380c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	3304      	adds	r3, #4
 8003812:	2b06      	cmp	r3, #6
 8003814:	d902      	bls.n	800381c <NVIC_EncodePriority+0x30>
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	3b03      	subs	r3, #3
 800381a:	e000      	b.n	800381e <NVIC_EncodePriority+0x32>
 800381c:	2300      	movs	r3, #0
 800381e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003820:	f04f 32ff 	mov.w	r2, #4294967295
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	fa02 f303 	lsl.w	r3, r2, r3
 800382a:	43da      	mvns	r2, r3
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	401a      	ands	r2, r3
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003834:	f04f 31ff 	mov.w	r1, #4294967295
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	fa01 f303 	lsl.w	r3, r1, r3
 800383e:	43d9      	mvns	r1, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003844:	4313      	orrs	r3, r2
         );
}
 8003846:	4618      	mov	r0, r3
 8003848:	3724      	adds	r7, #36	; 0x24
 800384a:	46bd      	mov	sp, r7
 800384c:	bc80      	pop	{r7}
 800384e:	4770      	bx	lr

08003850 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3b01      	subs	r3, #1
 800385c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003860:	d301      	bcc.n	8003866 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003862:	2301      	movs	r3, #1
 8003864:	e00f      	b.n	8003886 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003866:	4a0a      	ldr	r2, [pc, #40]	; (8003890 <SysTick_Config+0x40>)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3b01      	subs	r3, #1
 800386c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800386e:	210f      	movs	r1, #15
 8003870:	f04f 30ff 	mov.w	r0, #4294967295
 8003874:	f7ff ff90 	bl	8003798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003878:	4b05      	ldr	r3, [pc, #20]	; (8003890 <SysTick_Config+0x40>)
 800387a:	2200      	movs	r2, #0
 800387c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800387e:	4b04      	ldr	r3, [pc, #16]	; (8003890 <SysTick_Config+0x40>)
 8003880:	2207      	movs	r2, #7
 8003882:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	e000e010 	.word	0xe000e010

08003894 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f7ff ff2d 	bl	80036fc <__NVIC_SetPriorityGrouping>
}
 80038a2:	bf00      	nop
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b086      	sub	sp, #24
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	4603      	mov	r3, r0
 80038b2:	60b9      	str	r1, [r7, #8]
 80038b4:	607a      	str	r2, [r7, #4]
 80038b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038b8:	2300      	movs	r3, #0
 80038ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038bc:	f7ff ff42 	bl	8003744 <__NVIC_GetPriorityGrouping>
 80038c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	68b9      	ldr	r1, [r7, #8]
 80038c6:	6978      	ldr	r0, [r7, #20]
 80038c8:	f7ff ff90 	bl	80037ec <NVIC_EncodePriority>
 80038cc:	4602      	mov	r2, r0
 80038ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038d2:	4611      	mov	r1, r2
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7ff ff5f 	bl	8003798 <__NVIC_SetPriority>
}
 80038da:	bf00      	nop
 80038dc:	3718      	adds	r7, #24
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b082      	sub	sp, #8
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	4603      	mov	r3, r0
 80038ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7ff ff35 	bl	8003760 <__NVIC_EnableIRQ>
}
 80038f6:	bf00      	nop
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b082      	sub	sp, #8
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7ff ffa2 	bl	8003850 <SysTick_Config>
 800390c:	4603      	mov	r3, r0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
	...

08003918 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003920:	2300      	movs	r3, #0
 8003922:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e043      	b.n	80039b6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	461a      	mov	r2, r3
 8003934:	4b22      	ldr	r3, [pc, #136]	; (80039c0 <HAL_DMA_Init+0xa8>)
 8003936:	4413      	add	r3, r2
 8003938:	4a22      	ldr	r2, [pc, #136]	; (80039c4 <HAL_DMA_Init+0xac>)
 800393a:	fba2 2303 	umull	r2, r3, r2, r3
 800393e:	091b      	lsrs	r3, r3, #4
 8003940:	009a      	lsls	r2, r3, #2
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a1f      	ldr	r2, [pc, #124]	; (80039c8 <HAL_DMA_Init+0xb0>)
 800394a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2202      	movs	r2, #2
 8003950:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003962:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003966:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003970:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800397c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003988:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	69db      	ldr	r3, [r3, #28]
 800398e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	4313      	orrs	r3, r2
 8003994:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3714      	adds	r7, #20
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bc80      	pop	{r7}
 80039be:	4770      	bx	lr
 80039c0:	bffdfff8 	.word	0xbffdfff8
 80039c4:	cccccccd 	.word	0xcccccccd
 80039c8:	40020000 	.word	0x40020000

080039cc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
 80039d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039da:	2300      	movs	r3, #0
 80039dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d101      	bne.n	80039ec <HAL_DMA_Start_IT+0x20>
 80039e8:	2302      	movs	r3, #2
 80039ea:	e04a      	b.n	8003a82 <HAL_DMA_Start_IT+0xb6>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d13a      	bne.n	8003a74 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2202      	movs	r2, #2
 8003a02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 0201 	bic.w	r2, r2, #1
 8003a1a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	68b9      	ldr	r1, [r7, #8]
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f000 f938 	bl	8003c98 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d008      	beq.n	8003a42 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f042 020e 	orr.w	r2, r2, #14
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	e00f      	b.n	8003a62 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 0204 	bic.w	r2, r2, #4
 8003a50:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f042 020a 	orr.w	r2, r2, #10
 8003a60:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f042 0201 	orr.w	r2, r2, #1
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	e005      	b.n	8003a80 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3718      	adds	r7, #24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
	...

08003a8c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa8:	2204      	movs	r2, #4
 8003aaa:	409a      	lsls	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d04f      	beq.n	8003b54 <HAL_DMA_IRQHandler+0xc8>
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	f003 0304 	and.w	r3, r3, #4
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d04a      	beq.n	8003b54 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0320 	and.w	r3, r3, #32
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d107      	bne.n	8003adc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 0204 	bic.w	r2, r2, #4
 8003ada:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a66      	ldr	r2, [pc, #408]	; (8003c7c <HAL_DMA_IRQHandler+0x1f0>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d029      	beq.n	8003b3a <HAL_DMA_IRQHandler+0xae>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a65      	ldr	r2, [pc, #404]	; (8003c80 <HAL_DMA_IRQHandler+0x1f4>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d022      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xaa>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a63      	ldr	r2, [pc, #396]	; (8003c84 <HAL_DMA_IRQHandler+0x1f8>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d01a      	beq.n	8003b30 <HAL_DMA_IRQHandler+0xa4>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a62      	ldr	r2, [pc, #392]	; (8003c88 <HAL_DMA_IRQHandler+0x1fc>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d012      	beq.n	8003b2a <HAL_DMA_IRQHandler+0x9e>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a60      	ldr	r2, [pc, #384]	; (8003c8c <HAL_DMA_IRQHandler+0x200>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d00a      	beq.n	8003b24 <HAL_DMA_IRQHandler+0x98>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a5f      	ldr	r2, [pc, #380]	; (8003c90 <HAL_DMA_IRQHandler+0x204>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d102      	bne.n	8003b1e <HAL_DMA_IRQHandler+0x92>
 8003b18:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b1c:	e00e      	b.n	8003b3c <HAL_DMA_IRQHandler+0xb0>
 8003b1e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003b22:	e00b      	b.n	8003b3c <HAL_DMA_IRQHandler+0xb0>
 8003b24:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003b28:	e008      	b.n	8003b3c <HAL_DMA_IRQHandler+0xb0>
 8003b2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b2e:	e005      	b.n	8003b3c <HAL_DMA_IRQHandler+0xb0>
 8003b30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b34:	e002      	b.n	8003b3c <HAL_DMA_IRQHandler+0xb0>
 8003b36:	2340      	movs	r3, #64	; 0x40
 8003b38:	e000      	b.n	8003b3c <HAL_DMA_IRQHandler+0xb0>
 8003b3a:	2304      	movs	r3, #4
 8003b3c:	4a55      	ldr	r2, [pc, #340]	; (8003c94 <HAL_DMA_IRQHandler+0x208>)
 8003b3e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 8094 	beq.w	8003c72 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003b52:	e08e      	b.n	8003c72 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b58:	2202      	movs	r2, #2
 8003b5a:	409a      	lsls	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d056      	beq.n	8003c12 <HAL_DMA_IRQHandler+0x186>
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d051      	beq.n	8003c12 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0320 	and.w	r3, r3, #32
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10b      	bne.n	8003b94 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 020a 	bic.w	r2, r2, #10
 8003b8a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a38      	ldr	r2, [pc, #224]	; (8003c7c <HAL_DMA_IRQHandler+0x1f0>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d029      	beq.n	8003bf2 <HAL_DMA_IRQHandler+0x166>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a37      	ldr	r2, [pc, #220]	; (8003c80 <HAL_DMA_IRQHandler+0x1f4>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d022      	beq.n	8003bee <HAL_DMA_IRQHandler+0x162>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a35      	ldr	r2, [pc, #212]	; (8003c84 <HAL_DMA_IRQHandler+0x1f8>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d01a      	beq.n	8003be8 <HAL_DMA_IRQHandler+0x15c>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a34      	ldr	r2, [pc, #208]	; (8003c88 <HAL_DMA_IRQHandler+0x1fc>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d012      	beq.n	8003be2 <HAL_DMA_IRQHandler+0x156>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a32      	ldr	r2, [pc, #200]	; (8003c8c <HAL_DMA_IRQHandler+0x200>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d00a      	beq.n	8003bdc <HAL_DMA_IRQHandler+0x150>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a31      	ldr	r2, [pc, #196]	; (8003c90 <HAL_DMA_IRQHandler+0x204>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d102      	bne.n	8003bd6 <HAL_DMA_IRQHandler+0x14a>
 8003bd0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003bd4:	e00e      	b.n	8003bf4 <HAL_DMA_IRQHandler+0x168>
 8003bd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bda:	e00b      	b.n	8003bf4 <HAL_DMA_IRQHandler+0x168>
 8003bdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003be0:	e008      	b.n	8003bf4 <HAL_DMA_IRQHandler+0x168>
 8003be2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003be6:	e005      	b.n	8003bf4 <HAL_DMA_IRQHandler+0x168>
 8003be8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bec:	e002      	b.n	8003bf4 <HAL_DMA_IRQHandler+0x168>
 8003bee:	2320      	movs	r3, #32
 8003bf0:	e000      	b.n	8003bf4 <HAL_DMA_IRQHandler+0x168>
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	4a27      	ldr	r2, [pc, #156]	; (8003c94 <HAL_DMA_IRQHandler+0x208>)
 8003bf6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d034      	beq.n	8003c72 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003c10:	e02f      	b.n	8003c72 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	2208      	movs	r2, #8
 8003c18:	409a      	lsls	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d028      	beq.n	8003c74 <HAL_DMA_IRQHandler+0x1e8>
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	f003 0308 	and.w	r3, r3, #8
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d023      	beq.n	8003c74 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 020e 	bic.w	r2, r2, #14
 8003c3a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c44:	2101      	movs	r1, #1
 8003c46:	fa01 f202 	lsl.w	r2, r1, r2
 8003c4a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d004      	beq.n	8003c74 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	4798      	blx	r3
    }
  }
  return;
 8003c72:	bf00      	nop
 8003c74:	bf00      	nop
}
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40020008 	.word	0x40020008
 8003c80:	4002001c 	.word	0x4002001c
 8003c84:	40020030 	.word	0x40020030
 8003c88:	40020044 	.word	0x40020044
 8003c8c:	40020058 	.word	0x40020058
 8003c90:	4002006c 	.word	0x4002006c
 8003c94:	40020000 	.word	0x40020000

08003c98 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
 8003ca4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cae:	2101      	movs	r1, #1
 8003cb0:	fa01 f202 	lsl.w	r2, r1, r2
 8003cb4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	683a      	ldr	r2, [r7, #0]
 8003cbc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2b10      	cmp	r3, #16
 8003cc4:	d108      	bne.n	8003cd8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68ba      	ldr	r2, [r7, #8]
 8003cd4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003cd6:	e007      	b.n	8003ce8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	60da      	str	r2, [r3, #12]
}
 8003ce8:	bf00      	nop
 8003cea:	3714      	adds	r7, #20
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bc80      	pop	{r7}
 8003cf0:	4770      	bx	lr
	...

08003cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b08b      	sub	sp, #44	; 0x2c
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003d02:	2300      	movs	r3, #0
 8003d04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d06:	e127      	b.n	8003f58 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003d08:	2201      	movs	r2, #1
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	69fa      	ldr	r2, [r7, #28]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	f040 8116 	bne.w	8003f52 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	2b12      	cmp	r3, #18
 8003d2c:	d034      	beq.n	8003d98 <HAL_GPIO_Init+0xa4>
 8003d2e:	2b12      	cmp	r3, #18
 8003d30:	d80d      	bhi.n	8003d4e <HAL_GPIO_Init+0x5a>
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d02b      	beq.n	8003d8e <HAL_GPIO_Init+0x9a>
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d804      	bhi.n	8003d44 <HAL_GPIO_Init+0x50>
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d031      	beq.n	8003da2 <HAL_GPIO_Init+0xae>
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d01c      	beq.n	8003d7c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003d42:	e048      	b.n	8003dd6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003d44:	2b03      	cmp	r3, #3
 8003d46:	d043      	beq.n	8003dd0 <HAL_GPIO_Init+0xdc>
 8003d48:	2b11      	cmp	r3, #17
 8003d4a:	d01b      	beq.n	8003d84 <HAL_GPIO_Init+0x90>
          break;
 8003d4c:	e043      	b.n	8003dd6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003d4e:	4a89      	ldr	r2, [pc, #548]	; (8003f74 <HAL_GPIO_Init+0x280>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d026      	beq.n	8003da2 <HAL_GPIO_Init+0xae>
 8003d54:	4a87      	ldr	r2, [pc, #540]	; (8003f74 <HAL_GPIO_Init+0x280>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d806      	bhi.n	8003d68 <HAL_GPIO_Init+0x74>
 8003d5a:	4a87      	ldr	r2, [pc, #540]	; (8003f78 <HAL_GPIO_Init+0x284>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d020      	beq.n	8003da2 <HAL_GPIO_Init+0xae>
 8003d60:	4a86      	ldr	r2, [pc, #536]	; (8003f7c <HAL_GPIO_Init+0x288>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d01d      	beq.n	8003da2 <HAL_GPIO_Init+0xae>
          break;
 8003d66:	e036      	b.n	8003dd6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003d68:	4a85      	ldr	r2, [pc, #532]	; (8003f80 <HAL_GPIO_Init+0x28c>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d019      	beq.n	8003da2 <HAL_GPIO_Init+0xae>
 8003d6e:	4a85      	ldr	r2, [pc, #532]	; (8003f84 <HAL_GPIO_Init+0x290>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d016      	beq.n	8003da2 <HAL_GPIO_Init+0xae>
 8003d74:	4a84      	ldr	r2, [pc, #528]	; (8003f88 <HAL_GPIO_Init+0x294>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d013      	beq.n	8003da2 <HAL_GPIO_Init+0xae>
          break;
 8003d7a:	e02c      	b.n	8003dd6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	623b      	str	r3, [r7, #32]
          break;
 8003d82:	e028      	b.n	8003dd6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	3304      	adds	r3, #4
 8003d8a:	623b      	str	r3, [r7, #32]
          break;
 8003d8c:	e023      	b.n	8003dd6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	3308      	adds	r3, #8
 8003d94:	623b      	str	r3, [r7, #32]
          break;
 8003d96:	e01e      	b.n	8003dd6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	330c      	adds	r3, #12
 8003d9e:	623b      	str	r3, [r7, #32]
          break;
 8003da0:	e019      	b.n	8003dd6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d102      	bne.n	8003db0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003daa:	2304      	movs	r3, #4
 8003dac:	623b      	str	r3, [r7, #32]
          break;
 8003dae:	e012      	b.n	8003dd6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d105      	bne.n	8003dc4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003db8:	2308      	movs	r3, #8
 8003dba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	69fa      	ldr	r2, [r7, #28]
 8003dc0:	611a      	str	r2, [r3, #16]
          break;
 8003dc2:	e008      	b.n	8003dd6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003dc4:	2308      	movs	r3, #8
 8003dc6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	69fa      	ldr	r2, [r7, #28]
 8003dcc:	615a      	str	r2, [r3, #20]
          break;
 8003dce:	e002      	b.n	8003dd6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	623b      	str	r3, [r7, #32]
          break;
 8003dd4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	2bff      	cmp	r3, #255	; 0xff
 8003dda:	d801      	bhi.n	8003de0 <HAL_GPIO_Init+0xec>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	e001      	b.n	8003de4 <HAL_GPIO_Init+0xf0>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	3304      	adds	r3, #4
 8003de4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	2bff      	cmp	r3, #255	; 0xff
 8003dea:	d802      	bhi.n	8003df2 <HAL_GPIO_Init+0xfe>
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	e002      	b.n	8003df8 <HAL_GPIO_Init+0x104>
 8003df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df4:	3b08      	subs	r3, #8
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	210f      	movs	r1, #15
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	fa01 f303 	lsl.w	r3, r1, r3
 8003e06:	43db      	mvns	r3, r3
 8003e08:	401a      	ands	r2, r3
 8003e0a:	6a39      	ldr	r1, [r7, #32]
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e12:	431a      	orrs	r2, r3
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 8096 	beq.w	8003f52 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003e26:	4b59      	ldr	r3, [pc, #356]	; (8003f8c <HAL_GPIO_Init+0x298>)
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	4a58      	ldr	r2, [pc, #352]	; (8003f8c <HAL_GPIO_Init+0x298>)
 8003e2c:	f043 0301 	orr.w	r3, r3, #1
 8003e30:	6193      	str	r3, [r2, #24]
 8003e32:	4b56      	ldr	r3, [pc, #344]	; (8003f8c <HAL_GPIO_Init+0x298>)
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	60bb      	str	r3, [r7, #8]
 8003e3c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003e3e:	4a54      	ldr	r2, [pc, #336]	; (8003f90 <HAL_GPIO_Init+0x29c>)
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	089b      	lsrs	r3, r3, #2
 8003e44:	3302      	adds	r3, #2
 8003e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e4a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	f003 0303 	and.w	r3, r3, #3
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	220f      	movs	r2, #15
 8003e56:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5a:	43db      	mvns	r3, r3
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a4b      	ldr	r2, [pc, #300]	; (8003f94 <HAL_GPIO_Init+0x2a0>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d013      	beq.n	8003e92 <HAL_GPIO_Init+0x19e>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a4a      	ldr	r2, [pc, #296]	; (8003f98 <HAL_GPIO_Init+0x2a4>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d00d      	beq.n	8003e8e <HAL_GPIO_Init+0x19a>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a49      	ldr	r2, [pc, #292]	; (8003f9c <HAL_GPIO_Init+0x2a8>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d007      	beq.n	8003e8a <HAL_GPIO_Init+0x196>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a48      	ldr	r2, [pc, #288]	; (8003fa0 <HAL_GPIO_Init+0x2ac>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d101      	bne.n	8003e86 <HAL_GPIO_Init+0x192>
 8003e82:	2303      	movs	r3, #3
 8003e84:	e006      	b.n	8003e94 <HAL_GPIO_Init+0x1a0>
 8003e86:	2304      	movs	r3, #4
 8003e88:	e004      	b.n	8003e94 <HAL_GPIO_Init+0x1a0>
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	e002      	b.n	8003e94 <HAL_GPIO_Init+0x1a0>
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e000      	b.n	8003e94 <HAL_GPIO_Init+0x1a0>
 8003e92:	2300      	movs	r3, #0
 8003e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e96:	f002 0203 	and.w	r2, r2, #3
 8003e9a:	0092      	lsls	r2, r2, #2
 8003e9c:	4093      	lsls	r3, r2
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003ea4:	493a      	ldr	r1, [pc, #232]	; (8003f90 <HAL_GPIO_Init+0x29c>)
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea8:	089b      	lsrs	r3, r3, #2
 8003eaa:	3302      	adds	r3, #2
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d006      	beq.n	8003ecc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003ebe:	4b39      	ldr	r3, [pc, #228]	; (8003fa4 <HAL_GPIO_Init+0x2b0>)
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	4938      	ldr	r1, [pc, #224]	; (8003fa4 <HAL_GPIO_Init+0x2b0>)
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	600b      	str	r3, [r1, #0]
 8003eca:	e006      	b.n	8003eda <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003ecc:	4b35      	ldr	r3, [pc, #212]	; (8003fa4 <HAL_GPIO_Init+0x2b0>)
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	43db      	mvns	r3, r3
 8003ed4:	4933      	ldr	r1, [pc, #204]	; (8003fa4 <HAL_GPIO_Init+0x2b0>)
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d006      	beq.n	8003ef4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003ee6:	4b2f      	ldr	r3, [pc, #188]	; (8003fa4 <HAL_GPIO_Init+0x2b0>)
 8003ee8:	685a      	ldr	r2, [r3, #4]
 8003eea:	492e      	ldr	r1, [pc, #184]	; (8003fa4 <HAL_GPIO_Init+0x2b0>)
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	604b      	str	r3, [r1, #4]
 8003ef2:	e006      	b.n	8003f02 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003ef4:	4b2b      	ldr	r3, [pc, #172]	; (8003fa4 <HAL_GPIO_Init+0x2b0>)
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	43db      	mvns	r3, r3
 8003efc:	4929      	ldr	r1, [pc, #164]	; (8003fa4 <HAL_GPIO_Init+0x2b0>)
 8003efe:	4013      	ands	r3, r2
 8003f00:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d006      	beq.n	8003f1c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003f0e:	4b25      	ldr	r3, [pc, #148]	; (8003fa4 <HAL_GPIO_Init+0x2b0>)
 8003f10:	689a      	ldr	r2, [r3, #8]
 8003f12:	4924      	ldr	r1, [pc, #144]	; (8003fa4 <HAL_GPIO_Init+0x2b0>)
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	608b      	str	r3, [r1, #8]
 8003f1a:	e006      	b.n	8003f2a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003f1c:	4b21      	ldr	r3, [pc, #132]	; (8003fa4 <HAL_GPIO_Init+0x2b0>)
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	43db      	mvns	r3, r3
 8003f24:	491f      	ldr	r1, [pc, #124]	; (8003fa4 <HAL_GPIO_Init+0x2b0>)
 8003f26:	4013      	ands	r3, r2
 8003f28:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d006      	beq.n	8003f44 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003f36:	4b1b      	ldr	r3, [pc, #108]	; (8003fa4 <HAL_GPIO_Init+0x2b0>)
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	491a      	ldr	r1, [pc, #104]	; (8003fa4 <HAL_GPIO_Init+0x2b0>)
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	60cb      	str	r3, [r1, #12]
 8003f42:	e006      	b.n	8003f52 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003f44:	4b17      	ldr	r3, [pc, #92]	; (8003fa4 <HAL_GPIO_Init+0x2b0>)
 8003f46:	68da      	ldr	r2, [r3, #12]
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	43db      	mvns	r3, r3
 8003f4c:	4915      	ldr	r1, [pc, #84]	; (8003fa4 <HAL_GPIO_Init+0x2b0>)
 8003f4e:	4013      	ands	r3, r2
 8003f50:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	3301      	adds	r3, #1
 8003f56:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f47f aed0 	bne.w	8003d08 <HAL_GPIO_Init+0x14>
  }
}
 8003f68:	bf00      	nop
 8003f6a:	372c      	adds	r7, #44	; 0x2c
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bc80      	pop	{r7}
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	10210000 	.word	0x10210000
 8003f78:	10110000 	.word	0x10110000
 8003f7c:	10120000 	.word	0x10120000
 8003f80:	10310000 	.word	0x10310000
 8003f84:	10320000 	.word	0x10320000
 8003f88:	10220000 	.word	0x10220000
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	40010000 	.word	0x40010000
 8003f94:	40010800 	.word	0x40010800
 8003f98:	40010c00 	.word	0x40010c00
 8003f9c:	40011000 	.word	0x40011000
 8003fa0:	40011400 	.word	0x40011400
 8003fa4:	40010400 	.word	0x40010400

08003fa8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	887b      	ldrh	r3, [r7, #2]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d002      	beq.n	8003fc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	73fb      	strb	r3, [r7, #15]
 8003fc4:	e001      	b.n	8003fca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3714      	adds	r7, #20
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bc80      	pop	{r7}
 8003fd4:	4770      	bx	lr

08003fd6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b083      	sub	sp, #12
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
 8003fde:	460b      	mov	r3, r1
 8003fe0:	807b      	strh	r3, [r7, #2]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fe6:	787b      	ldrb	r3, [r7, #1]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d003      	beq.n	8003ff4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fec:	887a      	ldrh	r2, [r7, #2]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003ff2:	e003      	b.n	8003ffc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ff4:	887b      	ldrh	r3, [r7, #2]
 8003ff6:	041a      	lsls	r2, r3, #16
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	611a      	str	r2, [r3, #16]
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	bc80      	pop	{r7}
 8004004:	4770      	bx	lr

08004006 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004006:	b480      	push	{r7}
 8004008:	b085      	sub	sp, #20
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
 800400e:	460b      	mov	r3, r1
 8004010:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004018:	887a      	ldrh	r2, [r7, #2]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	4013      	ands	r3, r2
 800401e:	041a      	lsls	r2, r3, #16
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	43d9      	mvns	r1, r3
 8004024:	887b      	ldrh	r3, [r7, #2]
 8004026:	400b      	ands	r3, r1
 8004028:	431a      	orrs	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	611a      	str	r2, [r3, #16]
}
 800402e:	bf00      	nop
 8004030:	3714      	adds	r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	bc80      	pop	{r7}
 8004036:	4770      	bx	lr

08004038 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e26c      	b.n	8004524 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b00      	cmp	r3, #0
 8004054:	f000 8087 	beq.w	8004166 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004058:	4b92      	ldr	r3, [pc, #584]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f003 030c 	and.w	r3, r3, #12
 8004060:	2b04      	cmp	r3, #4
 8004062:	d00c      	beq.n	800407e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004064:	4b8f      	ldr	r3, [pc, #572]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f003 030c 	and.w	r3, r3, #12
 800406c:	2b08      	cmp	r3, #8
 800406e:	d112      	bne.n	8004096 <HAL_RCC_OscConfig+0x5e>
 8004070:	4b8c      	ldr	r3, [pc, #560]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800407c:	d10b      	bne.n	8004096 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800407e:	4b89      	ldr	r3, [pc, #548]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d06c      	beq.n	8004164 <HAL_RCC_OscConfig+0x12c>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d168      	bne.n	8004164 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e246      	b.n	8004524 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800409e:	d106      	bne.n	80040ae <HAL_RCC_OscConfig+0x76>
 80040a0:	4b80      	ldr	r3, [pc, #512]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a7f      	ldr	r2, [pc, #508]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80040a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040aa:	6013      	str	r3, [r2, #0]
 80040ac:	e02e      	b.n	800410c <HAL_RCC_OscConfig+0xd4>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10c      	bne.n	80040d0 <HAL_RCC_OscConfig+0x98>
 80040b6:	4b7b      	ldr	r3, [pc, #492]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a7a      	ldr	r2, [pc, #488]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80040bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	4b78      	ldr	r3, [pc, #480]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a77      	ldr	r2, [pc, #476]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80040c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040cc:	6013      	str	r3, [r2, #0]
 80040ce:	e01d      	b.n	800410c <HAL_RCC_OscConfig+0xd4>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040d8:	d10c      	bne.n	80040f4 <HAL_RCC_OscConfig+0xbc>
 80040da:	4b72      	ldr	r3, [pc, #456]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a71      	ldr	r2, [pc, #452]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80040e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040e4:	6013      	str	r3, [r2, #0]
 80040e6:	4b6f      	ldr	r3, [pc, #444]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a6e      	ldr	r2, [pc, #440]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80040ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f0:	6013      	str	r3, [r2, #0]
 80040f2:	e00b      	b.n	800410c <HAL_RCC_OscConfig+0xd4>
 80040f4:	4b6b      	ldr	r3, [pc, #428]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a6a      	ldr	r2, [pc, #424]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80040fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040fe:	6013      	str	r3, [r2, #0]
 8004100:	4b68      	ldr	r3, [pc, #416]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a67      	ldr	r2, [pc, #412]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 8004106:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800410a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d013      	beq.n	800413c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004114:	f7fe fe78 	bl	8002e08 <HAL_GetTick>
 8004118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800411a:	e008      	b.n	800412e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800411c:	f7fe fe74 	bl	8002e08 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b64      	cmp	r3, #100	; 0x64
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e1fa      	b.n	8004524 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800412e:	4b5d      	ldr	r3, [pc, #372]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d0f0      	beq.n	800411c <HAL_RCC_OscConfig+0xe4>
 800413a:	e014      	b.n	8004166 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800413c:	f7fe fe64 	bl	8002e08 <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004144:	f7fe fe60 	bl	8002e08 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b64      	cmp	r3, #100	; 0x64
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e1e6      	b.n	8004524 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004156:	4b53      	ldr	r3, [pc, #332]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1f0      	bne.n	8004144 <HAL_RCC_OscConfig+0x10c>
 8004162:	e000      	b.n	8004166 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d063      	beq.n	800423a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004172:	4b4c      	ldr	r3, [pc, #304]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f003 030c 	and.w	r3, r3, #12
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00b      	beq.n	8004196 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800417e:	4b49      	ldr	r3, [pc, #292]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f003 030c 	and.w	r3, r3, #12
 8004186:	2b08      	cmp	r3, #8
 8004188:	d11c      	bne.n	80041c4 <HAL_RCC_OscConfig+0x18c>
 800418a:	4b46      	ldr	r3, [pc, #280]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d116      	bne.n	80041c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004196:	4b43      	ldr	r3, [pc, #268]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d005      	beq.n	80041ae <HAL_RCC_OscConfig+0x176>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d001      	beq.n	80041ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e1ba      	b.n	8004524 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ae:	4b3d      	ldr	r3, [pc, #244]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	4939      	ldr	r1, [pc, #228]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041c2:	e03a      	b.n	800423a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d020      	beq.n	800420e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041cc:	4b36      	ldr	r3, [pc, #216]	; (80042a8 <HAL_RCC_OscConfig+0x270>)
 80041ce:	2201      	movs	r2, #1
 80041d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d2:	f7fe fe19 	bl	8002e08 <HAL_GetTick>
 80041d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041d8:	e008      	b.n	80041ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041da:	f7fe fe15 	bl	8002e08 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d901      	bls.n	80041ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e19b      	b.n	8004524 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ec:	4b2d      	ldr	r3, [pc, #180]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d0f0      	beq.n	80041da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f8:	4b2a      	ldr	r3, [pc, #168]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	00db      	lsls	r3, r3, #3
 8004206:	4927      	ldr	r1, [pc, #156]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 8004208:	4313      	orrs	r3, r2
 800420a:	600b      	str	r3, [r1, #0]
 800420c:	e015      	b.n	800423a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800420e:	4b26      	ldr	r3, [pc, #152]	; (80042a8 <HAL_RCC_OscConfig+0x270>)
 8004210:	2200      	movs	r2, #0
 8004212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004214:	f7fe fdf8 	bl	8002e08 <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800421c:	f7fe fdf4 	bl	8002e08 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e17a      	b.n	8004524 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800422e:	4b1d      	ldr	r3, [pc, #116]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1f0      	bne.n	800421c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0308 	and.w	r3, r3, #8
 8004242:	2b00      	cmp	r3, #0
 8004244:	d03a      	beq.n	80042bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d019      	beq.n	8004282 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800424e:	4b17      	ldr	r3, [pc, #92]	; (80042ac <HAL_RCC_OscConfig+0x274>)
 8004250:	2201      	movs	r2, #1
 8004252:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004254:	f7fe fdd8 	bl	8002e08 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800425c:	f7fe fdd4 	bl	8002e08 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e15a      	b.n	8004524 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800426e:	4b0d      	ldr	r3, [pc, #52]	; (80042a4 <HAL_RCC_OscConfig+0x26c>)
 8004270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d0f0      	beq.n	800425c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800427a:	2001      	movs	r0, #1
 800427c:	f000 fac6 	bl	800480c <RCC_Delay>
 8004280:	e01c      	b.n	80042bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004282:	4b0a      	ldr	r3, [pc, #40]	; (80042ac <HAL_RCC_OscConfig+0x274>)
 8004284:	2200      	movs	r2, #0
 8004286:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004288:	f7fe fdbe 	bl	8002e08 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800428e:	e00f      	b.n	80042b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004290:	f7fe fdba 	bl	8002e08 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d908      	bls.n	80042b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e140      	b.n	8004524 <HAL_RCC_OscConfig+0x4ec>
 80042a2:	bf00      	nop
 80042a4:	40021000 	.word	0x40021000
 80042a8:	42420000 	.word	0x42420000
 80042ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042b0:	4b9e      	ldr	r3, [pc, #632]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1e9      	bne.n	8004290 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f000 80a6 	beq.w	8004416 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042ca:	2300      	movs	r3, #0
 80042cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042ce:	4b97      	ldr	r3, [pc, #604]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 80042d0:	69db      	ldr	r3, [r3, #28]
 80042d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10d      	bne.n	80042f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042da:	4b94      	ldr	r3, [pc, #592]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	4a93      	ldr	r2, [pc, #588]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 80042e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042e4:	61d3      	str	r3, [r2, #28]
 80042e6:	4b91      	ldr	r3, [pc, #580]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ee:	60bb      	str	r3, [r7, #8]
 80042f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042f2:	2301      	movs	r3, #1
 80042f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042f6:	4b8e      	ldr	r3, [pc, #568]	; (8004530 <HAL_RCC_OscConfig+0x4f8>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d118      	bne.n	8004334 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004302:	4b8b      	ldr	r3, [pc, #556]	; (8004530 <HAL_RCC_OscConfig+0x4f8>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a8a      	ldr	r2, [pc, #552]	; (8004530 <HAL_RCC_OscConfig+0x4f8>)
 8004308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800430c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800430e:	f7fe fd7b 	bl	8002e08 <HAL_GetTick>
 8004312:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004314:	e008      	b.n	8004328 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004316:	f7fe fd77 	bl	8002e08 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b64      	cmp	r3, #100	; 0x64
 8004322:	d901      	bls.n	8004328 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e0fd      	b.n	8004524 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004328:	4b81      	ldr	r3, [pc, #516]	; (8004530 <HAL_RCC_OscConfig+0x4f8>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004330:	2b00      	cmp	r3, #0
 8004332:	d0f0      	beq.n	8004316 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d106      	bne.n	800434a <HAL_RCC_OscConfig+0x312>
 800433c:	4b7b      	ldr	r3, [pc, #492]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	4a7a      	ldr	r2, [pc, #488]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 8004342:	f043 0301 	orr.w	r3, r3, #1
 8004346:	6213      	str	r3, [r2, #32]
 8004348:	e02d      	b.n	80043a6 <HAL_RCC_OscConfig+0x36e>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10c      	bne.n	800436c <HAL_RCC_OscConfig+0x334>
 8004352:	4b76      	ldr	r3, [pc, #472]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 8004354:	6a1b      	ldr	r3, [r3, #32]
 8004356:	4a75      	ldr	r2, [pc, #468]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 8004358:	f023 0301 	bic.w	r3, r3, #1
 800435c:	6213      	str	r3, [r2, #32]
 800435e:	4b73      	ldr	r3, [pc, #460]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	4a72      	ldr	r2, [pc, #456]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 8004364:	f023 0304 	bic.w	r3, r3, #4
 8004368:	6213      	str	r3, [r2, #32]
 800436a:	e01c      	b.n	80043a6 <HAL_RCC_OscConfig+0x36e>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	2b05      	cmp	r3, #5
 8004372:	d10c      	bne.n	800438e <HAL_RCC_OscConfig+0x356>
 8004374:	4b6d      	ldr	r3, [pc, #436]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	4a6c      	ldr	r2, [pc, #432]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 800437a:	f043 0304 	orr.w	r3, r3, #4
 800437e:	6213      	str	r3, [r2, #32]
 8004380:	4b6a      	ldr	r3, [pc, #424]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	4a69      	ldr	r2, [pc, #420]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 8004386:	f043 0301 	orr.w	r3, r3, #1
 800438a:	6213      	str	r3, [r2, #32]
 800438c:	e00b      	b.n	80043a6 <HAL_RCC_OscConfig+0x36e>
 800438e:	4b67      	ldr	r3, [pc, #412]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	4a66      	ldr	r2, [pc, #408]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 8004394:	f023 0301 	bic.w	r3, r3, #1
 8004398:	6213      	str	r3, [r2, #32]
 800439a:	4b64      	ldr	r3, [pc, #400]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	4a63      	ldr	r2, [pc, #396]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 80043a0:	f023 0304 	bic.w	r3, r3, #4
 80043a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d015      	beq.n	80043da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ae:	f7fe fd2b 	bl	8002e08 <HAL_GetTick>
 80043b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b4:	e00a      	b.n	80043cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043b6:	f7fe fd27 	bl	8002e08 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d901      	bls.n	80043cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e0ab      	b.n	8004524 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043cc:	4b57      	ldr	r3, [pc, #348]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 80043ce:	6a1b      	ldr	r3, [r3, #32]
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d0ee      	beq.n	80043b6 <HAL_RCC_OscConfig+0x37e>
 80043d8:	e014      	b.n	8004404 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043da:	f7fe fd15 	bl	8002e08 <HAL_GetTick>
 80043de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043e0:	e00a      	b.n	80043f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043e2:	f7fe fd11 	bl	8002e08 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e095      	b.n	8004524 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043f8:	4b4c      	ldr	r3, [pc, #304]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	f003 0302 	and.w	r3, r3, #2
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1ee      	bne.n	80043e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004404:	7dfb      	ldrb	r3, [r7, #23]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d105      	bne.n	8004416 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800440a:	4b48      	ldr	r3, [pc, #288]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	4a47      	ldr	r2, [pc, #284]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 8004410:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004414:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 8081 	beq.w	8004522 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004420:	4b42      	ldr	r3, [pc, #264]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f003 030c 	and.w	r3, r3, #12
 8004428:	2b08      	cmp	r3, #8
 800442a:	d061      	beq.n	80044f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	69db      	ldr	r3, [r3, #28]
 8004430:	2b02      	cmp	r3, #2
 8004432:	d146      	bne.n	80044c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004434:	4b3f      	ldr	r3, [pc, #252]	; (8004534 <HAL_RCC_OscConfig+0x4fc>)
 8004436:	2200      	movs	r2, #0
 8004438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800443a:	f7fe fce5 	bl	8002e08 <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004442:	f7fe fce1 	bl	8002e08 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e067      	b.n	8004524 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004454:	4b35      	ldr	r3, [pc, #212]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1f0      	bne.n	8004442 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004468:	d108      	bne.n	800447c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800446a:	4b30      	ldr	r3, [pc, #192]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	492d      	ldr	r1, [pc, #180]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 8004478:	4313      	orrs	r3, r2
 800447a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800447c:	4b2b      	ldr	r3, [pc, #172]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a19      	ldr	r1, [r3, #32]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448c:	430b      	orrs	r3, r1
 800448e:	4927      	ldr	r1, [pc, #156]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 8004490:	4313      	orrs	r3, r2
 8004492:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004494:	4b27      	ldr	r3, [pc, #156]	; (8004534 <HAL_RCC_OscConfig+0x4fc>)
 8004496:	2201      	movs	r2, #1
 8004498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800449a:	f7fe fcb5 	bl	8002e08 <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044a0:	e008      	b.n	80044b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044a2:	f7fe fcb1 	bl	8002e08 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e037      	b.n	8004524 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044b4:	4b1d      	ldr	r3, [pc, #116]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0f0      	beq.n	80044a2 <HAL_RCC_OscConfig+0x46a>
 80044c0:	e02f      	b.n	8004522 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044c2:	4b1c      	ldr	r3, [pc, #112]	; (8004534 <HAL_RCC_OscConfig+0x4fc>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c8:	f7fe fc9e 	bl	8002e08 <HAL_GetTick>
 80044cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044ce:	e008      	b.n	80044e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044d0:	f7fe fc9a 	bl	8002e08 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e020      	b.n	8004524 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044e2:	4b12      	ldr	r3, [pc, #72]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1f0      	bne.n	80044d0 <HAL_RCC_OscConfig+0x498>
 80044ee:	e018      	b.n	8004522 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	69db      	ldr	r3, [r3, #28]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d101      	bne.n	80044fc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e013      	b.n	8004524 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80044fc:	4b0b      	ldr	r3, [pc, #44]	; (800452c <HAL_RCC_OscConfig+0x4f4>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	429a      	cmp	r2, r3
 800450e:	d106      	bne.n	800451e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800451a:	429a      	cmp	r2, r3
 800451c:	d001      	beq.n	8004522 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e000      	b.n	8004524 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3718      	adds	r7, #24
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	40021000 	.word	0x40021000
 8004530:	40007000 	.word	0x40007000
 8004534:	42420060 	.word	0x42420060

08004538 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d101      	bne.n	800454c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e0d0      	b.n	80046ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800454c:	4b6a      	ldr	r3, [pc, #424]	; (80046f8 <HAL_RCC_ClockConfig+0x1c0>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0307 	and.w	r3, r3, #7
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	429a      	cmp	r2, r3
 8004558:	d910      	bls.n	800457c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800455a:	4b67      	ldr	r3, [pc, #412]	; (80046f8 <HAL_RCC_ClockConfig+0x1c0>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f023 0207 	bic.w	r2, r3, #7
 8004562:	4965      	ldr	r1, [pc, #404]	; (80046f8 <HAL_RCC_ClockConfig+0x1c0>)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	4313      	orrs	r3, r2
 8004568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800456a:	4b63      	ldr	r3, [pc, #396]	; (80046f8 <HAL_RCC_ClockConfig+0x1c0>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0307 	and.w	r3, r3, #7
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	429a      	cmp	r2, r3
 8004576:	d001      	beq.n	800457c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e0b8      	b.n	80046ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d020      	beq.n	80045ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0304 	and.w	r3, r3, #4
 8004590:	2b00      	cmp	r3, #0
 8004592:	d005      	beq.n	80045a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004594:	4b59      	ldr	r3, [pc, #356]	; (80046fc <HAL_RCC_ClockConfig+0x1c4>)
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	4a58      	ldr	r2, [pc, #352]	; (80046fc <HAL_RCC_ClockConfig+0x1c4>)
 800459a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800459e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0308 	and.w	r3, r3, #8
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d005      	beq.n	80045b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045ac:	4b53      	ldr	r3, [pc, #332]	; (80046fc <HAL_RCC_ClockConfig+0x1c4>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	4a52      	ldr	r2, [pc, #328]	; (80046fc <HAL_RCC_ClockConfig+0x1c4>)
 80045b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80045b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045b8:	4b50      	ldr	r3, [pc, #320]	; (80046fc <HAL_RCC_ClockConfig+0x1c4>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	494d      	ldr	r1, [pc, #308]	; (80046fc <HAL_RCC_ClockConfig+0x1c4>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d040      	beq.n	8004658 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d107      	bne.n	80045ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045de:	4b47      	ldr	r3, [pc, #284]	; (80046fc <HAL_RCC_ClockConfig+0x1c4>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d115      	bne.n	8004616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e07f      	b.n	80046ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d107      	bne.n	8004606 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045f6:	4b41      	ldr	r3, [pc, #260]	; (80046fc <HAL_RCC_ClockConfig+0x1c4>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d109      	bne.n	8004616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e073      	b.n	80046ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004606:	4b3d      	ldr	r3, [pc, #244]	; (80046fc <HAL_RCC_ClockConfig+0x1c4>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e06b      	b.n	80046ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004616:	4b39      	ldr	r3, [pc, #228]	; (80046fc <HAL_RCC_ClockConfig+0x1c4>)
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f023 0203 	bic.w	r2, r3, #3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	4936      	ldr	r1, [pc, #216]	; (80046fc <HAL_RCC_ClockConfig+0x1c4>)
 8004624:	4313      	orrs	r3, r2
 8004626:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004628:	f7fe fbee 	bl	8002e08 <HAL_GetTick>
 800462c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800462e:	e00a      	b.n	8004646 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004630:	f7fe fbea 	bl	8002e08 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	f241 3288 	movw	r2, #5000	; 0x1388
 800463e:	4293      	cmp	r3, r2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e053      	b.n	80046ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004646:	4b2d      	ldr	r3, [pc, #180]	; (80046fc <HAL_RCC_ClockConfig+0x1c4>)
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f003 020c 	and.w	r2, r3, #12
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	429a      	cmp	r2, r3
 8004656:	d1eb      	bne.n	8004630 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004658:	4b27      	ldr	r3, [pc, #156]	; (80046f8 <HAL_RCC_ClockConfig+0x1c0>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0307 	and.w	r3, r3, #7
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	429a      	cmp	r2, r3
 8004664:	d210      	bcs.n	8004688 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004666:	4b24      	ldr	r3, [pc, #144]	; (80046f8 <HAL_RCC_ClockConfig+0x1c0>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f023 0207 	bic.w	r2, r3, #7
 800466e:	4922      	ldr	r1, [pc, #136]	; (80046f8 <HAL_RCC_ClockConfig+0x1c0>)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	4313      	orrs	r3, r2
 8004674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004676:	4b20      	ldr	r3, [pc, #128]	; (80046f8 <HAL_RCC_ClockConfig+0x1c0>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0307 	and.w	r3, r3, #7
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	429a      	cmp	r2, r3
 8004682:	d001      	beq.n	8004688 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e032      	b.n	80046ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b00      	cmp	r3, #0
 8004692:	d008      	beq.n	80046a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004694:	4b19      	ldr	r3, [pc, #100]	; (80046fc <HAL_RCC_ClockConfig+0x1c4>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	4916      	ldr	r1, [pc, #88]	; (80046fc <HAL_RCC_ClockConfig+0x1c4>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0308 	and.w	r3, r3, #8
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d009      	beq.n	80046c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046b2:	4b12      	ldr	r3, [pc, #72]	; (80046fc <HAL_RCC_ClockConfig+0x1c4>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	490e      	ldr	r1, [pc, #56]	; (80046fc <HAL_RCC_ClockConfig+0x1c4>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046c6:	f000 f821 	bl	800470c <HAL_RCC_GetSysClockFreq>
 80046ca:	4601      	mov	r1, r0
 80046cc:	4b0b      	ldr	r3, [pc, #44]	; (80046fc <HAL_RCC_ClockConfig+0x1c4>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	091b      	lsrs	r3, r3, #4
 80046d2:	f003 030f 	and.w	r3, r3, #15
 80046d6:	4a0a      	ldr	r2, [pc, #40]	; (8004700 <HAL_RCC_ClockConfig+0x1c8>)
 80046d8:	5cd3      	ldrb	r3, [r2, r3]
 80046da:	fa21 f303 	lsr.w	r3, r1, r3
 80046de:	4a09      	ldr	r2, [pc, #36]	; (8004704 <HAL_RCC_ClockConfig+0x1cc>)
 80046e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80046e2:	4b09      	ldr	r3, [pc, #36]	; (8004708 <HAL_RCC_ClockConfig+0x1d0>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fe fb4c 	bl	8002d84 <HAL_InitTick>

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	40022000 	.word	0x40022000
 80046fc:	40021000 	.word	0x40021000
 8004700:	080076c4 	.word	0x080076c4
 8004704:	20000058 	.word	0x20000058
 8004708:	2000005c 	.word	0x2000005c

0800470c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800470c:	b490      	push	{r4, r7}
 800470e:	b08a      	sub	sp, #40	; 0x28
 8004710:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004712:	4b2a      	ldr	r3, [pc, #168]	; (80047bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8004714:	1d3c      	adds	r4, r7, #4
 8004716:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004718:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800471c:	4b28      	ldr	r3, [pc, #160]	; (80047c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800471e:	881b      	ldrh	r3, [r3, #0]
 8004720:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004722:	2300      	movs	r3, #0
 8004724:	61fb      	str	r3, [r7, #28]
 8004726:	2300      	movs	r3, #0
 8004728:	61bb      	str	r3, [r7, #24]
 800472a:	2300      	movs	r3, #0
 800472c:	627b      	str	r3, [r7, #36]	; 0x24
 800472e:	2300      	movs	r3, #0
 8004730:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004732:	2300      	movs	r3, #0
 8004734:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004736:	4b23      	ldr	r3, [pc, #140]	; (80047c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	f003 030c 	and.w	r3, r3, #12
 8004742:	2b04      	cmp	r3, #4
 8004744:	d002      	beq.n	800474c <HAL_RCC_GetSysClockFreq+0x40>
 8004746:	2b08      	cmp	r3, #8
 8004748:	d003      	beq.n	8004752 <HAL_RCC_GetSysClockFreq+0x46>
 800474a:	e02d      	b.n	80047a8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800474c:	4b1e      	ldr	r3, [pc, #120]	; (80047c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800474e:	623b      	str	r3, [r7, #32]
      break;
 8004750:	e02d      	b.n	80047ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	0c9b      	lsrs	r3, r3, #18
 8004756:	f003 030f 	and.w	r3, r3, #15
 800475a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800475e:	4413      	add	r3, r2
 8004760:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004764:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d013      	beq.n	8004798 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004770:	4b14      	ldr	r3, [pc, #80]	; (80047c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	0c5b      	lsrs	r3, r3, #17
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800477e:	4413      	add	r3, r2
 8004780:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004784:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	4a0f      	ldr	r2, [pc, #60]	; (80047c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800478a:	fb02 f203 	mul.w	r2, r2, r3
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	fbb2 f3f3 	udiv	r3, r2, r3
 8004794:	627b      	str	r3, [r7, #36]	; 0x24
 8004796:	e004      	b.n	80047a2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	4a0c      	ldr	r2, [pc, #48]	; (80047cc <HAL_RCC_GetSysClockFreq+0xc0>)
 800479c:	fb02 f303 	mul.w	r3, r2, r3
 80047a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	623b      	str	r3, [r7, #32]
      break;
 80047a6:	e002      	b.n	80047ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80047a8:	4b07      	ldr	r3, [pc, #28]	; (80047c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80047aa:	623b      	str	r3, [r7, #32]
      break;
 80047ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047ae:	6a3b      	ldr	r3, [r7, #32]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3728      	adds	r7, #40	; 0x28
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bc90      	pop	{r4, r7}
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	08007690 	.word	0x08007690
 80047c0:	080076a0 	.word	0x080076a0
 80047c4:	40021000 	.word	0x40021000
 80047c8:	007a1200 	.word	0x007a1200
 80047cc:	003d0900 	.word	0x003d0900

080047d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047d0:	b480      	push	{r7}
 80047d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047d4:	4b02      	ldr	r3, [pc, #8]	; (80047e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80047d6:	681b      	ldr	r3, [r3, #0]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	46bd      	mov	sp, r7
 80047dc:	bc80      	pop	{r7}
 80047de:	4770      	bx	lr
 80047e0:	20000058 	.word	0x20000058

080047e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80047e8:	f7ff fff2 	bl	80047d0 <HAL_RCC_GetHCLKFreq>
 80047ec:	4601      	mov	r1, r0
 80047ee:	4b05      	ldr	r3, [pc, #20]	; (8004804 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	0adb      	lsrs	r3, r3, #11
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	4a03      	ldr	r2, [pc, #12]	; (8004808 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047fa:	5cd3      	ldrb	r3, [r2, r3]
 80047fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004800:	4618      	mov	r0, r3
 8004802:	bd80      	pop	{r7, pc}
 8004804:	40021000 	.word	0x40021000
 8004808:	080076d4 	.word	0x080076d4

0800480c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004814:	4b0a      	ldr	r3, [pc, #40]	; (8004840 <RCC_Delay+0x34>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a0a      	ldr	r2, [pc, #40]	; (8004844 <RCC_Delay+0x38>)
 800481a:	fba2 2303 	umull	r2, r3, r2, r3
 800481e:	0a5b      	lsrs	r3, r3, #9
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	fb02 f303 	mul.w	r3, r2, r3
 8004826:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004828:	bf00      	nop
  }
  while (Delay --);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	1e5a      	subs	r2, r3, #1
 800482e:	60fa      	str	r2, [r7, #12]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1f9      	bne.n	8004828 <RCC_Delay+0x1c>
}
 8004834:	bf00      	nop
 8004836:	3714      	adds	r7, #20
 8004838:	46bd      	mov	sp, r7
 800483a:	bc80      	pop	{r7}
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	20000058 	.word	0x20000058
 8004844:	10624dd3 	.word	0x10624dd3

08004848 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004850:	2300      	movs	r3, #0
 8004852:	613b      	str	r3, [r7, #16]
 8004854:	2300      	movs	r3, #0
 8004856:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	2b00      	cmp	r3, #0
 8004862:	d07d      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004864:	2300      	movs	r3, #0
 8004866:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004868:	4b4f      	ldr	r3, [pc, #316]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800486a:	69db      	ldr	r3, [r3, #28]
 800486c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10d      	bne.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004874:	4b4c      	ldr	r3, [pc, #304]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004876:	69db      	ldr	r3, [r3, #28]
 8004878:	4a4b      	ldr	r2, [pc, #300]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800487a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800487e:	61d3      	str	r3, [r2, #28]
 8004880:	4b49      	ldr	r3, [pc, #292]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004882:	69db      	ldr	r3, [r3, #28]
 8004884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004888:	60bb      	str	r3, [r7, #8]
 800488a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800488c:	2301      	movs	r3, #1
 800488e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004890:	4b46      	ldr	r3, [pc, #280]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004898:	2b00      	cmp	r3, #0
 800489a:	d118      	bne.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800489c:	4b43      	ldr	r3, [pc, #268]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a42      	ldr	r2, [pc, #264]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048a8:	f7fe faae 	bl	8002e08 <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ae:	e008      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048b0:	f7fe faaa 	bl	8002e08 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b64      	cmp	r3, #100	; 0x64
 80048bc:	d901      	bls.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e06d      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c2:	4b3a      	ldr	r3, [pc, #232]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d0f0      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048ce:	4b36      	ldr	r3, [pc, #216]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048d6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d02e      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d027      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048ec:	4b2e      	ldr	r3, [pc, #184]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048f4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048f6:	4b2e      	ldr	r3, [pc, #184]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80048f8:	2201      	movs	r2, #1
 80048fa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048fc:	4b2c      	ldr	r3, [pc, #176]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80048fe:	2200      	movs	r2, #0
 8004900:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004902:	4a29      	ldr	r2, [pc, #164]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b00      	cmp	r3, #0
 8004910:	d014      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004912:	f7fe fa79 	bl	8002e08 <HAL_GetTick>
 8004916:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004918:	e00a      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800491a:	f7fe fa75 	bl	8002e08 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	f241 3288 	movw	r2, #5000	; 0x1388
 8004928:	4293      	cmp	r3, r2
 800492a:	d901      	bls.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e036      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004930:	4b1d      	ldr	r3, [pc, #116]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b00      	cmp	r3, #0
 800493a:	d0ee      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800493c:	4b1a      	ldr	r3, [pc, #104]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	4917      	ldr	r1, [pc, #92]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800494a:	4313      	orrs	r3, r2
 800494c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800494e:	7dfb      	ldrb	r3, [r7, #23]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d105      	bne.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004954:	4b14      	ldr	r3, [pc, #80]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004956:	69db      	ldr	r3, [r3, #28]
 8004958:	4a13      	ldr	r2, [pc, #76]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800495a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800495e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0302 	and.w	r3, r3, #2
 8004968:	2b00      	cmp	r3, #0
 800496a:	d008      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800496c:	4b0e      	ldr	r3, [pc, #56]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	490b      	ldr	r1, [pc, #44]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800497a:	4313      	orrs	r3, r2
 800497c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0310 	and.w	r3, r3, #16
 8004986:	2b00      	cmp	r3, #0
 8004988:	d008      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800498a:	4b07      	ldr	r3, [pc, #28]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	4904      	ldr	r1, [pc, #16]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004998:	4313      	orrs	r3, r2
 800499a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3718      	adds	r7, #24
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	40021000 	.word	0x40021000
 80049ac:	40007000 	.word	0x40007000
 80049b0:	42420440 	.word	0x42420440

080049b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80049b4:	b590      	push	{r4, r7, lr}
 80049b6:	b08d      	sub	sp, #52	; 0x34
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80049bc:	4b55      	ldr	r3, [pc, #340]	; (8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80049be:	f107 040c 	add.w	r4, r7, #12
 80049c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80049c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80049c8:	4b53      	ldr	r3, [pc, #332]	; (8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80049ca:	881b      	ldrh	r3, [r3, #0]
 80049cc:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80049ce:	2300      	movs	r3, #0
 80049d0:	627b      	str	r3, [r7, #36]	; 0x24
 80049d2:	2300      	movs	r3, #0
 80049d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049d6:	2300      	movs	r3, #0
 80049d8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80049da:	2300      	movs	r3, #0
 80049dc:	61fb      	str	r3, [r7, #28]
 80049de:	2300      	movs	r3, #0
 80049e0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d07f      	beq.n	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80049e8:	2b10      	cmp	r3, #16
 80049ea:	d002      	beq.n	80049f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d048      	beq.n	8004a82 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80049f0:	e08b      	b.n	8004b0a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80049f2:	4b4a      	ldr	r3, [pc, #296]	; (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80049f8:	4b48      	ldr	r3, [pc, #288]	; (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d07f      	beq.n	8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	0c9b      	lsrs	r3, r3, #18
 8004a08:	f003 030f 	and.w	r3, r3, #15
 8004a0c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004a10:	4413      	add	r3, r2
 8004a12:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004a16:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d018      	beq.n	8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004a22:	4b3e      	ldr	r3, [pc, #248]	; (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	0c5b      	lsrs	r3, r3, #17
 8004a28:	f003 0301 	and.w	r3, r3, #1
 8004a2c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004a30:	4413      	add	r3, r2
 8004a32:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004a36:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00d      	beq.n	8004a5e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004a42:	4a37      	ldr	r2, [pc, #220]	; (8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8004a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a46:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a4a:	6a3b      	ldr	r3, [r7, #32]
 8004a4c:	fb02 f303 	mul.w	r3, r2, r3
 8004a50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a52:	e004      	b.n	8004a5e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a54:	6a3b      	ldr	r3, [r7, #32]
 8004a56:	4a33      	ldr	r2, [pc, #204]	; (8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004a58:	fb02 f303 	mul.w	r3, r2, r3
 8004a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004a5e:	4b2f      	ldr	r3, [pc, #188]	; (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a6a:	d102      	bne.n	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8004a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a6e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004a70:	e048      	b.n	8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8004a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a74:	005b      	lsls	r3, r3, #1
 8004a76:	4a2c      	ldr	r2, [pc, #176]	; (8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004a78:	fba2 2303 	umull	r2, r3, r2, r3
 8004a7c:	085b      	lsrs	r3, r3, #1
 8004a7e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004a80:	e040      	b.n	8004b04 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8004a82:	4b26      	ldr	r3, [pc, #152]	; (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a92:	d108      	bne.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8004a9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aa2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aa4:	e01f      	b.n	8004ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ab0:	d109      	bne.n	8004ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8004ab2:	4b1a      	ldr	r3, [pc, #104]	; (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab6:	f003 0302 	and.w	r3, r3, #2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8004abe:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004ac2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ac4:	e00f      	b.n	8004ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004acc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ad0:	d11a      	bne.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8004ad2:	4b12      	ldr	r3, [pc, #72]	; (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d014      	beq.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8004ade:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004ae2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004ae4:	e010      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8004ae6:	e00f      	b.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004ae8:	f7ff fe7c 	bl	80047e4 <HAL_RCC_GetPCLK2Freq>
 8004aec:	4602      	mov	r2, r0
 8004aee:	4b0b      	ldr	r3, [pc, #44]	; (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	0b9b      	lsrs	r3, r3, #14
 8004af4:	f003 0303 	and.w	r3, r3, #3
 8004af8:	3301      	adds	r3, #1
 8004afa:	005b      	lsls	r3, r3, #1
 8004afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b00:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004b02:	e002      	b.n	8004b0a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8004b04:	bf00      	nop
 8004b06:	e000      	b.n	8004b0a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8004b08:	bf00      	nop
    }
  }
  return (frequency);
 8004b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3734      	adds	r7, #52	; 0x34
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd90      	pop	{r4, r7, pc}
 8004b14:	080076a4 	.word	0x080076a4
 8004b18:	080076b4 	.word	0x080076b4
 8004b1c:	40021000 	.word	0x40021000
 8004b20:	007a1200 	.word	0x007a1200
 8004b24:	003d0900 	.word	0x003d0900
 8004b28:	aaaaaaab 	.word	0xaaaaaaab

08004b2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e041      	b.n	8004bc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d106      	bne.n	8004b58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7fd ffd2 	bl	8002afc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	3304      	adds	r3, #4
 8004b68:	4619      	mov	r1, r3
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	f000 fc1c 	bl	80053a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3708      	adds	r7, #8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
	...

08004bcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d001      	beq.n	8004be4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e03a      	b.n	8004c5a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2202      	movs	r2, #2
 8004be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68da      	ldr	r2, [r3, #12]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f042 0201 	orr.w	r2, r2, #1
 8004bfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a18      	ldr	r2, [pc, #96]	; (8004c64 <HAL_TIM_Base_Start_IT+0x98>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d00e      	beq.n	8004c24 <HAL_TIM_Base_Start_IT+0x58>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c0e:	d009      	beq.n	8004c24 <HAL_TIM_Base_Start_IT+0x58>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a14      	ldr	r2, [pc, #80]	; (8004c68 <HAL_TIM_Base_Start_IT+0x9c>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d004      	beq.n	8004c24 <HAL_TIM_Base_Start_IT+0x58>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a13      	ldr	r2, [pc, #76]	; (8004c6c <HAL_TIM_Base_Start_IT+0xa0>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d111      	bne.n	8004c48 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f003 0307 	and.w	r3, r3, #7
 8004c2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2b06      	cmp	r3, #6
 8004c34:	d010      	beq.n	8004c58 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f042 0201 	orr.w	r2, r2, #1
 8004c44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c46:	e007      	b.n	8004c58 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f042 0201 	orr.w	r2, r2, #1
 8004c56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3714      	adds	r7, #20
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bc80      	pop	{r7}
 8004c62:	4770      	bx	lr
 8004c64:	40012c00 	.word	0x40012c00
 8004c68:	40000400 	.word	0x40000400
 8004c6c:	40000800 	.word	0x40000800

08004c70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e041      	b.n	8004d06 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d106      	bne.n	8004c9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f839 	bl	8004d0e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	3304      	adds	r3, #4
 8004cac:	4619      	mov	r1, r3
 8004cae:	4610      	mov	r0, r2
 8004cb0:	f000 fb7a 	bl	80053a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b083      	sub	sp, #12
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d16:	bf00      	nop
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bc80      	pop	{r7}
 8004d1e:	4770      	bx	lr

08004d20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d109      	bne.n	8004d44 <HAL_TIM_PWM_Start+0x24>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	bf14      	ite	ne
 8004d3c:	2301      	movne	r3, #1
 8004d3e:	2300      	moveq	r3, #0
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	e022      	b.n	8004d8a <HAL_TIM_PWM_Start+0x6a>
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	2b04      	cmp	r3, #4
 8004d48:	d109      	bne.n	8004d5e <HAL_TIM_PWM_Start+0x3e>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	bf14      	ite	ne
 8004d56:	2301      	movne	r3, #1
 8004d58:	2300      	moveq	r3, #0
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	e015      	b.n	8004d8a <HAL_TIM_PWM_Start+0x6a>
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	2b08      	cmp	r3, #8
 8004d62:	d109      	bne.n	8004d78 <HAL_TIM_PWM_Start+0x58>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	bf14      	ite	ne
 8004d70:	2301      	movne	r3, #1
 8004d72:	2300      	moveq	r3, #0
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	e008      	b.n	8004d8a <HAL_TIM_PWM_Start+0x6a>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	bf14      	ite	ne
 8004d84:	2301      	movne	r3, #1
 8004d86:	2300      	moveq	r3, #0
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e05e      	b.n	8004e50 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d104      	bne.n	8004da2 <HAL_TIM_PWM_Start+0x82>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004da0:	e013      	b.n	8004dca <HAL_TIM_PWM_Start+0xaa>
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	2b04      	cmp	r3, #4
 8004da6:	d104      	bne.n	8004db2 <HAL_TIM_PWM_Start+0x92>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2202      	movs	r2, #2
 8004dac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004db0:	e00b      	b.n	8004dca <HAL_TIM_PWM_Start+0xaa>
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b08      	cmp	r3, #8
 8004db6:	d104      	bne.n	8004dc2 <HAL_TIM_PWM_Start+0xa2>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2202      	movs	r2, #2
 8004dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dc0:	e003      	b.n	8004dca <HAL_TIM_PWM_Start+0xaa>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2202      	movs	r2, #2
 8004dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	6839      	ldr	r1, [r7, #0]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 fd68 	bl	80058a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a1e      	ldr	r2, [pc, #120]	; (8004e58 <HAL_TIM_PWM_Start+0x138>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d107      	bne.n	8004df2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004df0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a18      	ldr	r2, [pc, #96]	; (8004e58 <HAL_TIM_PWM_Start+0x138>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d00e      	beq.n	8004e1a <HAL_TIM_PWM_Start+0xfa>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e04:	d009      	beq.n	8004e1a <HAL_TIM_PWM_Start+0xfa>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a14      	ldr	r2, [pc, #80]	; (8004e5c <HAL_TIM_PWM_Start+0x13c>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d004      	beq.n	8004e1a <HAL_TIM_PWM_Start+0xfa>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a12      	ldr	r2, [pc, #72]	; (8004e60 <HAL_TIM_PWM_Start+0x140>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d111      	bne.n	8004e3e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f003 0307 	and.w	r3, r3, #7
 8004e24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2b06      	cmp	r3, #6
 8004e2a:	d010      	beq.n	8004e4e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f042 0201 	orr.w	r2, r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e3c:	e007      	b.n	8004e4e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f042 0201 	orr.w	r2, r2, #1
 8004e4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3710      	adds	r7, #16
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	40012c00 	.word	0x40012c00
 8004e5c:	40000400 	.word	0x40000400
 8004e60:	40000800 	.word	0x40000800

08004e64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d122      	bne.n	8004ec0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	f003 0302 	and.w	r3, r3, #2
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d11b      	bne.n	8004ec0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f06f 0202 	mvn.w	r2, #2
 8004e90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	f003 0303 	and.w	r3, r3, #3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d003      	beq.n	8004eae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 fa62 	bl	8005370 <HAL_TIM_IC_CaptureCallback>
 8004eac:	e005      	b.n	8004eba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 fa55 	bl	800535e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 fa64 	bl	8005382 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	f003 0304 	and.w	r3, r3, #4
 8004eca:	2b04      	cmp	r3, #4
 8004ecc:	d122      	bne.n	8004f14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b04      	cmp	r3, #4
 8004eda:	d11b      	bne.n	8004f14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f06f 0204 	mvn.w	r2, #4
 8004ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2202      	movs	r2, #2
 8004eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d003      	beq.n	8004f02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 fa38 	bl	8005370 <HAL_TIM_IC_CaptureCallback>
 8004f00:	e005      	b.n	8004f0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 fa2b 	bl	800535e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 fa3a 	bl	8005382 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	f003 0308 	and.w	r3, r3, #8
 8004f1e:	2b08      	cmp	r3, #8
 8004f20:	d122      	bne.n	8004f68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	f003 0308 	and.w	r3, r3, #8
 8004f2c:	2b08      	cmp	r3, #8
 8004f2e:	d11b      	bne.n	8004f68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f06f 0208 	mvn.w	r2, #8
 8004f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2204      	movs	r2, #4
 8004f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	f003 0303 	and.w	r3, r3, #3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d003      	beq.n	8004f56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 fa0e 	bl	8005370 <HAL_TIM_IC_CaptureCallback>
 8004f54:	e005      	b.n	8004f62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 fa01 	bl	800535e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 fa10 	bl	8005382 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	f003 0310 	and.w	r3, r3, #16
 8004f72:	2b10      	cmp	r3, #16
 8004f74:	d122      	bne.n	8004fbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	f003 0310 	and.w	r3, r3, #16
 8004f80:	2b10      	cmp	r3, #16
 8004f82:	d11b      	bne.n	8004fbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f06f 0210 	mvn.w	r2, #16
 8004f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2208      	movs	r2, #8
 8004f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d003      	beq.n	8004faa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f9e4 	bl	8005370 <HAL_TIM_IC_CaptureCallback>
 8004fa8:	e005      	b.n	8004fb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f9d7 	bl	800535e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 f9e6 	bl	8005382 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d10e      	bne.n	8004fe8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d107      	bne.n	8004fe8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f06f 0201 	mvn.w	r2, #1
 8004fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f7fd f9b4 	bl	8002350 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ff2:	2b80      	cmp	r3, #128	; 0x80
 8004ff4:	d10e      	bne.n	8005014 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005000:	2b80      	cmp	r3, #128	; 0x80
 8005002:	d107      	bne.n	8005014 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800500c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 fcd5 	bl	80059be <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501e:	2b40      	cmp	r3, #64	; 0x40
 8005020:	d10e      	bne.n	8005040 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800502c:	2b40      	cmp	r3, #64	; 0x40
 800502e:	d107      	bne.n	8005040 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f9aa 	bl	8005394 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	f003 0320 	and.w	r3, r3, #32
 800504a:	2b20      	cmp	r3, #32
 800504c:	d10e      	bne.n	800506c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	f003 0320 	and.w	r3, r3, #32
 8005058:	2b20      	cmp	r3, #32
 800505a:	d107      	bne.n	800506c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f06f 0220 	mvn.w	r2, #32
 8005064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 fca0 	bl	80059ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800506c:	bf00      	nop
 800506e:	3708      	adds	r7, #8
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005086:	2b01      	cmp	r3, #1
 8005088:	d101      	bne.n	800508e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800508a:	2302      	movs	r3, #2
 800508c:	e0ac      	b.n	80051e8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2b0c      	cmp	r3, #12
 800509a:	f200 809f 	bhi.w	80051dc <HAL_TIM_PWM_ConfigChannel+0x168>
 800509e:	a201      	add	r2, pc, #4	; (adr r2, 80050a4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80050a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a4:	080050d9 	.word	0x080050d9
 80050a8:	080051dd 	.word	0x080051dd
 80050ac:	080051dd 	.word	0x080051dd
 80050b0:	080051dd 	.word	0x080051dd
 80050b4:	08005119 	.word	0x08005119
 80050b8:	080051dd 	.word	0x080051dd
 80050bc:	080051dd 	.word	0x080051dd
 80050c0:	080051dd 	.word	0x080051dd
 80050c4:	0800515b 	.word	0x0800515b
 80050c8:	080051dd 	.word	0x080051dd
 80050cc:	080051dd 	.word	0x080051dd
 80050d0:	080051dd 	.word	0x080051dd
 80050d4:	0800519b 	.word	0x0800519b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68b9      	ldr	r1, [r7, #8]
 80050de:	4618      	mov	r0, r3
 80050e0:	f000 f9c4 	bl	800546c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	699a      	ldr	r2, [r3, #24]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 0208 	orr.w	r2, r2, #8
 80050f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	699a      	ldr	r2, [r3, #24]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f022 0204 	bic.w	r2, r2, #4
 8005102:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6999      	ldr	r1, [r3, #24]
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	691a      	ldr	r2, [r3, #16]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	619a      	str	r2, [r3, #24]
      break;
 8005116:	e062      	b.n	80051de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68b9      	ldr	r1, [r7, #8]
 800511e:	4618      	mov	r0, r3
 8005120:	f000 fa0a 	bl	8005538 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	699a      	ldr	r2, [r3, #24]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005132:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	699a      	ldr	r2, [r3, #24]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005142:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6999      	ldr	r1, [r3, #24]
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	021a      	lsls	r2, r3, #8
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	430a      	orrs	r2, r1
 8005156:	619a      	str	r2, [r3, #24]
      break;
 8005158:	e041      	b.n	80051de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68b9      	ldr	r1, [r7, #8]
 8005160:	4618      	mov	r0, r3
 8005162:	f000 fa53 	bl	800560c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	69da      	ldr	r2, [r3, #28]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f042 0208 	orr.w	r2, r2, #8
 8005174:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	69da      	ldr	r2, [r3, #28]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 0204 	bic.w	r2, r2, #4
 8005184:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	69d9      	ldr	r1, [r3, #28]
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	691a      	ldr	r2, [r3, #16]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	430a      	orrs	r2, r1
 8005196:	61da      	str	r2, [r3, #28]
      break;
 8005198:	e021      	b.n	80051de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68b9      	ldr	r1, [r7, #8]
 80051a0:	4618      	mov	r0, r3
 80051a2:	f000 fa9d 	bl	80056e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	69da      	ldr	r2, [r3, #28]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	69da      	ldr	r2, [r3, #28]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	69d9      	ldr	r1, [r3, #28]
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	021a      	lsls	r2, r3, #8
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	61da      	str	r2, [r3, #28]
      break;
 80051da:	e000      	b.n	80051de <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80051dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3710      	adds	r7, #16
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005200:	2b01      	cmp	r3, #1
 8005202:	d101      	bne.n	8005208 <HAL_TIM_ConfigClockSource+0x18>
 8005204:	2302      	movs	r3, #2
 8005206:	e0a6      	b.n	8005356 <HAL_TIM_ConfigClockSource+0x166>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2202      	movs	r2, #2
 8005214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005226:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800522e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2b40      	cmp	r3, #64	; 0x40
 800523e:	d067      	beq.n	8005310 <HAL_TIM_ConfigClockSource+0x120>
 8005240:	2b40      	cmp	r3, #64	; 0x40
 8005242:	d80b      	bhi.n	800525c <HAL_TIM_ConfigClockSource+0x6c>
 8005244:	2b10      	cmp	r3, #16
 8005246:	d073      	beq.n	8005330 <HAL_TIM_ConfigClockSource+0x140>
 8005248:	2b10      	cmp	r3, #16
 800524a:	d802      	bhi.n	8005252 <HAL_TIM_ConfigClockSource+0x62>
 800524c:	2b00      	cmp	r3, #0
 800524e:	d06f      	beq.n	8005330 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005250:	e078      	b.n	8005344 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005252:	2b20      	cmp	r3, #32
 8005254:	d06c      	beq.n	8005330 <HAL_TIM_ConfigClockSource+0x140>
 8005256:	2b30      	cmp	r3, #48	; 0x30
 8005258:	d06a      	beq.n	8005330 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800525a:	e073      	b.n	8005344 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800525c:	2b70      	cmp	r3, #112	; 0x70
 800525e:	d00d      	beq.n	800527c <HAL_TIM_ConfigClockSource+0x8c>
 8005260:	2b70      	cmp	r3, #112	; 0x70
 8005262:	d804      	bhi.n	800526e <HAL_TIM_ConfigClockSource+0x7e>
 8005264:	2b50      	cmp	r3, #80	; 0x50
 8005266:	d033      	beq.n	80052d0 <HAL_TIM_ConfigClockSource+0xe0>
 8005268:	2b60      	cmp	r3, #96	; 0x60
 800526a:	d041      	beq.n	80052f0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800526c:	e06a      	b.n	8005344 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800526e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005272:	d066      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0x152>
 8005274:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005278:	d017      	beq.n	80052aa <HAL_TIM_ConfigClockSource+0xba>
      break;
 800527a:	e063      	b.n	8005344 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6818      	ldr	r0, [r3, #0]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	6899      	ldr	r1, [r3, #8]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	f000 faed 	bl	800586a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800529e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	609a      	str	r2, [r3, #8]
      break;
 80052a8:	e04c      	b.n	8005344 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6818      	ldr	r0, [r3, #0]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	6899      	ldr	r1, [r3, #8]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	685a      	ldr	r2, [r3, #4]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	f000 fad6 	bl	800586a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	689a      	ldr	r2, [r3, #8]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052cc:	609a      	str	r2, [r3, #8]
      break;
 80052ce:	e039      	b.n	8005344 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6818      	ldr	r0, [r3, #0]
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	6859      	ldr	r1, [r3, #4]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	461a      	mov	r2, r3
 80052de:	f000 fa4d 	bl	800577c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2150      	movs	r1, #80	; 0x50
 80052e8:	4618      	mov	r0, r3
 80052ea:	f000 faa4 	bl	8005836 <TIM_ITRx_SetConfig>
      break;
 80052ee:	e029      	b.n	8005344 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6818      	ldr	r0, [r3, #0]
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	6859      	ldr	r1, [r3, #4]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	461a      	mov	r2, r3
 80052fe:	f000 fa6b 	bl	80057d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2160      	movs	r1, #96	; 0x60
 8005308:	4618      	mov	r0, r3
 800530a:	f000 fa94 	bl	8005836 <TIM_ITRx_SetConfig>
      break;
 800530e:	e019      	b.n	8005344 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6818      	ldr	r0, [r3, #0]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	6859      	ldr	r1, [r3, #4]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	461a      	mov	r2, r3
 800531e:	f000 fa2d 	bl	800577c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2140      	movs	r1, #64	; 0x40
 8005328:	4618      	mov	r0, r3
 800532a:	f000 fa84 	bl	8005836 <TIM_ITRx_SetConfig>
      break;
 800532e:	e009      	b.n	8005344 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4619      	mov	r1, r3
 800533a:	4610      	mov	r0, r2
 800533c:	f000 fa7b 	bl	8005836 <TIM_ITRx_SetConfig>
        break;
 8005340:	e000      	b.n	8005344 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005342:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3710      	adds	r7, #16
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800535e:	b480      	push	{r7}
 8005360:	b083      	sub	sp, #12
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005366:	bf00      	nop
 8005368:	370c      	adds	r7, #12
 800536a:	46bd      	mov	sp, r7
 800536c:	bc80      	pop	{r7}
 800536e:	4770      	bx	lr

08005370 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	bc80      	pop	{r7}
 8005380:	4770      	bx	lr

08005382 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005382:	b480      	push	{r7}
 8005384:	b083      	sub	sp, #12
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800538a:	bf00      	nop
 800538c:	370c      	adds	r7, #12
 800538e:	46bd      	mov	sp, r7
 8005390:	bc80      	pop	{r7}
 8005392:	4770      	bx	lr

08005394 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bc80      	pop	{r7}
 80053a4:	4770      	bx	lr
	...

080053a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a29      	ldr	r2, [pc, #164]	; (8005460 <TIM_Base_SetConfig+0xb8>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d00b      	beq.n	80053d8 <TIM_Base_SetConfig+0x30>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053c6:	d007      	beq.n	80053d8 <TIM_Base_SetConfig+0x30>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a26      	ldr	r2, [pc, #152]	; (8005464 <TIM_Base_SetConfig+0xbc>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d003      	beq.n	80053d8 <TIM_Base_SetConfig+0x30>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a25      	ldr	r2, [pc, #148]	; (8005468 <TIM_Base_SetConfig+0xc0>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d108      	bne.n	80053ea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a1c      	ldr	r2, [pc, #112]	; (8005460 <TIM_Base_SetConfig+0xb8>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d00b      	beq.n	800540a <TIM_Base_SetConfig+0x62>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053f8:	d007      	beq.n	800540a <TIM_Base_SetConfig+0x62>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a19      	ldr	r2, [pc, #100]	; (8005464 <TIM_Base_SetConfig+0xbc>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d003      	beq.n	800540a <TIM_Base_SetConfig+0x62>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a18      	ldr	r2, [pc, #96]	; (8005468 <TIM_Base_SetConfig+0xc0>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d108      	bne.n	800541c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005410:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	4313      	orrs	r3, r2
 800541a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	4313      	orrs	r3, r2
 8005428:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	689a      	ldr	r2, [r3, #8]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a07      	ldr	r2, [pc, #28]	; (8005460 <TIM_Base_SetConfig+0xb8>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d103      	bne.n	8005450 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	691a      	ldr	r2, [r3, #16]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	615a      	str	r2, [r3, #20]
}
 8005456:	bf00      	nop
 8005458:	3714      	adds	r7, #20
 800545a:	46bd      	mov	sp, r7
 800545c:	bc80      	pop	{r7}
 800545e:	4770      	bx	lr
 8005460:	40012c00 	.word	0x40012c00
 8005464:	40000400 	.word	0x40000400
 8005468:	40000800 	.word	0x40000800

0800546c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800546c:	b480      	push	{r7}
 800546e:	b087      	sub	sp, #28
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	f023 0201 	bic.w	r2, r3, #1
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800549a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f023 0303 	bic.w	r3, r3, #3
 80054a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f023 0302 	bic.w	r3, r3, #2
 80054b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	4313      	orrs	r3, r2
 80054be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a1c      	ldr	r2, [pc, #112]	; (8005534 <TIM_OC1_SetConfig+0xc8>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d10c      	bne.n	80054e2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	f023 0308 	bic.w	r3, r3, #8
 80054ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	f023 0304 	bic.w	r3, r3, #4
 80054e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a13      	ldr	r2, [pc, #76]	; (8005534 <TIM_OC1_SetConfig+0xc8>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d111      	bne.n	800550e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	4313      	orrs	r3, r2
 8005502:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	4313      	orrs	r3, r2
 800550c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	621a      	str	r2, [r3, #32]
}
 8005528:	bf00      	nop
 800552a:	371c      	adds	r7, #28
 800552c:	46bd      	mov	sp, r7
 800552e:	bc80      	pop	{r7}
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	40012c00 	.word	0x40012c00

08005538 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005538:	b480      	push	{r7}
 800553a:	b087      	sub	sp, #28
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	f023 0210 	bic.w	r2, r3, #16
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800556e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	021b      	lsls	r3, r3, #8
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	4313      	orrs	r3, r2
 800557a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	f023 0320 	bic.w	r3, r3, #32
 8005582:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	011b      	lsls	r3, r3, #4
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	4313      	orrs	r3, r2
 800558e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a1d      	ldr	r2, [pc, #116]	; (8005608 <TIM_OC2_SetConfig+0xd0>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d10d      	bne.n	80055b4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800559e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	011b      	lsls	r3, r3, #4
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a14      	ldr	r2, [pc, #80]	; (8005608 <TIM_OC2_SetConfig+0xd0>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d113      	bne.n	80055e4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	693a      	ldr	r2, [r7, #16]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	621a      	str	r2, [r3, #32]
}
 80055fe:	bf00      	nop
 8005600:	371c      	adds	r7, #28
 8005602:	46bd      	mov	sp, r7
 8005604:	bc80      	pop	{r7}
 8005606:	4770      	bx	lr
 8005608:	40012c00 	.word	0x40012c00

0800560c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800560c:	b480      	push	{r7}
 800560e:	b087      	sub	sp, #28
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	69db      	ldr	r3, [r3, #28]
 8005632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800563a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f023 0303 	bic.w	r3, r3, #3
 8005642:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	4313      	orrs	r3, r2
 800564c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005654:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	021b      	lsls	r3, r3, #8
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	4313      	orrs	r3, r2
 8005660:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a1d      	ldr	r2, [pc, #116]	; (80056dc <TIM_OC3_SetConfig+0xd0>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d10d      	bne.n	8005686 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005670:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	021b      	lsls	r3, r3, #8
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	4313      	orrs	r3, r2
 800567c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005684:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a14      	ldr	r2, [pc, #80]	; (80056dc <TIM_OC3_SetConfig+0xd0>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d113      	bne.n	80056b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005694:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800569c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	011b      	lsls	r3, r3, #4
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	011b      	lsls	r3, r3, #4
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	697a      	ldr	r2, [r7, #20]
 80056ce:	621a      	str	r2, [r3, #32]
}
 80056d0:	bf00      	nop
 80056d2:	371c      	adds	r7, #28
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bc80      	pop	{r7}
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	40012c00 	.word	0x40012c00

080056e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b087      	sub	sp, #28
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	69db      	ldr	r3, [r3, #28]
 8005706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800570e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005716:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	021b      	lsls	r3, r3, #8
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	4313      	orrs	r3, r2
 8005722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800572a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	031b      	lsls	r3, r3, #12
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	4313      	orrs	r3, r2
 8005736:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a0f      	ldr	r2, [pc, #60]	; (8005778 <TIM_OC4_SetConfig+0x98>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d109      	bne.n	8005754 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005746:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	695b      	ldr	r3, [r3, #20]
 800574c:	019b      	lsls	r3, r3, #6
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	4313      	orrs	r3, r2
 8005752:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	685a      	ldr	r2, [r3, #4]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	621a      	str	r2, [r3, #32]
}
 800576e:	bf00      	nop
 8005770:	371c      	adds	r7, #28
 8005772:	46bd      	mov	sp, r7
 8005774:	bc80      	pop	{r7}
 8005776:	4770      	bx	lr
 8005778:	40012c00 	.word	0x40012c00

0800577c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800577c:	b480      	push	{r7}
 800577e:	b087      	sub	sp, #28
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	f023 0201 	bic.w	r2, r3, #1
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	011b      	lsls	r3, r3, #4
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	f023 030a 	bic.w	r3, r3, #10
 80057b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	4313      	orrs	r3, r2
 80057c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	621a      	str	r2, [r3, #32]
}
 80057ce:	bf00      	nop
 80057d0:	371c      	adds	r7, #28
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bc80      	pop	{r7}
 80057d6:	4770      	bx	lr

080057d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057d8:	b480      	push	{r7}
 80057da:	b087      	sub	sp, #28
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6a1b      	ldr	r3, [r3, #32]
 80057e8:	f023 0210 	bic.w	r2, r3, #16
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	699b      	ldr	r3, [r3, #24]
 80057f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005802:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	031b      	lsls	r3, r3, #12
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	4313      	orrs	r3, r2
 800580c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005814:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	011b      	lsls	r3, r3, #4
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	4313      	orrs	r3, r2
 800581e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	621a      	str	r2, [r3, #32]
}
 800582c:	bf00      	nop
 800582e:	371c      	adds	r7, #28
 8005830:	46bd      	mov	sp, r7
 8005832:	bc80      	pop	{r7}
 8005834:	4770      	bx	lr

08005836 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005836:	b480      	push	{r7}
 8005838:	b085      	sub	sp, #20
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
 800583e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800584c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800584e:	683a      	ldr	r2, [r7, #0]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	4313      	orrs	r3, r2
 8005854:	f043 0307 	orr.w	r3, r3, #7
 8005858:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	609a      	str	r2, [r3, #8]
}
 8005860:	bf00      	nop
 8005862:	3714      	adds	r7, #20
 8005864:	46bd      	mov	sp, r7
 8005866:	bc80      	pop	{r7}
 8005868:	4770      	bx	lr

0800586a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800586a:	b480      	push	{r7}
 800586c:	b087      	sub	sp, #28
 800586e:	af00      	add	r7, sp, #0
 8005870:	60f8      	str	r0, [r7, #12]
 8005872:	60b9      	str	r1, [r7, #8]
 8005874:	607a      	str	r2, [r7, #4]
 8005876:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005884:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	021a      	lsls	r2, r3, #8
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	431a      	orrs	r2, r3
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	4313      	orrs	r3, r2
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	4313      	orrs	r3, r2
 8005896:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	697a      	ldr	r2, [r7, #20]
 800589c:	609a      	str	r2, [r3, #8]
}
 800589e:	bf00      	nop
 80058a0:	371c      	adds	r7, #28
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bc80      	pop	{r7}
 80058a6:	4770      	bx	lr

080058a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b087      	sub	sp, #28
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	f003 031f 	and.w	r3, r3, #31
 80058ba:	2201      	movs	r2, #1
 80058bc:	fa02 f303 	lsl.w	r3, r2, r3
 80058c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6a1a      	ldr	r2, [r3, #32]
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	43db      	mvns	r3, r3
 80058ca:	401a      	ands	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6a1a      	ldr	r2, [r3, #32]
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	f003 031f 	and.w	r3, r3, #31
 80058da:	6879      	ldr	r1, [r7, #4]
 80058dc:	fa01 f303 	lsl.w	r3, r1, r3
 80058e0:	431a      	orrs	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	621a      	str	r2, [r3, #32]
}
 80058e6:	bf00      	nop
 80058e8:	371c      	adds	r7, #28
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bc80      	pop	{r7}
 80058ee:	4770      	bx	lr

080058f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b085      	sub	sp, #20
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005900:	2b01      	cmp	r3, #1
 8005902:	d101      	bne.n	8005908 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005904:	2302      	movs	r3, #2
 8005906:	e046      	b.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2202      	movs	r2, #2
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800592e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	4313      	orrs	r3, r2
 8005938:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a16      	ldr	r2, [pc, #88]	; (80059a0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d00e      	beq.n	800596a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005954:	d009      	beq.n	800596a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a12      	ldr	r2, [pc, #72]	; (80059a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d004      	beq.n	800596a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a10      	ldr	r2, [pc, #64]	; (80059a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d10c      	bne.n	8005984 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005970:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	4313      	orrs	r3, r2
 800597a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68ba      	ldr	r2, [r7, #8]
 8005982:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3714      	adds	r7, #20
 800599a:	46bd      	mov	sp, r7
 800599c:	bc80      	pop	{r7}
 800599e:	4770      	bx	lr
 80059a0:	40012c00 	.word	0x40012c00
 80059a4:	40000400 	.word	0x40000400
 80059a8:	40000800 	.word	0x40000800

080059ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bc80      	pop	{r7}
 80059bc:	4770      	bx	lr

080059be <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059be:	b480      	push	{r7}
 80059c0:	b083      	sub	sp, #12
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059c6:	bf00      	nop
 80059c8:	370c      	adds	r7, #12
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bc80      	pop	{r7}
 80059ce:	4770      	bx	lr

080059d0 <__errno>:
 80059d0:	4b01      	ldr	r3, [pc, #4]	; (80059d8 <__errno+0x8>)
 80059d2:	6818      	ldr	r0, [r3, #0]
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	20000064 	.word	0x20000064

080059dc <__libc_init_array>:
 80059dc:	b570      	push	{r4, r5, r6, lr}
 80059de:	2500      	movs	r5, #0
 80059e0:	4e0c      	ldr	r6, [pc, #48]	; (8005a14 <__libc_init_array+0x38>)
 80059e2:	4c0d      	ldr	r4, [pc, #52]	; (8005a18 <__libc_init_array+0x3c>)
 80059e4:	1ba4      	subs	r4, r4, r6
 80059e6:	10a4      	asrs	r4, r4, #2
 80059e8:	42a5      	cmp	r5, r4
 80059ea:	d109      	bne.n	8005a00 <__libc_init_array+0x24>
 80059ec:	f001 fdaa 	bl	8007544 <_init>
 80059f0:	2500      	movs	r5, #0
 80059f2:	4e0a      	ldr	r6, [pc, #40]	; (8005a1c <__libc_init_array+0x40>)
 80059f4:	4c0a      	ldr	r4, [pc, #40]	; (8005a20 <__libc_init_array+0x44>)
 80059f6:	1ba4      	subs	r4, r4, r6
 80059f8:	10a4      	asrs	r4, r4, #2
 80059fa:	42a5      	cmp	r5, r4
 80059fc:	d105      	bne.n	8005a0a <__libc_init_array+0x2e>
 80059fe:	bd70      	pop	{r4, r5, r6, pc}
 8005a00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005a04:	4798      	blx	r3
 8005a06:	3501      	adds	r5, #1
 8005a08:	e7ee      	b.n	80059e8 <__libc_init_array+0xc>
 8005a0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005a0e:	4798      	blx	r3
 8005a10:	3501      	adds	r5, #1
 8005a12:	e7f2      	b.n	80059fa <__libc_init_array+0x1e>
 8005a14:	0800793c 	.word	0x0800793c
 8005a18:	0800793c 	.word	0x0800793c
 8005a1c:	0800793c 	.word	0x0800793c
 8005a20:	08007940 	.word	0x08007940

08005a24 <localtime>:
 8005a24:	b538      	push	{r3, r4, r5, lr}
 8005a26:	4b07      	ldr	r3, [pc, #28]	; (8005a44 <localtime+0x20>)
 8005a28:	4605      	mov	r5, r0
 8005a2a:	681c      	ldr	r4, [r3, #0]
 8005a2c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005a2e:	b91b      	cbnz	r3, 8005a38 <localtime+0x14>
 8005a30:	2024      	movs	r0, #36	; 0x24
 8005a32:	f000 f8f3 	bl	8005c1c <malloc>
 8005a36:	63e0      	str	r0, [r4, #60]	; 0x3c
 8005a38:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005a3a:	4628      	mov	r0, r5
 8005a3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a40:	f000 b802 	b.w	8005a48 <localtime_r>
 8005a44:	20000064 	.word	0x20000064

08005a48 <localtime_r>:
 8005a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a4c:	460c      	mov	r4, r1
 8005a4e:	4680      	mov	r8, r0
 8005a50:	f000 fc70 	bl	8006334 <__gettzinfo>
 8005a54:	4621      	mov	r1, r4
 8005a56:	4607      	mov	r7, r0
 8005a58:	4640      	mov	r0, r8
 8005a5a:	f000 fc6f 	bl	800633c <gmtime_r>
 8005a5e:	6946      	ldr	r6, [r0, #20]
 8005a60:	4604      	mov	r4, r0
 8005a62:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8005a66:	07b2      	lsls	r2, r6, #30
 8005a68:	d105      	bne.n	8005a76 <localtime_r+0x2e>
 8005a6a:	2264      	movs	r2, #100	; 0x64
 8005a6c:	fb96 f3f2 	sdiv	r3, r6, r2
 8005a70:	fb02 6313 	mls	r3, r2, r3, r6
 8005a74:	bb13      	cbnz	r3, 8005abc <localtime_r+0x74>
 8005a76:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8005a7a:	fb96 f5f3 	sdiv	r5, r6, r3
 8005a7e:	fb03 6515 	mls	r5, r3, r5, r6
 8005a82:	fab5 f585 	clz	r5, r5
 8005a86:	096d      	lsrs	r5, r5, #5
 8005a88:	2230      	movs	r2, #48	; 0x30
 8005a8a:	4b62      	ldr	r3, [pc, #392]	; (8005c14 <localtime_r+0x1cc>)
 8005a8c:	fb02 3505 	mla	r5, r2, r5, r3
 8005a90:	f000 fa74 	bl	8005f7c <__tz_lock>
 8005a94:	f000 fa74 	bl	8005f80 <_tzset_unlocked>
 8005a98:	4b5f      	ldr	r3, [pc, #380]	; (8005c18 <localtime_r+0x1d0>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	b323      	cbz	r3, 8005ae8 <localtime_r+0xa0>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	42b3      	cmp	r3, r6
 8005aa2:	d10d      	bne.n	8005ac0 <localtime_r+0x78>
 8005aa4:	e9d8 0100 	ldrd	r0, r1, [r8]
 8005aa8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005aac:	683e      	ldr	r6, [r7, #0]
 8005aae:	b97e      	cbnz	r6, 8005ad0 <localtime_r+0x88>
 8005ab0:	4290      	cmp	r0, r2
 8005ab2:	eb71 0303 	sbcs.w	r3, r1, r3
 8005ab6:	db0f      	blt.n	8005ad8 <localtime_r+0x90>
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e015      	b.n	8005ae8 <localtime_r+0xa0>
 8005abc:	2501      	movs	r5, #1
 8005abe:	e7e3      	b.n	8005a88 <localtime_r+0x40>
 8005ac0:	4630      	mov	r0, r6
 8005ac2:	f000 f9b3 	bl	8005e2c <__tzcalc_limits>
 8005ac6:	2800      	cmp	r0, #0
 8005ac8:	d1ec      	bne.n	8005aa4 <localtime_r+0x5c>
 8005aca:	f04f 33ff 	mov.w	r3, #4294967295
 8005ace:	e00b      	b.n	8005ae8 <localtime_r+0xa0>
 8005ad0:	4290      	cmp	r0, r2
 8005ad2:	eb71 0303 	sbcs.w	r3, r1, r3
 8005ad6:	db57      	blt.n	8005b88 <localtime_r+0x140>
 8005ad8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005adc:	4290      	cmp	r0, r2
 8005ade:	eb71 0303 	sbcs.w	r3, r1, r3
 8005ae2:	bfb4      	ite	lt
 8005ae4:	2301      	movlt	r3, #1
 8005ae6:	2300      	movge	r3, #0
 8005ae8:	6223      	str	r3, [r4, #32]
 8005aea:	6a23      	ldr	r3, [r4, #32]
 8005aec:	203c      	movs	r0, #60	; 0x3c
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005af4:	bf0c      	ite	eq
 8005af6:	6d39      	ldreq	r1, [r7, #80]	; 0x50
 8005af8:	6ab9      	ldrne	r1, [r7, #40]	; 0x28
 8005afa:	fb91 f6f3 	sdiv	r6, r1, r3
 8005afe:	fb03 1316 	mls	r3, r3, r6, r1
 8005b02:	fb93 f2f0 	sdiv	r2, r3, r0
 8005b06:	fb00 3012 	mls	r0, r0, r2, r3
 8005b0a:	6861      	ldr	r1, [r4, #4]
 8005b0c:	6823      	ldr	r3, [r4, #0]
 8005b0e:	1a89      	subs	r1, r1, r2
 8005b10:	68a2      	ldr	r2, [r4, #8]
 8005b12:	1a1b      	subs	r3, r3, r0
 8005b14:	1b92      	subs	r2, r2, r6
 8005b16:	2b3b      	cmp	r3, #59	; 0x3b
 8005b18:	6023      	str	r3, [r4, #0]
 8005b1a:	6061      	str	r1, [r4, #4]
 8005b1c:	60a2      	str	r2, [r4, #8]
 8005b1e:	dd35      	ble.n	8005b8c <localtime_r+0x144>
 8005b20:	3101      	adds	r1, #1
 8005b22:	6061      	str	r1, [r4, #4]
 8005b24:	3b3c      	subs	r3, #60	; 0x3c
 8005b26:	6023      	str	r3, [r4, #0]
 8005b28:	6863      	ldr	r3, [r4, #4]
 8005b2a:	2b3b      	cmp	r3, #59	; 0x3b
 8005b2c:	dd34      	ble.n	8005b98 <localtime_r+0x150>
 8005b2e:	3201      	adds	r2, #1
 8005b30:	60a2      	str	r2, [r4, #8]
 8005b32:	3b3c      	subs	r3, #60	; 0x3c
 8005b34:	6063      	str	r3, [r4, #4]
 8005b36:	68a3      	ldr	r3, [r4, #8]
 8005b38:	2b17      	cmp	r3, #23
 8005b3a:	dd33      	ble.n	8005ba4 <localtime_r+0x15c>
 8005b3c:	69e2      	ldr	r2, [r4, #28]
 8005b3e:	3b18      	subs	r3, #24
 8005b40:	3201      	adds	r2, #1
 8005b42:	61e2      	str	r2, [r4, #28]
 8005b44:	69a2      	ldr	r2, [r4, #24]
 8005b46:	60a3      	str	r3, [r4, #8]
 8005b48:	3201      	adds	r2, #1
 8005b4a:	2a06      	cmp	r2, #6
 8005b4c:	bfc8      	it	gt
 8005b4e:	2200      	movgt	r2, #0
 8005b50:	61a2      	str	r2, [r4, #24]
 8005b52:	68e2      	ldr	r2, [r4, #12]
 8005b54:	6923      	ldr	r3, [r4, #16]
 8005b56:	3201      	adds	r2, #1
 8005b58:	60e2      	str	r2, [r4, #12]
 8005b5a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8005b5e:	428a      	cmp	r2, r1
 8005b60:	dd0d      	ble.n	8005b7e <localtime_r+0x136>
 8005b62:	3301      	adds	r3, #1
 8005b64:	2b0c      	cmp	r3, #12
 8005b66:	eba2 0201 	sub.w	r2, r2, r1
 8005b6a:	60e2      	str	r2, [r4, #12]
 8005b6c:	bf05      	ittet	eq
 8005b6e:	2200      	moveq	r2, #0
 8005b70:	6963      	ldreq	r3, [r4, #20]
 8005b72:	6123      	strne	r3, [r4, #16]
 8005b74:	3301      	addeq	r3, #1
 8005b76:	bf02      	ittt	eq
 8005b78:	6122      	streq	r2, [r4, #16]
 8005b7a:	6163      	streq	r3, [r4, #20]
 8005b7c:	61e2      	streq	r2, [r4, #28]
 8005b7e:	f000 f9fe 	bl	8005f7e <__tz_unlock>
 8005b82:	4620      	mov	r0, r4
 8005b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b88:	2300      	movs	r3, #0
 8005b8a:	e7ad      	b.n	8005ae8 <localtime_r+0xa0>
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	dacb      	bge.n	8005b28 <localtime_r+0xe0>
 8005b90:	3901      	subs	r1, #1
 8005b92:	6061      	str	r1, [r4, #4]
 8005b94:	333c      	adds	r3, #60	; 0x3c
 8005b96:	e7c6      	b.n	8005b26 <localtime_r+0xde>
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	dacc      	bge.n	8005b36 <localtime_r+0xee>
 8005b9c:	3a01      	subs	r2, #1
 8005b9e:	60a2      	str	r2, [r4, #8]
 8005ba0:	333c      	adds	r3, #60	; 0x3c
 8005ba2:	e7c7      	b.n	8005b34 <localtime_r+0xec>
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	daea      	bge.n	8005b7e <localtime_r+0x136>
 8005ba8:	69e2      	ldr	r2, [r4, #28]
 8005baa:	3318      	adds	r3, #24
 8005bac:	3a01      	subs	r2, #1
 8005bae:	61e2      	str	r2, [r4, #28]
 8005bb0:	69a2      	ldr	r2, [r4, #24]
 8005bb2:	60a3      	str	r3, [r4, #8]
 8005bb4:	3a01      	subs	r2, #1
 8005bb6:	bf48      	it	mi
 8005bb8:	2206      	movmi	r2, #6
 8005bba:	61a2      	str	r2, [r4, #24]
 8005bbc:	68e2      	ldr	r2, [r4, #12]
 8005bbe:	3a01      	subs	r2, #1
 8005bc0:	60e2      	str	r2, [r4, #12]
 8005bc2:	2a00      	cmp	r2, #0
 8005bc4:	d1db      	bne.n	8005b7e <localtime_r+0x136>
 8005bc6:	6923      	ldr	r3, [r4, #16]
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	d405      	bmi.n	8005bd8 <localtime_r+0x190>
 8005bcc:	6123      	str	r3, [r4, #16]
 8005bce:	6923      	ldr	r3, [r4, #16]
 8005bd0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8005bd4:	60e3      	str	r3, [r4, #12]
 8005bd6:	e7d2      	b.n	8005b7e <localtime_r+0x136>
 8005bd8:	230b      	movs	r3, #11
 8005bda:	6962      	ldr	r2, [r4, #20]
 8005bdc:	6123      	str	r3, [r4, #16]
 8005bde:	1e51      	subs	r1, r2, #1
 8005be0:	078b      	lsls	r3, r1, #30
 8005be2:	6161      	str	r1, [r4, #20]
 8005be4:	f202 726b 	addw	r2, r2, #1899	; 0x76b
 8005be8:	d105      	bne.n	8005bf6 <localtime_r+0x1ae>
 8005bea:	2164      	movs	r1, #100	; 0x64
 8005bec:	fb92 f3f1 	sdiv	r3, r2, r1
 8005bf0:	fb01 2313 	mls	r3, r1, r3, r2
 8005bf4:	b963      	cbnz	r3, 8005c10 <localtime_r+0x1c8>
 8005bf6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005bfa:	fb92 f3f1 	sdiv	r3, r2, r1
 8005bfe:	fb01 2313 	mls	r3, r1, r3, r2
 8005c02:	fab3 f383 	clz	r3, r3
 8005c06:	095b      	lsrs	r3, r3, #5
 8005c08:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8005c0c:	61e3      	str	r3, [r4, #28]
 8005c0e:	e7de      	b.n	8005bce <localtime_r+0x186>
 8005c10:	2301      	movs	r3, #1
 8005c12:	e7f9      	b.n	8005c08 <localtime_r+0x1c0>
 8005c14:	080076dc 	.word	0x080076dc
 8005c18:	200002e8 	.word	0x200002e8

08005c1c <malloc>:
 8005c1c:	4b02      	ldr	r3, [pc, #8]	; (8005c28 <malloc+0xc>)
 8005c1e:	4601      	mov	r1, r0
 8005c20:	6818      	ldr	r0, [r3, #0]
 8005c22:	f000 b85f 	b.w	8005ce4 <_malloc_r>
 8005c26:	bf00      	nop
 8005c28:	20000064 	.word	0x20000064

08005c2c <free>:
 8005c2c:	4b02      	ldr	r3, [pc, #8]	; (8005c38 <free+0xc>)
 8005c2e:	4601      	mov	r1, r0
 8005c30:	6818      	ldr	r0, [r3, #0]
 8005c32:	f000 b80b 	b.w	8005c4c <_free_r>
 8005c36:	bf00      	nop
 8005c38:	20000064 	.word	0x20000064

08005c3c <memset>:
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	4402      	add	r2, r0
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d100      	bne.n	8005c46 <memset+0xa>
 8005c44:	4770      	bx	lr
 8005c46:	f803 1b01 	strb.w	r1, [r3], #1
 8005c4a:	e7f9      	b.n	8005c40 <memset+0x4>

08005c4c <_free_r>:
 8005c4c:	b538      	push	{r3, r4, r5, lr}
 8005c4e:	4605      	mov	r5, r0
 8005c50:	2900      	cmp	r1, #0
 8005c52:	d043      	beq.n	8005cdc <_free_r+0x90>
 8005c54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c58:	1f0c      	subs	r4, r1, #4
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	bfb8      	it	lt
 8005c5e:	18e4      	addlt	r4, r4, r3
 8005c60:	f000 fc18 	bl	8006494 <__malloc_lock>
 8005c64:	4a1e      	ldr	r2, [pc, #120]	; (8005ce0 <_free_r+0x94>)
 8005c66:	6813      	ldr	r3, [r2, #0]
 8005c68:	4610      	mov	r0, r2
 8005c6a:	b933      	cbnz	r3, 8005c7a <_free_r+0x2e>
 8005c6c:	6063      	str	r3, [r4, #4]
 8005c6e:	6014      	str	r4, [r2, #0]
 8005c70:	4628      	mov	r0, r5
 8005c72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c76:	f000 bc0e 	b.w	8006496 <__malloc_unlock>
 8005c7a:	42a3      	cmp	r3, r4
 8005c7c:	d90b      	bls.n	8005c96 <_free_r+0x4a>
 8005c7e:	6821      	ldr	r1, [r4, #0]
 8005c80:	1862      	adds	r2, r4, r1
 8005c82:	4293      	cmp	r3, r2
 8005c84:	bf01      	itttt	eq
 8005c86:	681a      	ldreq	r2, [r3, #0]
 8005c88:	685b      	ldreq	r3, [r3, #4]
 8005c8a:	1852      	addeq	r2, r2, r1
 8005c8c:	6022      	streq	r2, [r4, #0]
 8005c8e:	6063      	str	r3, [r4, #4]
 8005c90:	6004      	str	r4, [r0, #0]
 8005c92:	e7ed      	b.n	8005c70 <_free_r+0x24>
 8005c94:	4613      	mov	r3, r2
 8005c96:	685a      	ldr	r2, [r3, #4]
 8005c98:	b10a      	cbz	r2, 8005c9e <_free_r+0x52>
 8005c9a:	42a2      	cmp	r2, r4
 8005c9c:	d9fa      	bls.n	8005c94 <_free_r+0x48>
 8005c9e:	6819      	ldr	r1, [r3, #0]
 8005ca0:	1858      	adds	r0, r3, r1
 8005ca2:	42a0      	cmp	r0, r4
 8005ca4:	d10b      	bne.n	8005cbe <_free_r+0x72>
 8005ca6:	6820      	ldr	r0, [r4, #0]
 8005ca8:	4401      	add	r1, r0
 8005caa:	1858      	adds	r0, r3, r1
 8005cac:	4282      	cmp	r2, r0
 8005cae:	6019      	str	r1, [r3, #0]
 8005cb0:	d1de      	bne.n	8005c70 <_free_r+0x24>
 8005cb2:	6810      	ldr	r0, [r2, #0]
 8005cb4:	6852      	ldr	r2, [r2, #4]
 8005cb6:	4401      	add	r1, r0
 8005cb8:	6019      	str	r1, [r3, #0]
 8005cba:	605a      	str	r2, [r3, #4]
 8005cbc:	e7d8      	b.n	8005c70 <_free_r+0x24>
 8005cbe:	d902      	bls.n	8005cc6 <_free_r+0x7a>
 8005cc0:	230c      	movs	r3, #12
 8005cc2:	602b      	str	r3, [r5, #0]
 8005cc4:	e7d4      	b.n	8005c70 <_free_r+0x24>
 8005cc6:	6820      	ldr	r0, [r4, #0]
 8005cc8:	1821      	adds	r1, r4, r0
 8005cca:	428a      	cmp	r2, r1
 8005ccc:	bf01      	itttt	eq
 8005cce:	6811      	ldreq	r1, [r2, #0]
 8005cd0:	6852      	ldreq	r2, [r2, #4]
 8005cd2:	1809      	addeq	r1, r1, r0
 8005cd4:	6021      	streq	r1, [r4, #0]
 8005cd6:	6062      	str	r2, [r4, #4]
 8005cd8:	605c      	str	r4, [r3, #4]
 8005cda:	e7c9      	b.n	8005c70 <_free_r+0x24>
 8005cdc:	bd38      	pop	{r3, r4, r5, pc}
 8005cde:	bf00      	nop
 8005ce0:	200002c4 	.word	0x200002c4

08005ce4 <_malloc_r>:
 8005ce4:	b570      	push	{r4, r5, r6, lr}
 8005ce6:	1ccd      	adds	r5, r1, #3
 8005ce8:	f025 0503 	bic.w	r5, r5, #3
 8005cec:	3508      	adds	r5, #8
 8005cee:	2d0c      	cmp	r5, #12
 8005cf0:	bf38      	it	cc
 8005cf2:	250c      	movcc	r5, #12
 8005cf4:	2d00      	cmp	r5, #0
 8005cf6:	4606      	mov	r6, r0
 8005cf8:	db01      	blt.n	8005cfe <_malloc_r+0x1a>
 8005cfa:	42a9      	cmp	r1, r5
 8005cfc:	d903      	bls.n	8005d06 <_malloc_r+0x22>
 8005cfe:	230c      	movs	r3, #12
 8005d00:	6033      	str	r3, [r6, #0]
 8005d02:	2000      	movs	r0, #0
 8005d04:	bd70      	pop	{r4, r5, r6, pc}
 8005d06:	f000 fbc5 	bl	8006494 <__malloc_lock>
 8005d0a:	4a21      	ldr	r2, [pc, #132]	; (8005d90 <_malloc_r+0xac>)
 8005d0c:	6814      	ldr	r4, [r2, #0]
 8005d0e:	4621      	mov	r1, r4
 8005d10:	b991      	cbnz	r1, 8005d38 <_malloc_r+0x54>
 8005d12:	4c20      	ldr	r4, [pc, #128]	; (8005d94 <_malloc_r+0xb0>)
 8005d14:	6823      	ldr	r3, [r4, #0]
 8005d16:	b91b      	cbnz	r3, 8005d20 <_malloc_r+0x3c>
 8005d18:	4630      	mov	r0, r6
 8005d1a:	f000 f83d 	bl	8005d98 <_sbrk_r>
 8005d1e:	6020      	str	r0, [r4, #0]
 8005d20:	4629      	mov	r1, r5
 8005d22:	4630      	mov	r0, r6
 8005d24:	f000 f838 	bl	8005d98 <_sbrk_r>
 8005d28:	1c43      	adds	r3, r0, #1
 8005d2a:	d124      	bne.n	8005d76 <_malloc_r+0x92>
 8005d2c:	230c      	movs	r3, #12
 8005d2e:	4630      	mov	r0, r6
 8005d30:	6033      	str	r3, [r6, #0]
 8005d32:	f000 fbb0 	bl	8006496 <__malloc_unlock>
 8005d36:	e7e4      	b.n	8005d02 <_malloc_r+0x1e>
 8005d38:	680b      	ldr	r3, [r1, #0]
 8005d3a:	1b5b      	subs	r3, r3, r5
 8005d3c:	d418      	bmi.n	8005d70 <_malloc_r+0x8c>
 8005d3e:	2b0b      	cmp	r3, #11
 8005d40:	d90f      	bls.n	8005d62 <_malloc_r+0x7e>
 8005d42:	600b      	str	r3, [r1, #0]
 8005d44:	18cc      	adds	r4, r1, r3
 8005d46:	50cd      	str	r5, [r1, r3]
 8005d48:	4630      	mov	r0, r6
 8005d4a:	f000 fba4 	bl	8006496 <__malloc_unlock>
 8005d4e:	f104 000b 	add.w	r0, r4, #11
 8005d52:	1d23      	adds	r3, r4, #4
 8005d54:	f020 0007 	bic.w	r0, r0, #7
 8005d58:	1ac3      	subs	r3, r0, r3
 8005d5a:	d0d3      	beq.n	8005d04 <_malloc_r+0x20>
 8005d5c:	425a      	negs	r2, r3
 8005d5e:	50e2      	str	r2, [r4, r3]
 8005d60:	e7d0      	b.n	8005d04 <_malloc_r+0x20>
 8005d62:	684b      	ldr	r3, [r1, #4]
 8005d64:	428c      	cmp	r4, r1
 8005d66:	bf16      	itet	ne
 8005d68:	6063      	strne	r3, [r4, #4]
 8005d6a:	6013      	streq	r3, [r2, #0]
 8005d6c:	460c      	movne	r4, r1
 8005d6e:	e7eb      	b.n	8005d48 <_malloc_r+0x64>
 8005d70:	460c      	mov	r4, r1
 8005d72:	6849      	ldr	r1, [r1, #4]
 8005d74:	e7cc      	b.n	8005d10 <_malloc_r+0x2c>
 8005d76:	1cc4      	adds	r4, r0, #3
 8005d78:	f024 0403 	bic.w	r4, r4, #3
 8005d7c:	42a0      	cmp	r0, r4
 8005d7e:	d005      	beq.n	8005d8c <_malloc_r+0xa8>
 8005d80:	1a21      	subs	r1, r4, r0
 8005d82:	4630      	mov	r0, r6
 8005d84:	f000 f808 	bl	8005d98 <_sbrk_r>
 8005d88:	3001      	adds	r0, #1
 8005d8a:	d0cf      	beq.n	8005d2c <_malloc_r+0x48>
 8005d8c:	6025      	str	r5, [r4, #0]
 8005d8e:	e7db      	b.n	8005d48 <_malloc_r+0x64>
 8005d90:	200002c4 	.word	0x200002c4
 8005d94:	200002c8 	.word	0x200002c8

08005d98 <_sbrk_r>:
 8005d98:	b538      	push	{r3, r4, r5, lr}
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	4c05      	ldr	r4, [pc, #20]	; (8005db4 <_sbrk_r+0x1c>)
 8005d9e:	4605      	mov	r5, r0
 8005da0:	4608      	mov	r0, r1
 8005da2:	6023      	str	r3, [r4, #0]
 8005da4:	f7fc ff76 	bl	8002c94 <_sbrk>
 8005da8:	1c43      	adds	r3, r0, #1
 8005daa:	d102      	bne.n	8005db2 <_sbrk_r+0x1a>
 8005dac:	6823      	ldr	r3, [r4, #0]
 8005dae:	b103      	cbz	r3, 8005db2 <_sbrk_r+0x1a>
 8005db0:	602b      	str	r3, [r5, #0]
 8005db2:	bd38      	pop	{r3, r4, r5, pc}
 8005db4:	200004c8 	.word	0x200004c8

08005db8 <siprintf>:
 8005db8:	b40e      	push	{r1, r2, r3}
 8005dba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005dbe:	b500      	push	{lr}
 8005dc0:	b09c      	sub	sp, #112	; 0x70
 8005dc2:	ab1d      	add	r3, sp, #116	; 0x74
 8005dc4:	9002      	str	r0, [sp, #8]
 8005dc6:	9006      	str	r0, [sp, #24]
 8005dc8:	9107      	str	r1, [sp, #28]
 8005dca:	9104      	str	r1, [sp, #16]
 8005dcc:	4808      	ldr	r0, [pc, #32]	; (8005df0 <siprintf+0x38>)
 8005dce:	4909      	ldr	r1, [pc, #36]	; (8005df4 <siprintf+0x3c>)
 8005dd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dd4:	9105      	str	r1, [sp, #20]
 8005dd6:	6800      	ldr	r0, [r0, #0]
 8005dd8:	a902      	add	r1, sp, #8
 8005dda:	9301      	str	r3, [sp, #4]
 8005ddc:	f000 fbb6 	bl	800654c <_svfiprintf_r>
 8005de0:	2200      	movs	r2, #0
 8005de2:	9b02      	ldr	r3, [sp, #8]
 8005de4:	701a      	strb	r2, [r3, #0]
 8005de6:	b01c      	add	sp, #112	; 0x70
 8005de8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005dec:	b003      	add	sp, #12
 8005dee:	4770      	bx	lr
 8005df0:	20000064 	.word	0x20000064
 8005df4:	ffff0208 	.word	0xffff0208

08005df8 <time>:
 8005df8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005dfa:	4b0b      	ldr	r3, [pc, #44]	; (8005e28 <time+0x30>)
 8005dfc:	4604      	mov	r4, r0
 8005dfe:	2200      	movs	r2, #0
 8005e00:	4669      	mov	r1, sp
 8005e02:	6818      	ldr	r0, [r3, #0]
 8005e04:	f000 fa84 	bl	8006310 <_gettimeofday_r>
 8005e08:	2800      	cmp	r0, #0
 8005e0a:	da05      	bge.n	8005e18 <time+0x20>
 8005e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e10:	f04f 33ff 	mov.w	r3, #4294967295
 8005e14:	e9cd 2300 	strd	r2, r3, [sp]
 8005e18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e1c:	b10c      	cbz	r4, 8005e22 <time+0x2a>
 8005e1e:	e9c4 0100 	strd	r0, r1, [r4]
 8005e22:	b004      	add	sp, #16
 8005e24:	bd10      	pop	{r4, pc}
 8005e26:	bf00      	nop
 8005e28:	20000064 	.word	0x20000064

08005e2c <__tzcalc_limits>:
 8005e2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e30:	4680      	mov	r8, r0
 8005e32:	f000 fa7f 	bl	8006334 <__gettzinfo>
 8005e36:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8005e3a:	4598      	cmp	r8, r3
 8005e3c:	f340 8097 	ble.w	8005f6e <__tzcalc_limits+0x142>
 8005e40:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8005e44:	f240 126d 	movw	r2, #365	; 0x16d
 8005e48:	4443      	add	r3, r8
 8005e4a:	109b      	asrs	r3, r3, #2
 8005e4c:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8005e50:	fb02 3505 	mla	r5, r2, r5, r3
 8005e54:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8005e58:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8005e5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e60:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8005e64:	441d      	add	r5, r3
 8005e66:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8005e6a:	4442      	add	r2, r8
 8005e6c:	fb92 f2f3 	sdiv	r2, r2, r3
 8005e70:	fb98 f7f3 	sdiv	r7, r8, r3
 8005e74:	4415      	add	r5, r2
 8005e76:	2264      	movs	r2, #100	; 0x64
 8005e78:	fb03 8717 	mls	r7, r3, r7, r8
 8005e7c:	fb98 f6f2 	sdiv	r6, r8, r2
 8005e80:	fab7 fc87 	clz	ip, r7
 8005e84:	4604      	mov	r4, r0
 8005e86:	f04f 0e07 	mov.w	lr, #7
 8005e8a:	fb02 8616 	mls	r6, r2, r6, r8
 8005e8e:	f008 0303 	and.w	r3, r8, #3
 8005e92:	f8c0 8004 	str.w	r8, [r0, #4]
 8005e96:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8005e9a:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8005e9e:	9300      	str	r3, [sp, #0]
 8005ea0:	7a22      	ldrb	r2, [r4, #8]
 8005ea2:	6963      	ldr	r3, [r4, #20]
 8005ea4:	2a4a      	cmp	r2, #74	; 0x4a
 8005ea6:	d128      	bne.n	8005efa <__tzcalc_limits+0xce>
 8005ea8:	9900      	ldr	r1, [sp, #0]
 8005eaa:	18ea      	adds	r2, r5, r3
 8005eac:	b901      	cbnz	r1, 8005eb0 <__tzcalc_limits+0x84>
 8005eae:	b906      	cbnz	r6, 8005eb2 <__tzcalc_limits+0x86>
 8005eb0:	bb0f      	cbnz	r7, 8005ef6 <__tzcalc_limits+0xca>
 8005eb2:	2b3b      	cmp	r3, #59	; 0x3b
 8005eb4:	bfd4      	ite	le
 8005eb6:	2300      	movle	r3, #0
 8005eb8:	2301      	movgt	r3, #1
 8005eba:	4413      	add	r3, r2
 8005ebc:	1e5a      	subs	r2, r3, #1
 8005ebe:	69a3      	ldr	r3, [r4, #24]
 8005ec0:	492c      	ldr	r1, [pc, #176]	; (8005f74 <__tzcalc_limits+0x148>)
 8005ec2:	3428      	adds	r4, #40	; 0x28
 8005ec4:	fb01 3202 	mla	r2, r1, r2, r3
 8005ec8:	6823      	ldr	r3, [r4, #0]
 8005eca:	4413      	add	r3, r2
 8005ecc:	461a      	mov	r2, r3
 8005ece:	17db      	asrs	r3, r3, #31
 8005ed0:	e944 2302 	strd	r2, r3, [r4, #-8]
 8005ed4:	45a3      	cmp	fp, r4
 8005ed6:	d1e3      	bne.n	8005ea0 <__tzcalc_limits+0x74>
 8005ed8:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8005edc:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8005ee0:	4294      	cmp	r4, r2
 8005ee2:	eb75 0303 	sbcs.w	r3, r5, r3
 8005ee6:	bfb4      	ite	lt
 8005ee8:	2301      	movlt	r3, #1
 8005eea:	2300      	movge	r3, #0
 8005eec:	6003      	str	r3, [r0, #0]
 8005eee:	2001      	movs	r0, #1
 8005ef0:	b003      	add	sp, #12
 8005ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	e7df      	b.n	8005eba <__tzcalc_limits+0x8e>
 8005efa:	2a44      	cmp	r2, #68	; 0x44
 8005efc:	d101      	bne.n	8005f02 <__tzcalc_limits+0xd6>
 8005efe:	18ea      	adds	r2, r5, r3
 8005f00:	e7dd      	b.n	8005ebe <__tzcalc_limits+0x92>
 8005f02:	9a00      	ldr	r2, [sp, #0]
 8005f04:	bb6a      	cbnz	r2, 8005f62 <__tzcalc_limits+0x136>
 8005f06:	2e00      	cmp	r6, #0
 8005f08:	bf0c      	ite	eq
 8005f0a:	46e1      	moveq	r9, ip
 8005f0c:	f04f 0901 	movne.w	r9, #1
 8005f10:	2230      	movs	r2, #48	; 0x30
 8005f12:	fb02 f909 	mul.w	r9, r2, r9
 8005f16:	68e2      	ldr	r2, [r4, #12]
 8005f18:	f04f 0800 	mov.w	r8, #0
 8005f1c:	9201      	str	r2, [sp, #4]
 8005f1e:	462a      	mov	r2, r5
 8005f20:	f108 0801 	add.w	r8, r8, #1
 8005f24:	4914      	ldr	r1, [pc, #80]	; (8005f78 <__tzcalc_limits+0x14c>)
 8005f26:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
 8005f2a:	448a      	add	sl, r1
 8005f2c:	9901      	ldr	r1, [sp, #4]
 8005f2e:	f85a ac04 	ldr.w	sl, [sl, #-4]
 8005f32:	4541      	cmp	r1, r8
 8005f34:	dc17      	bgt.n	8005f66 <__tzcalc_limits+0x13a>
 8005f36:	f102 0804 	add.w	r8, r2, #4
 8005f3a:	fb98 f9fe 	sdiv	r9, r8, lr
 8005f3e:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8005f42:	eba8 0909 	sub.w	r9, r8, r9
 8005f46:	ebb3 0909 	subs.w	r9, r3, r9
 8005f4a:	6923      	ldr	r3, [r4, #16]
 8005f4c:	bf48      	it	mi
 8005f4e:	f109 0907 	addmi.w	r9, r9, #7
 8005f52:	3b01      	subs	r3, #1
 8005f54:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005f58:	444b      	add	r3, r9
 8005f5a:	4553      	cmp	r3, sl
 8005f5c:	da05      	bge.n	8005f6a <__tzcalc_limits+0x13e>
 8005f5e:	441a      	add	r2, r3
 8005f60:	e7ad      	b.n	8005ebe <__tzcalc_limits+0x92>
 8005f62:	46e1      	mov	r9, ip
 8005f64:	e7d4      	b.n	8005f10 <__tzcalc_limits+0xe4>
 8005f66:	4452      	add	r2, sl
 8005f68:	e7da      	b.n	8005f20 <__tzcalc_limits+0xf4>
 8005f6a:	3b07      	subs	r3, #7
 8005f6c:	e7f5      	b.n	8005f5a <__tzcalc_limits+0x12e>
 8005f6e:	2000      	movs	r0, #0
 8005f70:	e7be      	b.n	8005ef0 <__tzcalc_limits+0xc4>
 8005f72:	bf00      	nop
 8005f74:	00015180 	.word	0x00015180
 8005f78:	080076dc 	.word	0x080076dc

08005f7c <__tz_lock>:
 8005f7c:	4770      	bx	lr

08005f7e <__tz_unlock>:
 8005f7e:	4770      	bx	lr

08005f80 <_tzset_unlocked>:
 8005f80:	4b01      	ldr	r3, [pc, #4]	; (8005f88 <_tzset_unlocked+0x8>)
 8005f82:	6818      	ldr	r0, [r3, #0]
 8005f84:	f000 b802 	b.w	8005f8c <_tzset_unlocked_r>
 8005f88:	20000064 	.word	0x20000064

08005f8c <_tzset_unlocked_r>:
 8005f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f90:	b08d      	sub	sp, #52	; 0x34
 8005f92:	4607      	mov	r7, r0
 8005f94:	f000 f9ce 	bl	8006334 <__gettzinfo>
 8005f98:	49af      	ldr	r1, [pc, #700]	; (8006258 <_tzset_unlocked_r+0x2cc>)
 8005f9a:	4605      	mov	r5, r0
 8005f9c:	4638      	mov	r0, r7
 8005f9e:	f000 f9af 	bl	8006300 <_getenv_r>
 8005fa2:	4eae      	ldr	r6, [pc, #696]	; (800625c <_tzset_unlocked_r+0x2d0>)
 8005fa4:	4604      	mov	r4, r0
 8005fa6:	b970      	cbnz	r0, 8005fc6 <_tzset_unlocked_r+0x3a>
 8005fa8:	4bad      	ldr	r3, [pc, #692]	; (8006260 <_tzset_unlocked_r+0x2d4>)
 8005faa:	4aae      	ldr	r2, [pc, #696]	; (8006264 <_tzset_unlocked_r+0x2d8>)
 8005fac:	6018      	str	r0, [r3, #0]
 8005fae:	4bae      	ldr	r3, [pc, #696]	; (8006268 <_tzset_unlocked_r+0x2dc>)
 8005fb0:	6018      	str	r0, [r3, #0]
 8005fb2:	4bae      	ldr	r3, [pc, #696]	; (800626c <_tzset_unlocked_r+0x2e0>)
 8005fb4:	6830      	ldr	r0, [r6, #0]
 8005fb6:	e9c3 2200 	strd	r2, r2, [r3]
 8005fba:	f7ff fe37 	bl	8005c2c <free>
 8005fbe:	6034      	str	r4, [r6, #0]
 8005fc0:	b00d      	add	sp, #52	; 0x34
 8005fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fc6:	6831      	ldr	r1, [r6, #0]
 8005fc8:	2900      	cmp	r1, #0
 8005fca:	d15f      	bne.n	800608c <_tzset_unlocked_r+0x100>
 8005fcc:	6830      	ldr	r0, [r6, #0]
 8005fce:	f7ff fe2d 	bl	8005c2c <free>
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	f7fa f8c6 	bl	8000164 <strlen>
 8005fd8:	1c41      	adds	r1, r0, #1
 8005fda:	4638      	mov	r0, r7
 8005fdc:	f7ff fe82 	bl	8005ce4 <_malloc_r>
 8005fe0:	6030      	str	r0, [r6, #0]
 8005fe2:	2800      	cmp	r0, #0
 8005fe4:	d157      	bne.n	8006096 <_tzset_unlocked_r+0x10a>
 8005fe6:	7823      	ldrb	r3, [r4, #0]
 8005fe8:	ae0a      	add	r6, sp, #40	; 0x28
 8005fea:	2b3a      	cmp	r3, #58	; 0x3a
 8005fec:	bf08      	it	eq
 8005fee:	3401      	addeq	r4, #1
 8005ff0:	4633      	mov	r3, r6
 8005ff2:	4a9f      	ldr	r2, [pc, #636]	; (8006270 <_tzset_unlocked_r+0x2e4>)
 8005ff4:	499f      	ldr	r1, [pc, #636]	; (8006274 <_tzset_unlocked_r+0x2e8>)
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	f000 fd28 	bl	8006a4c <siscanf>
 8005ffc:	2800      	cmp	r0, #0
 8005ffe:	dddf      	ble.n	8005fc0 <_tzset_unlocked_r+0x34>
 8006000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006002:	18e7      	adds	r7, r4, r3
 8006004:	5ce3      	ldrb	r3, [r4, r3]
 8006006:	2b2d      	cmp	r3, #45	; 0x2d
 8006008:	d149      	bne.n	800609e <_tzset_unlocked_r+0x112>
 800600a:	f04f 34ff 	mov.w	r4, #4294967295
 800600e:	3701      	adds	r7, #1
 8006010:	f04f 0800 	mov.w	r8, #0
 8006014:	f10d 0a20 	add.w	sl, sp, #32
 8006018:	f10d 0b1e 	add.w	fp, sp, #30
 800601c:	9603      	str	r6, [sp, #12]
 800601e:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8006022:	f8cd b000 	str.w	fp, [sp]
 8006026:	4633      	mov	r3, r6
 8006028:	aa07      	add	r2, sp, #28
 800602a:	4993      	ldr	r1, [pc, #588]	; (8006278 <_tzset_unlocked_r+0x2ec>)
 800602c:	4638      	mov	r0, r7
 800602e:	f8ad 801e 	strh.w	r8, [sp, #30]
 8006032:	f8ad 8020 	strh.w	r8, [sp, #32]
 8006036:	f000 fd09 	bl	8006a4c <siscanf>
 800603a:	4540      	cmp	r0, r8
 800603c:	ddc0      	ble.n	8005fc0 <_tzset_unlocked_r+0x34>
 800603e:	213c      	movs	r1, #60	; 0x3c
 8006040:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8006044:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8006048:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8006284 <_tzset_unlocked_r+0x2f8>
 800604c:	fb01 2203 	mla	r2, r1, r3, r2
 8006050:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8006054:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8006058:	fb01 2303 	mla	r3, r1, r3, r2
 800605c:	435c      	muls	r4, r3
 800605e:	4b84      	ldr	r3, [pc, #528]	; (8006270 <_tzset_unlocked_r+0x2e4>)
 8006060:	62ac      	str	r4, [r5, #40]	; 0x28
 8006062:	4c82      	ldr	r4, [pc, #520]	; (800626c <_tzset_unlocked_r+0x2e0>)
 8006064:	464a      	mov	r2, r9
 8006066:	6023      	str	r3, [r4, #0]
 8006068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800606a:	4982      	ldr	r1, [pc, #520]	; (8006274 <_tzset_unlocked_r+0x2e8>)
 800606c:	441f      	add	r7, r3
 800606e:	4638      	mov	r0, r7
 8006070:	4633      	mov	r3, r6
 8006072:	f000 fceb 	bl	8006a4c <siscanf>
 8006076:	4540      	cmp	r0, r8
 8006078:	dc16      	bgt.n	80060a8 <_tzset_unlocked_r+0x11c>
 800607a:	6823      	ldr	r3, [r4, #0]
 800607c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800607e:	6063      	str	r3, [r4, #4]
 8006080:	4b77      	ldr	r3, [pc, #476]	; (8006260 <_tzset_unlocked_r+0x2d4>)
 8006082:	601a      	str	r2, [r3, #0]
 8006084:	4b78      	ldr	r3, [pc, #480]	; (8006268 <_tzset_unlocked_r+0x2dc>)
 8006086:	f8c3 8000 	str.w	r8, [r3]
 800608a:	e799      	b.n	8005fc0 <_tzset_unlocked_r+0x34>
 800608c:	f7fa f860 	bl	8000150 <strcmp>
 8006090:	2800      	cmp	r0, #0
 8006092:	d095      	beq.n	8005fc0 <_tzset_unlocked_r+0x34>
 8006094:	e79a      	b.n	8005fcc <_tzset_unlocked_r+0x40>
 8006096:	4621      	mov	r1, r4
 8006098:	f000 fd04 	bl	8006aa4 <strcpy>
 800609c:	e7a3      	b.n	8005fe6 <_tzset_unlocked_r+0x5a>
 800609e:	2b2b      	cmp	r3, #43	; 0x2b
 80060a0:	bf08      	it	eq
 80060a2:	3701      	addeq	r7, #1
 80060a4:	2401      	movs	r4, #1
 80060a6:	e7b3      	b.n	8006010 <_tzset_unlocked_r+0x84>
 80060a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060aa:	f8c4 9004 	str.w	r9, [r4, #4]
 80060ae:	18fc      	adds	r4, r7, r3
 80060b0:	5cfb      	ldrb	r3, [r7, r3]
 80060b2:	2b2d      	cmp	r3, #45	; 0x2d
 80060b4:	f040 808c 	bne.w	80061d0 <_tzset_unlocked_r+0x244>
 80060b8:	f04f 37ff 	mov.w	r7, #4294967295
 80060bc:	3401      	adds	r4, #1
 80060be:	2300      	movs	r3, #0
 80060c0:	e9cd a602 	strd	sl, r6, [sp, #8]
 80060c4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80060c8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80060cc:	f8ad 3020 	strh.w	r3, [sp, #32]
 80060d0:	930a      	str	r3, [sp, #40]	; 0x28
 80060d2:	e9cd b600 	strd	fp, r6, [sp]
 80060d6:	4633      	mov	r3, r6
 80060d8:	aa07      	add	r2, sp, #28
 80060da:	4967      	ldr	r1, [pc, #412]	; (8006278 <_tzset_unlocked_r+0x2ec>)
 80060dc:	4620      	mov	r0, r4
 80060de:	f000 fcb5 	bl	8006a4c <siscanf>
 80060e2:	2800      	cmp	r0, #0
 80060e4:	dc79      	bgt.n	80061da <_tzset_unlocked_r+0x24e>
 80060e6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80060e8:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80060ec:	652b      	str	r3, [r5, #80]	; 0x50
 80060ee:	462f      	mov	r7, r5
 80060f0:	f04f 0900 	mov.w	r9, #0
 80060f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060f6:	441c      	add	r4, r3
 80060f8:	7823      	ldrb	r3, [r4, #0]
 80060fa:	2b2c      	cmp	r3, #44	; 0x2c
 80060fc:	bf08      	it	eq
 80060fe:	3401      	addeq	r4, #1
 8006100:	f894 8000 	ldrb.w	r8, [r4]
 8006104:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8006108:	d17a      	bne.n	8006200 <_tzset_unlocked_r+0x274>
 800610a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800610e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8006112:	ab09      	add	r3, sp, #36	; 0x24
 8006114:	9300      	str	r3, [sp, #0]
 8006116:	9603      	str	r6, [sp, #12]
 8006118:	4633      	mov	r3, r6
 800611a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800611e:	4957      	ldr	r1, [pc, #348]	; (800627c <_tzset_unlocked_r+0x2f0>)
 8006120:	4620      	mov	r0, r4
 8006122:	f000 fc93 	bl	8006a4c <siscanf>
 8006126:	2803      	cmp	r0, #3
 8006128:	f47f af4a 	bne.w	8005fc0 <_tzset_unlocked_r+0x34>
 800612c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8006130:	1e4b      	subs	r3, r1, #1
 8006132:	2b0b      	cmp	r3, #11
 8006134:	f63f af44 	bhi.w	8005fc0 <_tzset_unlocked_r+0x34>
 8006138:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800613c:	1e53      	subs	r3, r2, #1
 800613e:	2b04      	cmp	r3, #4
 8006140:	f63f af3e 	bhi.w	8005fc0 <_tzset_unlocked_r+0x34>
 8006144:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8006148:	2b06      	cmp	r3, #6
 800614a:	f63f af39 	bhi.w	8005fc0 <_tzset_unlocked_r+0x34>
 800614e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8006152:	f887 8008 	strb.w	r8, [r7, #8]
 8006156:	617b      	str	r3, [r7, #20]
 8006158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800615a:	eb04 0803 	add.w	r8, r4, r3
 800615e:	2302      	movs	r3, #2
 8006160:	f8ad 301c 	strh.w	r3, [sp, #28]
 8006164:	2300      	movs	r3, #0
 8006166:	f8ad 301e 	strh.w	r3, [sp, #30]
 800616a:	f8ad 3020 	strh.w	r3, [sp, #32]
 800616e:	930a      	str	r3, [sp, #40]	; 0x28
 8006170:	f898 3000 	ldrb.w	r3, [r8]
 8006174:	2b2f      	cmp	r3, #47	; 0x2f
 8006176:	d109      	bne.n	800618c <_tzset_unlocked_r+0x200>
 8006178:	e9cd a602 	strd	sl, r6, [sp, #8]
 800617c:	e9cd b600 	strd	fp, r6, [sp]
 8006180:	4633      	mov	r3, r6
 8006182:	aa07      	add	r2, sp, #28
 8006184:	493e      	ldr	r1, [pc, #248]	; (8006280 <_tzset_unlocked_r+0x2f4>)
 8006186:	4640      	mov	r0, r8
 8006188:	f000 fc60 	bl	8006a4c <siscanf>
 800618c:	213c      	movs	r1, #60	; 0x3c
 800618e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8006192:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8006196:	3728      	adds	r7, #40	; 0x28
 8006198:	fb01 2203 	mla	r2, r1, r3, r2
 800619c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80061a0:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80061a4:	fb01 2303 	mla	r3, r1, r3, r2
 80061a8:	f847 3c10 	str.w	r3, [r7, #-16]
 80061ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80061ae:	4444      	add	r4, r8
 80061b0:	f1b9 0f00 	cmp.w	r9, #0
 80061b4:	d021      	beq.n	80061fa <_tzset_unlocked_r+0x26e>
 80061b6:	6868      	ldr	r0, [r5, #4]
 80061b8:	f7ff fe38 	bl	8005e2c <__tzcalc_limits>
 80061bc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80061be:	4b28      	ldr	r3, [pc, #160]	; (8006260 <_tzset_unlocked_r+0x2d4>)
 80061c0:	601a      	str	r2, [r3, #0]
 80061c2:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80061c4:	1a9b      	subs	r3, r3, r2
 80061c6:	bf18      	it	ne
 80061c8:	2301      	movne	r3, #1
 80061ca:	4a27      	ldr	r2, [pc, #156]	; (8006268 <_tzset_unlocked_r+0x2dc>)
 80061cc:	6013      	str	r3, [r2, #0]
 80061ce:	e6f7      	b.n	8005fc0 <_tzset_unlocked_r+0x34>
 80061d0:	2b2b      	cmp	r3, #43	; 0x2b
 80061d2:	bf08      	it	eq
 80061d4:	3401      	addeq	r4, #1
 80061d6:	2701      	movs	r7, #1
 80061d8:	e771      	b.n	80060be <_tzset_unlocked_r+0x132>
 80061da:	213c      	movs	r1, #60	; 0x3c
 80061dc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80061e0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80061e4:	fb01 2203 	mla	r2, r1, r3, r2
 80061e8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80061ec:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80061f0:	fb01 2303 	mla	r3, r1, r3, r2
 80061f4:	435f      	muls	r7, r3
 80061f6:	652f      	str	r7, [r5, #80]	; 0x50
 80061f8:	e779      	b.n	80060ee <_tzset_unlocked_r+0x162>
 80061fa:	f04f 0901 	mov.w	r9, #1
 80061fe:	e77b      	b.n	80060f8 <_tzset_unlocked_r+0x16c>
 8006200:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8006204:	bf0a      	itet	eq
 8006206:	4643      	moveq	r3, r8
 8006208:	2344      	movne	r3, #68	; 0x44
 800620a:	3401      	addeq	r4, #1
 800620c:	220a      	movs	r2, #10
 800620e:	a90b      	add	r1, sp, #44	; 0x2c
 8006210:	4620      	mov	r0, r4
 8006212:	9305      	str	r3, [sp, #20]
 8006214:	f000 fcec 	bl	8006bf0 <strtoul>
 8006218:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800621c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8006220:	45a0      	cmp	r8, r4
 8006222:	9b05      	ldr	r3, [sp, #20]
 8006224:	d114      	bne.n	8006250 <_tzset_unlocked_r+0x2c4>
 8006226:	234d      	movs	r3, #77	; 0x4d
 8006228:	f1b9 0f00 	cmp.w	r9, #0
 800622c:	d107      	bne.n	800623e <_tzset_unlocked_r+0x2b2>
 800622e:	722b      	strb	r3, [r5, #8]
 8006230:	2103      	movs	r1, #3
 8006232:	2302      	movs	r3, #2
 8006234:	f8c5 9014 	str.w	r9, [r5, #20]
 8006238:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800623c:	e78f      	b.n	800615e <_tzset_unlocked_r+0x1d2>
 800623e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8006242:	220b      	movs	r2, #11
 8006244:	2301      	movs	r3, #1
 8006246:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800624a:	2300      	movs	r3, #0
 800624c:	63eb      	str	r3, [r5, #60]	; 0x3c
 800624e:	e786      	b.n	800615e <_tzset_unlocked_r+0x1d2>
 8006250:	b280      	uxth	r0, r0
 8006252:	723b      	strb	r3, [r7, #8]
 8006254:	6178      	str	r0, [r7, #20]
 8006256:	e782      	b.n	800615e <_tzset_unlocked_r+0x1d2>
 8006258:	0800773c 	.word	0x0800773c
 800625c:	200002e4 	.word	0x200002e4
 8006260:	200002ec 	.word	0x200002ec
 8006264:	0800773f 	.word	0x0800773f
 8006268:	200002e8 	.word	0x200002e8
 800626c:	200000c8 	.word	0x200000c8
 8006270:	200002d7 	.word	0x200002d7
 8006274:	08007743 	.word	0x08007743
 8006278:	08007766 	.word	0x08007766
 800627c:	08007752 	.word	0x08007752
 8006280:	08007765 	.word	0x08007765
 8006284:	200002cc 	.word	0x200002cc

08006288 <_findenv_r>:
 8006288:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800628c:	4607      	mov	r7, r0
 800628e:	468b      	mov	fp, r1
 8006290:	4690      	mov	r8, r2
 8006292:	f000 fcc3 	bl	8006c1c <__env_lock>
 8006296:	4b19      	ldr	r3, [pc, #100]	; (80062fc <_findenv_r+0x74>)
 8006298:	681d      	ldr	r5, [r3, #0]
 800629a:	469a      	mov	sl, r3
 800629c:	b13d      	cbz	r5, 80062ae <_findenv_r+0x26>
 800629e:	465c      	mov	r4, fp
 80062a0:	4623      	mov	r3, r4
 80062a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062a6:	b32a      	cbz	r2, 80062f4 <_findenv_r+0x6c>
 80062a8:	2a3d      	cmp	r2, #61	; 0x3d
 80062aa:	461c      	mov	r4, r3
 80062ac:	d1f8      	bne.n	80062a0 <_findenv_r+0x18>
 80062ae:	4638      	mov	r0, r7
 80062b0:	f000 fcb5 	bl	8006c1e <__env_unlock>
 80062b4:	2000      	movs	r0, #0
 80062b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ba:	464d      	mov	r5, r9
 80062bc:	46a9      	mov	r9, r5
 80062be:	f859 0b04 	ldr.w	r0, [r9], #4
 80062c2:	2800      	cmp	r0, #0
 80062c4:	d0f3      	beq.n	80062ae <_findenv_r+0x26>
 80062c6:	4622      	mov	r2, r4
 80062c8:	4659      	mov	r1, fp
 80062ca:	f000 fbf3 	bl	8006ab4 <strncmp>
 80062ce:	2800      	cmp	r0, #0
 80062d0:	d1f3      	bne.n	80062ba <_findenv_r+0x32>
 80062d2:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80062d6:	191e      	adds	r6, r3, r4
 80062d8:	5d1b      	ldrb	r3, [r3, r4]
 80062da:	2b3d      	cmp	r3, #61	; 0x3d
 80062dc:	d1ed      	bne.n	80062ba <_findenv_r+0x32>
 80062de:	f8da 3000 	ldr.w	r3, [sl]
 80062e2:	4638      	mov	r0, r7
 80062e4:	1aed      	subs	r5, r5, r3
 80062e6:	10ad      	asrs	r5, r5, #2
 80062e8:	f8c8 5000 	str.w	r5, [r8]
 80062ec:	f000 fc97 	bl	8006c1e <__env_unlock>
 80062f0:	1c70      	adds	r0, r6, #1
 80062f2:	e7e0      	b.n	80062b6 <_findenv_r+0x2e>
 80062f4:	eba4 040b 	sub.w	r4, r4, fp
 80062f8:	e7e0      	b.n	80062bc <_findenv_r+0x34>
 80062fa:	bf00      	nop
 80062fc:	20000054 	.word	0x20000054

08006300 <_getenv_r>:
 8006300:	b507      	push	{r0, r1, r2, lr}
 8006302:	aa01      	add	r2, sp, #4
 8006304:	f7ff ffc0 	bl	8006288 <_findenv_r>
 8006308:	b003      	add	sp, #12
 800630a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08006310 <_gettimeofday_r>:
 8006310:	b538      	push	{r3, r4, r5, lr}
 8006312:	2300      	movs	r3, #0
 8006314:	4c06      	ldr	r4, [pc, #24]	; (8006330 <_gettimeofday_r+0x20>)
 8006316:	4605      	mov	r5, r0
 8006318:	4608      	mov	r0, r1
 800631a:	4611      	mov	r1, r2
 800631c:	6023      	str	r3, [r4, #0]
 800631e:	f001 f909 	bl	8007534 <_gettimeofday>
 8006322:	1c43      	adds	r3, r0, #1
 8006324:	d102      	bne.n	800632c <_gettimeofday_r+0x1c>
 8006326:	6823      	ldr	r3, [r4, #0]
 8006328:	b103      	cbz	r3, 800632c <_gettimeofday_r+0x1c>
 800632a:	602b      	str	r3, [r5, #0]
 800632c:	bd38      	pop	{r3, r4, r5, pc}
 800632e:	bf00      	nop
 8006330:	200004c8 	.word	0x200004c8

08006334 <__gettzinfo>:
 8006334:	4800      	ldr	r0, [pc, #0]	; (8006338 <__gettzinfo+0x4>)
 8006336:	4770      	bx	lr
 8006338:	200000d0 	.word	0x200000d0

0800633c <gmtime_r>:
 800633c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006340:	e9d0 8900 	ldrd	r8, r9, [r0]
 8006344:	460c      	mov	r4, r1
 8006346:	4a4f      	ldr	r2, [pc, #316]	; (8006484 <gmtime_r+0x148>)
 8006348:	2300      	movs	r3, #0
 800634a:	4640      	mov	r0, r8
 800634c:	4649      	mov	r1, r9
 800634e:	f7fa fe49 	bl	8000fe4 <__aeabi_ldivmod>
 8006352:	4a4c      	ldr	r2, [pc, #304]	; (8006484 <gmtime_r+0x148>)
 8006354:	f500 262f 	add.w	r6, r0, #716800	; 0xaf000
 8006358:	2300      	movs	r3, #0
 800635a:	4640      	mov	r0, r8
 800635c:	4649      	mov	r1, r9
 800635e:	f7fa fe41 	bl	8000fe4 <__aeabi_ldivmod>
 8006362:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8006366:	2a00      	cmp	r2, #0
 8006368:	bfbc      	itt	lt
 800636a:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800636e:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8006372:	fb92 f3f1 	sdiv	r3, r2, r1
 8006376:	fb01 2213 	mls	r2, r1, r3, r2
 800637a:	f04f 013c 	mov.w	r1, #60	; 0x3c
 800637e:	60a3      	str	r3, [r4, #8]
 8006380:	fb92 f3f1 	sdiv	r3, r2, r1
 8006384:	fb01 2213 	mls	r2, r1, r3, r2
 8006388:	6022      	str	r2, [r4, #0]
 800638a:	f04f 0207 	mov.w	r2, #7
 800638e:	f606 256c 	addw	r5, r6, #2668	; 0xa6c
 8006392:	bfb8      	it	lt
 8006394:	f606 256b 	addwlt	r5, r6, #2667	; 0xa6b
 8006398:	6063      	str	r3, [r4, #4]
 800639a:	1ceb      	adds	r3, r5, #3
 800639c:	fb93 f2f2 	sdiv	r2, r3, r2
 80063a0:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80063a4:	1a9b      	subs	r3, r3, r2
 80063a6:	bf48      	it	mi
 80063a8:	3307      	addmi	r3, #7
 80063aa:	2d00      	cmp	r5, #0
 80063ac:	4836      	ldr	r0, [pc, #216]	; (8006488 <gmtime_r+0x14c>)
 80063ae:	61a3      	str	r3, [r4, #24]
 80063b0:	bfbd      	ittte	lt
 80063b2:	f5a5 330e 	sublt.w	r3, r5, #145408	; 0x23800
 80063b6:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 80063ba:	fb93 f0f0 	sdivlt	r0, r3, r0
 80063be:	fb95 f0f0 	sdivge	r0, r5, r0
 80063c2:	f648 61ac 	movw	r1, #36524	; 0x8eac
 80063c6:	f240 57b4 	movw	r7, #1460	; 0x5b4
 80063ca:	4b30      	ldr	r3, [pc, #192]	; (800648c <gmtime_r+0x150>)
 80063cc:	f240 166d 	movw	r6, #365	; 0x16d
 80063d0:	fb03 5300 	mla	r3, r3, r0, r5
 80063d4:	fbb3 f1f1 	udiv	r1, r3, r1
 80063d8:	fbb3 f2f7 	udiv	r2, r3, r7
 80063dc:	4419      	add	r1, r3
 80063de:	1a89      	subs	r1, r1, r2
 80063e0:	4a2b      	ldr	r2, [pc, #172]	; (8006490 <gmtime_r+0x154>)
 80063e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80063e6:	1a8a      	subs	r2, r1, r2
 80063e8:	f648 6194 	movw	r1, #36500	; 0x8e94
 80063ec:	fbb2 f1f1 	udiv	r1, r2, r1
 80063f0:	fbb2 f5f6 	udiv	r5, r2, r6
 80063f4:	fbb2 f2f7 	udiv	r2, r2, r7
 80063f8:	440b      	add	r3, r1
 80063fa:	2199      	movs	r1, #153	; 0x99
 80063fc:	1a9a      	subs	r2, r3, r2
 80063fe:	fb06 2315 	mls	r3, r6, r5, r2
 8006402:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006406:	3202      	adds	r2, #2
 8006408:	fbb2 f2f1 	udiv	r2, r2, r1
 800640c:	2705      	movs	r7, #5
 800640e:	4351      	muls	r1, r2
 8006410:	3102      	adds	r1, #2
 8006412:	fbb1 f1f7 	udiv	r1, r1, r7
 8006416:	2a0a      	cmp	r2, #10
 8006418:	f103 0601 	add.w	r6, r3, #1
 800641c:	eba6 0101 	sub.w	r1, r6, r1
 8006420:	bf34      	ite	cc
 8006422:	2602      	movcc	r6, #2
 8006424:	f06f 0609 	mvncs.w	r6, #9
 8006428:	4416      	add	r6, r2
 800642a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800642e:	fb02 5000 	mla	r0, r2, r0, r5
 8006432:	2e01      	cmp	r6, #1
 8006434:	bf98      	it	ls
 8006436:	3001      	addls	r0, #1
 8006438:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800643c:	d30c      	bcc.n	8006458 <gmtime_r+0x11c>
 800643e:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8006442:	61e3      	str	r3, [r4, #28]
 8006444:	2300      	movs	r3, #0
 8006446:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
 800644a:	e9c4 6004 	strd	r6, r0, [r4, #16]
 800644e:	60e1      	str	r1, [r4, #12]
 8006450:	6223      	str	r3, [r4, #32]
 8006452:	4620      	mov	r0, r4
 8006454:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006458:	07aa      	lsls	r2, r5, #30
 800645a:	d105      	bne.n	8006468 <gmtime_r+0x12c>
 800645c:	2764      	movs	r7, #100	; 0x64
 800645e:	fbb5 f2f7 	udiv	r2, r5, r7
 8006462:	fb07 5212 	mls	r2, r7, r2, r5
 8006466:	b95a      	cbnz	r2, 8006480 <gmtime_r+0x144>
 8006468:	f44f 77c8 	mov.w	r7, #400	; 0x190
 800646c:	fbb5 f2f7 	udiv	r2, r5, r7
 8006470:	fb07 5212 	mls	r2, r7, r2, r5
 8006474:	fab2 f282 	clz	r2, r2
 8006478:	0952      	lsrs	r2, r2, #5
 800647a:	333b      	adds	r3, #59	; 0x3b
 800647c:	4413      	add	r3, r2
 800647e:	e7e0      	b.n	8006442 <gmtime_r+0x106>
 8006480:	2201      	movs	r2, #1
 8006482:	e7fa      	b.n	800647a <gmtime_r+0x13e>
 8006484:	00015180 	.word	0x00015180
 8006488:	00023ab1 	.word	0x00023ab1
 800648c:	fffdc54f 	.word	0xfffdc54f
 8006490:	00023ab0 	.word	0x00023ab0

08006494 <__malloc_lock>:
 8006494:	4770      	bx	lr

08006496 <__malloc_unlock>:
 8006496:	4770      	bx	lr

08006498 <__ssputs_r>:
 8006498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800649c:	688e      	ldr	r6, [r1, #8]
 800649e:	4682      	mov	sl, r0
 80064a0:	429e      	cmp	r6, r3
 80064a2:	460c      	mov	r4, r1
 80064a4:	4690      	mov	r8, r2
 80064a6:	4699      	mov	r9, r3
 80064a8:	d837      	bhi.n	800651a <__ssputs_r+0x82>
 80064aa:	898a      	ldrh	r2, [r1, #12]
 80064ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80064b0:	d031      	beq.n	8006516 <__ssputs_r+0x7e>
 80064b2:	2302      	movs	r3, #2
 80064b4:	6825      	ldr	r5, [r4, #0]
 80064b6:	6909      	ldr	r1, [r1, #16]
 80064b8:	1a6f      	subs	r7, r5, r1
 80064ba:	6965      	ldr	r5, [r4, #20]
 80064bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064c0:	fb95 f5f3 	sdiv	r5, r5, r3
 80064c4:	f109 0301 	add.w	r3, r9, #1
 80064c8:	443b      	add	r3, r7
 80064ca:	429d      	cmp	r5, r3
 80064cc:	bf38      	it	cc
 80064ce:	461d      	movcc	r5, r3
 80064d0:	0553      	lsls	r3, r2, #21
 80064d2:	d530      	bpl.n	8006536 <__ssputs_r+0x9e>
 80064d4:	4629      	mov	r1, r5
 80064d6:	f7ff fc05 	bl	8005ce4 <_malloc_r>
 80064da:	4606      	mov	r6, r0
 80064dc:	b950      	cbnz	r0, 80064f4 <__ssputs_r+0x5c>
 80064de:	230c      	movs	r3, #12
 80064e0:	f04f 30ff 	mov.w	r0, #4294967295
 80064e4:	f8ca 3000 	str.w	r3, [sl]
 80064e8:	89a3      	ldrh	r3, [r4, #12]
 80064ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064ee:	81a3      	strh	r3, [r4, #12]
 80064f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064f4:	463a      	mov	r2, r7
 80064f6:	6921      	ldr	r1, [r4, #16]
 80064f8:	f000 fbc4 	bl	8006c84 <memcpy>
 80064fc:	89a3      	ldrh	r3, [r4, #12]
 80064fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006506:	81a3      	strh	r3, [r4, #12]
 8006508:	6126      	str	r6, [r4, #16]
 800650a:	443e      	add	r6, r7
 800650c:	6026      	str	r6, [r4, #0]
 800650e:	464e      	mov	r6, r9
 8006510:	6165      	str	r5, [r4, #20]
 8006512:	1bed      	subs	r5, r5, r7
 8006514:	60a5      	str	r5, [r4, #8]
 8006516:	454e      	cmp	r6, r9
 8006518:	d900      	bls.n	800651c <__ssputs_r+0x84>
 800651a:	464e      	mov	r6, r9
 800651c:	4632      	mov	r2, r6
 800651e:	4641      	mov	r1, r8
 8006520:	6820      	ldr	r0, [r4, #0]
 8006522:	f000 fbba 	bl	8006c9a <memmove>
 8006526:	68a3      	ldr	r3, [r4, #8]
 8006528:	2000      	movs	r0, #0
 800652a:	1b9b      	subs	r3, r3, r6
 800652c:	60a3      	str	r3, [r4, #8]
 800652e:	6823      	ldr	r3, [r4, #0]
 8006530:	441e      	add	r6, r3
 8006532:	6026      	str	r6, [r4, #0]
 8006534:	e7dc      	b.n	80064f0 <__ssputs_r+0x58>
 8006536:	462a      	mov	r2, r5
 8006538:	f000 fbc8 	bl	8006ccc <_realloc_r>
 800653c:	4606      	mov	r6, r0
 800653e:	2800      	cmp	r0, #0
 8006540:	d1e2      	bne.n	8006508 <__ssputs_r+0x70>
 8006542:	6921      	ldr	r1, [r4, #16]
 8006544:	4650      	mov	r0, sl
 8006546:	f7ff fb81 	bl	8005c4c <_free_r>
 800654a:	e7c8      	b.n	80064de <__ssputs_r+0x46>

0800654c <_svfiprintf_r>:
 800654c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006550:	461d      	mov	r5, r3
 8006552:	898b      	ldrh	r3, [r1, #12]
 8006554:	b09d      	sub	sp, #116	; 0x74
 8006556:	061f      	lsls	r7, r3, #24
 8006558:	4680      	mov	r8, r0
 800655a:	460c      	mov	r4, r1
 800655c:	4616      	mov	r6, r2
 800655e:	d50f      	bpl.n	8006580 <_svfiprintf_r+0x34>
 8006560:	690b      	ldr	r3, [r1, #16]
 8006562:	b96b      	cbnz	r3, 8006580 <_svfiprintf_r+0x34>
 8006564:	2140      	movs	r1, #64	; 0x40
 8006566:	f7ff fbbd 	bl	8005ce4 <_malloc_r>
 800656a:	6020      	str	r0, [r4, #0]
 800656c:	6120      	str	r0, [r4, #16]
 800656e:	b928      	cbnz	r0, 800657c <_svfiprintf_r+0x30>
 8006570:	230c      	movs	r3, #12
 8006572:	f8c8 3000 	str.w	r3, [r8]
 8006576:	f04f 30ff 	mov.w	r0, #4294967295
 800657a:	e0c8      	b.n	800670e <_svfiprintf_r+0x1c2>
 800657c:	2340      	movs	r3, #64	; 0x40
 800657e:	6163      	str	r3, [r4, #20]
 8006580:	2300      	movs	r3, #0
 8006582:	9309      	str	r3, [sp, #36]	; 0x24
 8006584:	2320      	movs	r3, #32
 8006586:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800658a:	2330      	movs	r3, #48	; 0x30
 800658c:	f04f 0b01 	mov.w	fp, #1
 8006590:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006594:	9503      	str	r5, [sp, #12]
 8006596:	4637      	mov	r7, r6
 8006598:	463d      	mov	r5, r7
 800659a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800659e:	b10b      	cbz	r3, 80065a4 <_svfiprintf_r+0x58>
 80065a0:	2b25      	cmp	r3, #37	; 0x25
 80065a2:	d13e      	bne.n	8006622 <_svfiprintf_r+0xd6>
 80065a4:	ebb7 0a06 	subs.w	sl, r7, r6
 80065a8:	d00b      	beq.n	80065c2 <_svfiprintf_r+0x76>
 80065aa:	4653      	mov	r3, sl
 80065ac:	4632      	mov	r2, r6
 80065ae:	4621      	mov	r1, r4
 80065b0:	4640      	mov	r0, r8
 80065b2:	f7ff ff71 	bl	8006498 <__ssputs_r>
 80065b6:	3001      	adds	r0, #1
 80065b8:	f000 80a4 	beq.w	8006704 <_svfiprintf_r+0x1b8>
 80065bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065be:	4453      	add	r3, sl
 80065c0:	9309      	str	r3, [sp, #36]	; 0x24
 80065c2:	783b      	ldrb	r3, [r7, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f000 809d 	beq.w	8006704 <_svfiprintf_r+0x1b8>
 80065ca:	2300      	movs	r3, #0
 80065cc:	f04f 32ff 	mov.w	r2, #4294967295
 80065d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065d4:	9304      	str	r3, [sp, #16]
 80065d6:	9307      	str	r3, [sp, #28]
 80065d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065dc:	931a      	str	r3, [sp, #104]	; 0x68
 80065de:	462f      	mov	r7, r5
 80065e0:	2205      	movs	r2, #5
 80065e2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80065e6:	4850      	ldr	r0, [pc, #320]	; (8006728 <_svfiprintf_r+0x1dc>)
 80065e8:	f000 fb3e 	bl	8006c68 <memchr>
 80065ec:	9b04      	ldr	r3, [sp, #16]
 80065ee:	b9d0      	cbnz	r0, 8006626 <_svfiprintf_r+0xda>
 80065f0:	06d9      	lsls	r1, r3, #27
 80065f2:	bf44      	itt	mi
 80065f4:	2220      	movmi	r2, #32
 80065f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80065fa:	071a      	lsls	r2, r3, #28
 80065fc:	bf44      	itt	mi
 80065fe:	222b      	movmi	r2, #43	; 0x2b
 8006600:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006604:	782a      	ldrb	r2, [r5, #0]
 8006606:	2a2a      	cmp	r2, #42	; 0x2a
 8006608:	d015      	beq.n	8006636 <_svfiprintf_r+0xea>
 800660a:	462f      	mov	r7, r5
 800660c:	2000      	movs	r0, #0
 800660e:	250a      	movs	r5, #10
 8006610:	9a07      	ldr	r2, [sp, #28]
 8006612:	4639      	mov	r1, r7
 8006614:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006618:	3b30      	subs	r3, #48	; 0x30
 800661a:	2b09      	cmp	r3, #9
 800661c:	d94d      	bls.n	80066ba <_svfiprintf_r+0x16e>
 800661e:	b1b8      	cbz	r0, 8006650 <_svfiprintf_r+0x104>
 8006620:	e00f      	b.n	8006642 <_svfiprintf_r+0xf6>
 8006622:	462f      	mov	r7, r5
 8006624:	e7b8      	b.n	8006598 <_svfiprintf_r+0x4c>
 8006626:	4a40      	ldr	r2, [pc, #256]	; (8006728 <_svfiprintf_r+0x1dc>)
 8006628:	463d      	mov	r5, r7
 800662a:	1a80      	subs	r0, r0, r2
 800662c:	fa0b f000 	lsl.w	r0, fp, r0
 8006630:	4318      	orrs	r0, r3
 8006632:	9004      	str	r0, [sp, #16]
 8006634:	e7d3      	b.n	80065de <_svfiprintf_r+0x92>
 8006636:	9a03      	ldr	r2, [sp, #12]
 8006638:	1d11      	adds	r1, r2, #4
 800663a:	6812      	ldr	r2, [r2, #0]
 800663c:	9103      	str	r1, [sp, #12]
 800663e:	2a00      	cmp	r2, #0
 8006640:	db01      	blt.n	8006646 <_svfiprintf_r+0xfa>
 8006642:	9207      	str	r2, [sp, #28]
 8006644:	e004      	b.n	8006650 <_svfiprintf_r+0x104>
 8006646:	4252      	negs	r2, r2
 8006648:	f043 0302 	orr.w	r3, r3, #2
 800664c:	9207      	str	r2, [sp, #28]
 800664e:	9304      	str	r3, [sp, #16]
 8006650:	783b      	ldrb	r3, [r7, #0]
 8006652:	2b2e      	cmp	r3, #46	; 0x2e
 8006654:	d10c      	bne.n	8006670 <_svfiprintf_r+0x124>
 8006656:	787b      	ldrb	r3, [r7, #1]
 8006658:	2b2a      	cmp	r3, #42	; 0x2a
 800665a:	d133      	bne.n	80066c4 <_svfiprintf_r+0x178>
 800665c:	9b03      	ldr	r3, [sp, #12]
 800665e:	3702      	adds	r7, #2
 8006660:	1d1a      	adds	r2, r3, #4
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	9203      	str	r2, [sp, #12]
 8006666:	2b00      	cmp	r3, #0
 8006668:	bfb8      	it	lt
 800666a:	f04f 33ff 	movlt.w	r3, #4294967295
 800666e:	9305      	str	r3, [sp, #20]
 8006670:	4d2e      	ldr	r5, [pc, #184]	; (800672c <_svfiprintf_r+0x1e0>)
 8006672:	2203      	movs	r2, #3
 8006674:	7839      	ldrb	r1, [r7, #0]
 8006676:	4628      	mov	r0, r5
 8006678:	f000 faf6 	bl	8006c68 <memchr>
 800667c:	b138      	cbz	r0, 800668e <_svfiprintf_r+0x142>
 800667e:	2340      	movs	r3, #64	; 0x40
 8006680:	1b40      	subs	r0, r0, r5
 8006682:	fa03 f000 	lsl.w	r0, r3, r0
 8006686:	9b04      	ldr	r3, [sp, #16]
 8006688:	3701      	adds	r7, #1
 800668a:	4303      	orrs	r3, r0
 800668c:	9304      	str	r3, [sp, #16]
 800668e:	7839      	ldrb	r1, [r7, #0]
 8006690:	2206      	movs	r2, #6
 8006692:	4827      	ldr	r0, [pc, #156]	; (8006730 <_svfiprintf_r+0x1e4>)
 8006694:	1c7e      	adds	r6, r7, #1
 8006696:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800669a:	f000 fae5 	bl	8006c68 <memchr>
 800669e:	2800      	cmp	r0, #0
 80066a0:	d038      	beq.n	8006714 <_svfiprintf_r+0x1c8>
 80066a2:	4b24      	ldr	r3, [pc, #144]	; (8006734 <_svfiprintf_r+0x1e8>)
 80066a4:	bb13      	cbnz	r3, 80066ec <_svfiprintf_r+0x1a0>
 80066a6:	9b03      	ldr	r3, [sp, #12]
 80066a8:	3307      	adds	r3, #7
 80066aa:	f023 0307 	bic.w	r3, r3, #7
 80066ae:	3308      	adds	r3, #8
 80066b0:	9303      	str	r3, [sp, #12]
 80066b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066b4:	444b      	add	r3, r9
 80066b6:	9309      	str	r3, [sp, #36]	; 0x24
 80066b8:	e76d      	b.n	8006596 <_svfiprintf_r+0x4a>
 80066ba:	fb05 3202 	mla	r2, r5, r2, r3
 80066be:	2001      	movs	r0, #1
 80066c0:	460f      	mov	r7, r1
 80066c2:	e7a6      	b.n	8006612 <_svfiprintf_r+0xc6>
 80066c4:	2300      	movs	r3, #0
 80066c6:	250a      	movs	r5, #10
 80066c8:	4619      	mov	r1, r3
 80066ca:	3701      	adds	r7, #1
 80066cc:	9305      	str	r3, [sp, #20]
 80066ce:	4638      	mov	r0, r7
 80066d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066d4:	3a30      	subs	r2, #48	; 0x30
 80066d6:	2a09      	cmp	r2, #9
 80066d8:	d903      	bls.n	80066e2 <_svfiprintf_r+0x196>
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d0c8      	beq.n	8006670 <_svfiprintf_r+0x124>
 80066de:	9105      	str	r1, [sp, #20]
 80066e0:	e7c6      	b.n	8006670 <_svfiprintf_r+0x124>
 80066e2:	fb05 2101 	mla	r1, r5, r1, r2
 80066e6:	2301      	movs	r3, #1
 80066e8:	4607      	mov	r7, r0
 80066ea:	e7f0      	b.n	80066ce <_svfiprintf_r+0x182>
 80066ec:	ab03      	add	r3, sp, #12
 80066ee:	9300      	str	r3, [sp, #0]
 80066f0:	4622      	mov	r2, r4
 80066f2:	4b11      	ldr	r3, [pc, #68]	; (8006738 <_svfiprintf_r+0x1ec>)
 80066f4:	a904      	add	r1, sp, #16
 80066f6:	4640      	mov	r0, r8
 80066f8:	f3af 8000 	nop.w
 80066fc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006700:	4681      	mov	r9, r0
 8006702:	d1d6      	bne.n	80066b2 <_svfiprintf_r+0x166>
 8006704:	89a3      	ldrh	r3, [r4, #12]
 8006706:	065b      	lsls	r3, r3, #25
 8006708:	f53f af35 	bmi.w	8006576 <_svfiprintf_r+0x2a>
 800670c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800670e:	b01d      	add	sp, #116	; 0x74
 8006710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006714:	ab03      	add	r3, sp, #12
 8006716:	9300      	str	r3, [sp, #0]
 8006718:	4622      	mov	r2, r4
 800671a:	4b07      	ldr	r3, [pc, #28]	; (8006738 <_svfiprintf_r+0x1ec>)
 800671c:	a904      	add	r1, sp, #16
 800671e:	4640      	mov	r0, r8
 8006720:	f000 f882 	bl	8006828 <_printf_i>
 8006724:	e7ea      	b.n	80066fc <_svfiprintf_r+0x1b0>
 8006726:	bf00      	nop
 8006728:	08007778 	.word	0x08007778
 800672c:	0800777e 	.word	0x0800777e
 8006730:	08007782 	.word	0x08007782
 8006734:	00000000 	.word	0x00000000
 8006738:	08006499 	.word	0x08006499

0800673c <_printf_common>:
 800673c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006740:	4691      	mov	r9, r2
 8006742:	461f      	mov	r7, r3
 8006744:	688a      	ldr	r2, [r1, #8]
 8006746:	690b      	ldr	r3, [r1, #16]
 8006748:	4606      	mov	r6, r0
 800674a:	4293      	cmp	r3, r2
 800674c:	bfb8      	it	lt
 800674e:	4613      	movlt	r3, r2
 8006750:	f8c9 3000 	str.w	r3, [r9]
 8006754:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006758:	460c      	mov	r4, r1
 800675a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800675e:	b112      	cbz	r2, 8006766 <_printf_common+0x2a>
 8006760:	3301      	adds	r3, #1
 8006762:	f8c9 3000 	str.w	r3, [r9]
 8006766:	6823      	ldr	r3, [r4, #0]
 8006768:	0699      	lsls	r1, r3, #26
 800676a:	bf42      	ittt	mi
 800676c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006770:	3302      	addmi	r3, #2
 8006772:	f8c9 3000 	strmi.w	r3, [r9]
 8006776:	6825      	ldr	r5, [r4, #0]
 8006778:	f015 0506 	ands.w	r5, r5, #6
 800677c:	d107      	bne.n	800678e <_printf_common+0x52>
 800677e:	f104 0a19 	add.w	sl, r4, #25
 8006782:	68e3      	ldr	r3, [r4, #12]
 8006784:	f8d9 2000 	ldr.w	r2, [r9]
 8006788:	1a9b      	subs	r3, r3, r2
 800678a:	42ab      	cmp	r3, r5
 800678c:	dc29      	bgt.n	80067e2 <_printf_common+0xa6>
 800678e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006792:	6822      	ldr	r2, [r4, #0]
 8006794:	3300      	adds	r3, #0
 8006796:	bf18      	it	ne
 8006798:	2301      	movne	r3, #1
 800679a:	0692      	lsls	r2, r2, #26
 800679c:	d42e      	bmi.n	80067fc <_printf_common+0xc0>
 800679e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067a2:	4639      	mov	r1, r7
 80067a4:	4630      	mov	r0, r6
 80067a6:	47c0      	blx	r8
 80067a8:	3001      	adds	r0, #1
 80067aa:	d021      	beq.n	80067f0 <_printf_common+0xb4>
 80067ac:	6823      	ldr	r3, [r4, #0]
 80067ae:	68e5      	ldr	r5, [r4, #12]
 80067b0:	f003 0306 	and.w	r3, r3, #6
 80067b4:	2b04      	cmp	r3, #4
 80067b6:	bf18      	it	ne
 80067b8:	2500      	movne	r5, #0
 80067ba:	f8d9 2000 	ldr.w	r2, [r9]
 80067be:	f04f 0900 	mov.w	r9, #0
 80067c2:	bf08      	it	eq
 80067c4:	1aad      	subeq	r5, r5, r2
 80067c6:	68a3      	ldr	r3, [r4, #8]
 80067c8:	6922      	ldr	r2, [r4, #16]
 80067ca:	bf08      	it	eq
 80067cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067d0:	4293      	cmp	r3, r2
 80067d2:	bfc4      	itt	gt
 80067d4:	1a9b      	subgt	r3, r3, r2
 80067d6:	18ed      	addgt	r5, r5, r3
 80067d8:	341a      	adds	r4, #26
 80067da:	454d      	cmp	r5, r9
 80067dc:	d11a      	bne.n	8006814 <_printf_common+0xd8>
 80067de:	2000      	movs	r0, #0
 80067e0:	e008      	b.n	80067f4 <_printf_common+0xb8>
 80067e2:	2301      	movs	r3, #1
 80067e4:	4652      	mov	r2, sl
 80067e6:	4639      	mov	r1, r7
 80067e8:	4630      	mov	r0, r6
 80067ea:	47c0      	blx	r8
 80067ec:	3001      	adds	r0, #1
 80067ee:	d103      	bne.n	80067f8 <_printf_common+0xbc>
 80067f0:	f04f 30ff 	mov.w	r0, #4294967295
 80067f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067f8:	3501      	adds	r5, #1
 80067fa:	e7c2      	b.n	8006782 <_printf_common+0x46>
 80067fc:	2030      	movs	r0, #48	; 0x30
 80067fe:	18e1      	adds	r1, r4, r3
 8006800:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006804:	1c5a      	adds	r2, r3, #1
 8006806:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800680a:	4422      	add	r2, r4
 800680c:	3302      	adds	r3, #2
 800680e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006812:	e7c4      	b.n	800679e <_printf_common+0x62>
 8006814:	2301      	movs	r3, #1
 8006816:	4622      	mov	r2, r4
 8006818:	4639      	mov	r1, r7
 800681a:	4630      	mov	r0, r6
 800681c:	47c0      	blx	r8
 800681e:	3001      	adds	r0, #1
 8006820:	d0e6      	beq.n	80067f0 <_printf_common+0xb4>
 8006822:	f109 0901 	add.w	r9, r9, #1
 8006826:	e7d8      	b.n	80067da <_printf_common+0x9e>

08006828 <_printf_i>:
 8006828:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800682c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006830:	460c      	mov	r4, r1
 8006832:	7e09      	ldrb	r1, [r1, #24]
 8006834:	b085      	sub	sp, #20
 8006836:	296e      	cmp	r1, #110	; 0x6e
 8006838:	4617      	mov	r7, r2
 800683a:	4606      	mov	r6, r0
 800683c:	4698      	mov	r8, r3
 800683e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006840:	f000 80b3 	beq.w	80069aa <_printf_i+0x182>
 8006844:	d822      	bhi.n	800688c <_printf_i+0x64>
 8006846:	2963      	cmp	r1, #99	; 0x63
 8006848:	d036      	beq.n	80068b8 <_printf_i+0x90>
 800684a:	d80a      	bhi.n	8006862 <_printf_i+0x3a>
 800684c:	2900      	cmp	r1, #0
 800684e:	f000 80b9 	beq.w	80069c4 <_printf_i+0x19c>
 8006852:	2958      	cmp	r1, #88	; 0x58
 8006854:	f000 8083 	beq.w	800695e <_printf_i+0x136>
 8006858:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800685c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006860:	e032      	b.n	80068c8 <_printf_i+0xa0>
 8006862:	2964      	cmp	r1, #100	; 0x64
 8006864:	d001      	beq.n	800686a <_printf_i+0x42>
 8006866:	2969      	cmp	r1, #105	; 0x69
 8006868:	d1f6      	bne.n	8006858 <_printf_i+0x30>
 800686a:	6820      	ldr	r0, [r4, #0]
 800686c:	6813      	ldr	r3, [r2, #0]
 800686e:	0605      	lsls	r5, r0, #24
 8006870:	f103 0104 	add.w	r1, r3, #4
 8006874:	d52a      	bpl.n	80068cc <_printf_i+0xa4>
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6011      	str	r1, [r2, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	da03      	bge.n	8006886 <_printf_i+0x5e>
 800687e:	222d      	movs	r2, #45	; 0x2d
 8006880:	425b      	negs	r3, r3
 8006882:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006886:	486f      	ldr	r0, [pc, #444]	; (8006a44 <_printf_i+0x21c>)
 8006888:	220a      	movs	r2, #10
 800688a:	e039      	b.n	8006900 <_printf_i+0xd8>
 800688c:	2973      	cmp	r1, #115	; 0x73
 800688e:	f000 809d 	beq.w	80069cc <_printf_i+0x1a4>
 8006892:	d808      	bhi.n	80068a6 <_printf_i+0x7e>
 8006894:	296f      	cmp	r1, #111	; 0x6f
 8006896:	d020      	beq.n	80068da <_printf_i+0xb2>
 8006898:	2970      	cmp	r1, #112	; 0x70
 800689a:	d1dd      	bne.n	8006858 <_printf_i+0x30>
 800689c:	6823      	ldr	r3, [r4, #0]
 800689e:	f043 0320 	orr.w	r3, r3, #32
 80068a2:	6023      	str	r3, [r4, #0]
 80068a4:	e003      	b.n	80068ae <_printf_i+0x86>
 80068a6:	2975      	cmp	r1, #117	; 0x75
 80068a8:	d017      	beq.n	80068da <_printf_i+0xb2>
 80068aa:	2978      	cmp	r1, #120	; 0x78
 80068ac:	d1d4      	bne.n	8006858 <_printf_i+0x30>
 80068ae:	2378      	movs	r3, #120	; 0x78
 80068b0:	4865      	ldr	r0, [pc, #404]	; (8006a48 <_printf_i+0x220>)
 80068b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80068b6:	e055      	b.n	8006964 <_printf_i+0x13c>
 80068b8:	6813      	ldr	r3, [r2, #0]
 80068ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068be:	1d19      	adds	r1, r3, #4
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	6011      	str	r1, [r2, #0]
 80068c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068c8:	2301      	movs	r3, #1
 80068ca:	e08c      	b.n	80069e6 <_printf_i+0x1be>
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 80068d2:	6011      	str	r1, [r2, #0]
 80068d4:	bf18      	it	ne
 80068d6:	b21b      	sxthne	r3, r3
 80068d8:	e7cf      	b.n	800687a <_printf_i+0x52>
 80068da:	6813      	ldr	r3, [r2, #0]
 80068dc:	6825      	ldr	r5, [r4, #0]
 80068de:	1d18      	adds	r0, r3, #4
 80068e0:	6010      	str	r0, [r2, #0]
 80068e2:	0628      	lsls	r0, r5, #24
 80068e4:	d501      	bpl.n	80068ea <_printf_i+0xc2>
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	e002      	b.n	80068f0 <_printf_i+0xc8>
 80068ea:	0668      	lsls	r0, r5, #25
 80068ec:	d5fb      	bpl.n	80068e6 <_printf_i+0xbe>
 80068ee:	881b      	ldrh	r3, [r3, #0]
 80068f0:	296f      	cmp	r1, #111	; 0x6f
 80068f2:	bf14      	ite	ne
 80068f4:	220a      	movne	r2, #10
 80068f6:	2208      	moveq	r2, #8
 80068f8:	4852      	ldr	r0, [pc, #328]	; (8006a44 <_printf_i+0x21c>)
 80068fa:	2100      	movs	r1, #0
 80068fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006900:	6865      	ldr	r5, [r4, #4]
 8006902:	2d00      	cmp	r5, #0
 8006904:	60a5      	str	r5, [r4, #8]
 8006906:	f2c0 8095 	blt.w	8006a34 <_printf_i+0x20c>
 800690a:	6821      	ldr	r1, [r4, #0]
 800690c:	f021 0104 	bic.w	r1, r1, #4
 8006910:	6021      	str	r1, [r4, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d13d      	bne.n	8006992 <_printf_i+0x16a>
 8006916:	2d00      	cmp	r5, #0
 8006918:	f040 808e 	bne.w	8006a38 <_printf_i+0x210>
 800691c:	4665      	mov	r5, ip
 800691e:	2a08      	cmp	r2, #8
 8006920:	d10b      	bne.n	800693a <_printf_i+0x112>
 8006922:	6823      	ldr	r3, [r4, #0]
 8006924:	07db      	lsls	r3, r3, #31
 8006926:	d508      	bpl.n	800693a <_printf_i+0x112>
 8006928:	6923      	ldr	r3, [r4, #16]
 800692a:	6862      	ldr	r2, [r4, #4]
 800692c:	429a      	cmp	r2, r3
 800692e:	bfde      	ittt	le
 8006930:	2330      	movle	r3, #48	; 0x30
 8006932:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006936:	f105 35ff 	addle.w	r5, r5, #4294967295
 800693a:	ebac 0305 	sub.w	r3, ip, r5
 800693e:	6123      	str	r3, [r4, #16]
 8006940:	f8cd 8000 	str.w	r8, [sp]
 8006944:	463b      	mov	r3, r7
 8006946:	aa03      	add	r2, sp, #12
 8006948:	4621      	mov	r1, r4
 800694a:	4630      	mov	r0, r6
 800694c:	f7ff fef6 	bl	800673c <_printf_common>
 8006950:	3001      	adds	r0, #1
 8006952:	d14d      	bne.n	80069f0 <_printf_i+0x1c8>
 8006954:	f04f 30ff 	mov.w	r0, #4294967295
 8006958:	b005      	add	sp, #20
 800695a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800695e:	4839      	ldr	r0, [pc, #228]	; (8006a44 <_printf_i+0x21c>)
 8006960:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006964:	6813      	ldr	r3, [r2, #0]
 8006966:	6821      	ldr	r1, [r4, #0]
 8006968:	1d1d      	adds	r5, r3, #4
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	6015      	str	r5, [r2, #0]
 800696e:	060a      	lsls	r2, r1, #24
 8006970:	d50b      	bpl.n	800698a <_printf_i+0x162>
 8006972:	07ca      	lsls	r2, r1, #31
 8006974:	bf44      	itt	mi
 8006976:	f041 0120 	orrmi.w	r1, r1, #32
 800697a:	6021      	strmi	r1, [r4, #0]
 800697c:	b91b      	cbnz	r3, 8006986 <_printf_i+0x15e>
 800697e:	6822      	ldr	r2, [r4, #0]
 8006980:	f022 0220 	bic.w	r2, r2, #32
 8006984:	6022      	str	r2, [r4, #0]
 8006986:	2210      	movs	r2, #16
 8006988:	e7b7      	b.n	80068fa <_printf_i+0xd2>
 800698a:	064d      	lsls	r5, r1, #25
 800698c:	bf48      	it	mi
 800698e:	b29b      	uxthmi	r3, r3
 8006990:	e7ef      	b.n	8006972 <_printf_i+0x14a>
 8006992:	4665      	mov	r5, ip
 8006994:	fbb3 f1f2 	udiv	r1, r3, r2
 8006998:	fb02 3311 	mls	r3, r2, r1, r3
 800699c:	5cc3      	ldrb	r3, [r0, r3]
 800699e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80069a2:	460b      	mov	r3, r1
 80069a4:	2900      	cmp	r1, #0
 80069a6:	d1f5      	bne.n	8006994 <_printf_i+0x16c>
 80069a8:	e7b9      	b.n	800691e <_printf_i+0xf6>
 80069aa:	6813      	ldr	r3, [r2, #0]
 80069ac:	6825      	ldr	r5, [r4, #0]
 80069ae:	1d18      	adds	r0, r3, #4
 80069b0:	6961      	ldr	r1, [r4, #20]
 80069b2:	6010      	str	r0, [r2, #0]
 80069b4:	0628      	lsls	r0, r5, #24
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	d501      	bpl.n	80069be <_printf_i+0x196>
 80069ba:	6019      	str	r1, [r3, #0]
 80069bc:	e002      	b.n	80069c4 <_printf_i+0x19c>
 80069be:	066a      	lsls	r2, r5, #25
 80069c0:	d5fb      	bpl.n	80069ba <_printf_i+0x192>
 80069c2:	8019      	strh	r1, [r3, #0]
 80069c4:	2300      	movs	r3, #0
 80069c6:	4665      	mov	r5, ip
 80069c8:	6123      	str	r3, [r4, #16]
 80069ca:	e7b9      	b.n	8006940 <_printf_i+0x118>
 80069cc:	6813      	ldr	r3, [r2, #0]
 80069ce:	1d19      	adds	r1, r3, #4
 80069d0:	6011      	str	r1, [r2, #0]
 80069d2:	681d      	ldr	r5, [r3, #0]
 80069d4:	6862      	ldr	r2, [r4, #4]
 80069d6:	2100      	movs	r1, #0
 80069d8:	4628      	mov	r0, r5
 80069da:	f000 f945 	bl	8006c68 <memchr>
 80069de:	b108      	cbz	r0, 80069e4 <_printf_i+0x1bc>
 80069e0:	1b40      	subs	r0, r0, r5
 80069e2:	6060      	str	r0, [r4, #4]
 80069e4:	6863      	ldr	r3, [r4, #4]
 80069e6:	6123      	str	r3, [r4, #16]
 80069e8:	2300      	movs	r3, #0
 80069ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069ee:	e7a7      	b.n	8006940 <_printf_i+0x118>
 80069f0:	6923      	ldr	r3, [r4, #16]
 80069f2:	462a      	mov	r2, r5
 80069f4:	4639      	mov	r1, r7
 80069f6:	4630      	mov	r0, r6
 80069f8:	47c0      	blx	r8
 80069fa:	3001      	adds	r0, #1
 80069fc:	d0aa      	beq.n	8006954 <_printf_i+0x12c>
 80069fe:	6823      	ldr	r3, [r4, #0]
 8006a00:	079b      	lsls	r3, r3, #30
 8006a02:	d413      	bmi.n	8006a2c <_printf_i+0x204>
 8006a04:	68e0      	ldr	r0, [r4, #12]
 8006a06:	9b03      	ldr	r3, [sp, #12]
 8006a08:	4298      	cmp	r0, r3
 8006a0a:	bfb8      	it	lt
 8006a0c:	4618      	movlt	r0, r3
 8006a0e:	e7a3      	b.n	8006958 <_printf_i+0x130>
 8006a10:	2301      	movs	r3, #1
 8006a12:	464a      	mov	r2, r9
 8006a14:	4639      	mov	r1, r7
 8006a16:	4630      	mov	r0, r6
 8006a18:	47c0      	blx	r8
 8006a1a:	3001      	adds	r0, #1
 8006a1c:	d09a      	beq.n	8006954 <_printf_i+0x12c>
 8006a1e:	3501      	adds	r5, #1
 8006a20:	68e3      	ldr	r3, [r4, #12]
 8006a22:	9a03      	ldr	r2, [sp, #12]
 8006a24:	1a9b      	subs	r3, r3, r2
 8006a26:	42ab      	cmp	r3, r5
 8006a28:	dcf2      	bgt.n	8006a10 <_printf_i+0x1e8>
 8006a2a:	e7eb      	b.n	8006a04 <_printf_i+0x1dc>
 8006a2c:	2500      	movs	r5, #0
 8006a2e:	f104 0919 	add.w	r9, r4, #25
 8006a32:	e7f5      	b.n	8006a20 <_printf_i+0x1f8>
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1ac      	bne.n	8006992 <_printf_i+0x16a>
 8006a38:	7803      	ldrb	r3, [r0, #0]
 8006a3a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a42:	e76c      	b.n	800691e <_printf_i+0xf6>
 8006a44:	08007789 	.word	0x08007789
 8006a48:	0800779a 	.word	0x0800779a

08006a4c <siscanf>:
 8006a4c:	b40e      	push	{r1, r2, r3}
 8006a4e:	f44f 7201 	mov.w	r2, #516	; 0x204
 8006a52:	b530      	push	{r4, r5, lr}
 8006a54:	b09c      	sub	sp, #112	; 0x70
 8006a56:	ac1f      	add	r4, sp, #124	; 0x7c
 8006a58:	f854 5b04 	ldr.w	r5, [r4], #4
 8006a5c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006a60:	9002      	str	r0, [sp, #8]
 8006a62:	9006      	str	r0, [sp, #24]
 8006a64:	f7f9 fb7e 	bl	8000164 <strlen>
 8006a68:	4b0b      	ldr	r3, [pc, #44]	; (8006a98 <siscanf+0x4c>)
 8006a6a:	9003      	str	r0, [sp, #12]
 8006a6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a6e:	2300      	movs	r3, #0
 8006a70:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a72:	9314      	str	r3, [sp, #80]	; 0x50
 8006a74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006a78:	9007      	str	r0, [sp, #28]
 8006a7a:	4808      	ldr	r0, [pc, #32]	; (8006a9c <siscanf+0x50>)
 8006a7c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006a80:	462a      	mov	r2, r5
 8006a82:	4623      	mov	r3, r4
 8006a84:	a902      	add	r1, sp, #8
 8006a86:	6800      	ldr	r0, [r0, #0]
 8006a88:	9401      	str	r4, [sp, #4]
 8006a8a:	f000 f99f 	bl	8006dcc <__ssvfiscanf_r>
 8006a8e:	b01c      	add	sp, #112	; 0x70
 8006a90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a94:	b003      	add	sp, #12
 8006a96:	4770      	bx	lr
 8006a98:	08006aa1 	.word	0x08006aa1
 8006a9c:	20000064 	.word	0x20000064

08006aa0 <__seofread>:
 8006aa0:	2000      	movs	r0, #0
 8006aa2:	4770      	bx	lr

08006aa4 <strcpy>:
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006aaa:	f803 2b01 	strb.w	r2, [r3], #1
 8006aae:	2a00      	cmp	r2, #0
 8006ab0:	d1f9      	bne.n	8006aa6 <strcpy+0x2>
 8006ab2:	4770      	bx	lr

08006ab4 <strncmp>:
 8006ab4:	b510      	push	{r4, lr}
 8006ab6:	b16a      	cbz	r2, 8006ad4 <strncmp+0x20>
 8006ab8:	3901      	subs	r1, #1
 8006aba:	1884      	adds	r4, r0, r2
 8006abc:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006ac0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d103      	bne.n	8006ad0 <strncmp+0x1c>
 8006ac8:	42a0      	cmp	r0, r4
 8006aca:	d001      	beq.n	8006ad0 <strncmp+0x1c>
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1f5      	bne.n	8006abc <strncmp+0x8>
 8006ad0:	1a98      	subs	r0, r3, r2
 8006ad2:	bd10      	pop	{r4, pc}
 8006ad4:	4610      	mov	r0, r2
 8006ad6:	e7fc      	b.n	8006ad2 <strncmp+0x1e>

08006ad8 <_strtoul_l.isra.0>:
 8006ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006adc:	4680      	mov	r8, r0
 8006ade:	4689      	mov	r9, r1
 8006ae0:	4692      	mov	sl, r2
 8006ae2:	461e      	mov	r6, r3
 8006ae4:	460f      	mov	r7, r1
 8006ae6:	463d      	mov	r5, r7
 8006ae8:	9808      	ldr	r0, [sp, #32]
 8006aea:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006aee:	f000 f897 	bl	8006c20 <__locale_ctype_ptr_l>
 8006af2:	4420      	add	r0, r4
 8006af4:	7843      	ldrb	r3, [r0, #1]
 8006af6:	f013 0308 	ands.w	r3, r3, #8
 8006afa:	d130      	bne.n	8006b5e <_strtoul_l.isra.0+0x86>
 8006afc:	2c2d      	cmp	r4, #45	; 0x2d
 8006afe:	d130      	bne.n	8006b62 <_strtoul_l.isra.0+0x8a>
 8006b00:	2101      	movs	r1, #1
 8006b02:	787c      	ldrb	r4, [r7, #1]
 8006b04:	1cbd      	adds	r5, r7, #2
 8006b06:	2e00      	cmp	r6, #0
 8006b08:	d05c      	beq.n	8006bc4 <_strtoul_l.isra.0+0xec>
 8006b0a:	2e10      	cmp	r6, #16
 8006b0c:	d109      	bne.n	8006b22 <_strtoul_l.isra.0+0x4a>
 8006b0e:	2c30      	cmp	r4, #48	; 0x30
 8006b10:	d107      	bne.n	8006b22 <_strtoul_l.isra.0+0x4a>
 8006b12:	782b      	ldrb	r3, [r5, #0]
 8006b14:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006b18:	2b58      	cmp	r3, #88	; 0x58
 8006b1a:	d14e      	bne.n	8006bba <_strtoul_l.isra.0+0xe2>
 8006b1c:	2610      	movs	r6, #16
 8006b1e:	786c      	ldrb	r4, [r5, #1]
 8006b20:	3502      	adds	r5, #2
 8006b22:	f04f 32ff 	mov.w	r2, #4294967295
 8006b26:	fbb2 f2f6 	udiv	r2, r2, r6
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	fb06 fc02 	mul.w	ip, r6, r2
 8006b30:	4618      	mov	r0, r3
 8006b32:	ea6f 0c0c 	mvn.w	ip, ip
 8006b36:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006b3a:	2f09      	cmp	r7, #9
 8006b3c:	d817      	bhi.n	8006b6e <_strtoul_l.isra.0+0x96>
 8006b3e:	463c      	mov	r4, r7
 8006b40:	42a6      	cmp	r6, r4
 8006b42:	dd23      	ble.n	8006b8c <_strtoul_l.isra.0+0xb4>
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	db1e      	blt.n	8006b86 <_strtoul_l.isra.0+0xae>
 8006b48:	4282      	cmp	r2, r0
 8006b4a:	d31c      	bcc.n	8006b86 <_strtoul_l.isra.0+0xae>
 8006b4c:	d101      	bne.n	8006b52 <_strtoul_l.isra.0+0x7a>
 8006b4e:	45a4      	cmp	ip, r4
 8006b50:	db19      	blt.n	8006b86 <_strtoul_l.isra.0+0xae>
 8006b52:	2301      	movs	r3, #1
 8006b54:	fb00 4006 	mla	r0, r0, r6, r4
 8006b58:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b5c:	e7eb      	b.n	8006b36 <_strtoul_l.isra.0+0x5e>
 8006b5e:	462f      	mov	r7, r5
 8006b60:	e7c1      	b.n	8006ae6 <_strtoul_l.isra.0+0xe>
 8006b62:	2c2b      	cmp	r4, #43	; 0x2b
 8006b64:	bf04      	itt	eq
 8006b66:	1cbd      	addeq	r5, r7, #2
 8006b68:	787c      	ldrbeq	r4, [r7, #1]
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	e7cb      	b.n	8006b06 <_strtoul_l.isra.0+0x2e>
 8006b6e:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006b72:	2f19      	cmp	r7, #25
 8006b74:	d801      	bhi.n	8006b7a <_strtoul_l.isra.0+0xa2>
 8006b76:	3c37      	subs	r4, #55	; 0x37
 8006b78:	e7e2      	b.n	8006b40 <_strtoul_l.isra.0+0x68>
 8006b7a:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006b7e:	2f19      	cmp	r7, #25
 8006b80:	d804      	bhi.n	8006b8c <_strtoul_l.isra.0+0xb4>
 8006b82:	3c57      	subs	r4, #87	; 0x57
 8006b84:	e7dc      	b.n	8006b40 <_strtoul_l.isra.0+0x68>
 8006b86:	f04f 33ff 	mov.w	r3, #4294967295
 8006b8a:	e7e5      	b.n	8006b58 <_strtoul_l.isra.0+0x80>
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	da09      	bge.n	8006ba4 <_strtoul_l.isra.0+0xcc>
 8006b90:	2322      	movs	r3, #34	; 0x22
 8006b92:	f04f 30ff 	mov.w	r0, #4294967295
 8006b96:	f8c8 3000 	str.w	r3, [r8]
 8006b9a:	f1ba 0f00 	cmp.w	sl, #0
 8006b9e:	d107      	bne.n	8006bb0 <_strtoul_l.isra.0+0xd8>
 8006ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ba4:	b101      	cbz	r1, 8006ba8 <_strtoul_l.isra.0+0xd0>
 8006ba6:	4240      	negs	r0, r0
 8006ba8:	f1ba 0f00 	cmp.w	sl, #0
 8006bac:	d0f8      	beq.n	8006ba0 <_strtoul_l.isra.0+0xc8>
 8006bae:	b10b      	cbz	r3, 8006bb4 <_strtoul_l.isra.0+0xdc>
 8006bb0:	f105 39ff 	add.w	r9, r5, #4294967295
 8006bb4:	f8ca 9000 	str.w	r9, [sl]
 8006bb8:	e7f2      	b.n	8006ba0 <_strtoul_l.isra.0+0xc8>
 8006bba:	2430      	movs	r4, #48	; 0x30
 8006bbc:	2e00      	cmp	r6, #0
 8006bbe:	d1b0      	bne.n	8006b22 <_strtoul_l.isra.0+0x4a>
 8006bc0:	2608      	movs	r6, #8
 8006bc2:	e7ae      	b.n	8006b22 <_strtoul_l.isra.0+0x4a>
 8006bc4:	2c30      	cmp	r4, #48	; 0x30
 8006bc6:	d0a4      	beq.n	8006b12 <_strtoul_l.isra.0+0x3a>
 8006bc8:	260a      	movs	r6, #10
 8006bca:	e7aa      	b.n	8006b22 <_strtoul_l.isra.0+0x4a>

08006bcc <_strtoul_r>:
 8006bcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006bce:	4c06      	ldr	r4, [pc, #24]	; (8006be8 <_strtoul_r+0x1c>)
 8006bd0:	4d06      	ldr	r5, [pc, #24]	; (8006bec <_strtoul_r+0x20>)
 8006bd2:	6824      	ldr	r4, [r4, #0]
 8006bd4:	6a24      	ldr	r4, [r4, #32]
 8006bd6:	2c00      	cmp	r4, #0
 8006bd8:	bf08      	it	eq
 8006bda:	462c      	moveq	r4, r5
 8006bdc:	9400      	str	r4, [sp, #0]
 8006bde:	f7ff ff7b 	bl	8006ad8 <_strtoul_l.isra.0>
 8006be2:	b003      	add	sp, #12
 8006be4:	bd30      	pop	{r4, r5, pc}
 8006be6:	bf00      	nop
 8006be8:	20000064 	.word	0x20000064
 8006bec:	20000128 	.word	0x20000128

08006bf0 <strtoul>:
 8006bf0:	4b08      	ldr	r3, [pc, #32]	; (8006c14 <strtoul+0x24>)
 8006bf2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006bf4:	681c      	ldr	r4, [r3, #0]
 8006bf6:	4d08      	ldr	r5, [pc, #32]	; (8006c18 <strtoul+0x28>)
 8006bf8:	6a23      	ldr	r3, [r4, #32]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	bf08      	it	eq
 8006bfe:	462b      	moveq	r3, r5
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	4613      	mov	r3, r2
 8006c04:	460a      	mov	r2, r1
 8006c06:	4601      	mov	r1, r0
 8006c08:	4620      	mov	r0, r4
 8006c0a:	f7ff ff65 	bl	8006ad8 <_strtoul_l.isra.0>
 8006c0e:	b003      	add	sp, #12
 8006c10:	bd30      	pop	{r4, r5, pc}
 8006c12:	bf00      	nop
 8006c14:	20000064 	.word	0x20000064
 8006c18:	20000128 	.word	0x20000128

08006c1c <__env_lock>:
 8006c1c:	4770      	bx	lr

08006c1e <__env_unlock>:
 8006c1e:	4770      	bx	lr

08006c20 <__locale_ctype_ptr_l>:
 8006c20:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006c24:	4770      	bx	lr
	...

08006c28 <__locale_ctype_ptr>:
 8006c28:	4b04      	ldr	r3, [pc, #16]	; (8006c3c <__locale_ctype_ptr+0x14>)
 8006c2a:	4a05      	ldr	r2, [pc, #20]	; (8006c40 <__locale_ctype_ptr+0x18>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	6a1b      	ldr	r3, [r3, #32]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	bf08      	it	eq
 8006c34:	4613      	moveq	r3, r2
 8006c36:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8006c3a:	4770      	bx	lr
 8006c3c:	20000064 	.word	0x20000064
 8006c40:	20000128 	.word	0x20000128

08006c44 <__ascii_mbtowc>:
 8006c44:	b082      	sub	sp, #8
 8006c46:	b901      	cbnz	r1, 8006c4a <__ascii_mbtowc+0x6>
 8006c48:	a901      	add	r1, sp, #4
 8006c4a:	b142      	cbz	r2, 8006c5e <__ascii_mbtowc+0x1a>
 8006c4c:	b14b      	cbz	r3, 8006c62 <__ascii_mbtowc+0x1e>
 8006c4e:	7813      	ldrb	r3, [r2, #0]
 8006c50:	600b      	str	r3, [r1, #0]
 8006c52:	7812      	ldrb	r2, [r2, #0]
 8006c54:	1c10      	adds	r0, r2, #0
 8006c56:	bf18      	it	ne
 8006c58:	2001      	movne	r0, #1
 8006c5a:	b002      	add	sp, #8
 8006c5c:	4770      	bx	lr
 8006c5e:	4610      	mov	r0, r2
 8006c60:	e7fb      	b.n	8006c5a <__ascii_mbtowc+0x16>
 8006c62:	f06f 0001 	mvn.w	r0, #1
 8006c66:	e7f8      	b.n	8006c5a <__ascii_mbtowc+0x16>

08006c68 <memchr>:
 8006c68:	b510      	push	{r4, lr}
 8006c6a:	b2c9      	uxtb	r1, r1
 8006c6c:	4402      	add	r2, r0
 8006c6e:	4290      	cmp	r0, r2
 8006c70:	4603      	mov	r3, r0
 8006c72:	d101      	bne.n	8006c78 <memchr+0x10>
 8006c74:	2300      	movs	r3, #0
 8006c76:	e003      	b.n	8006c80 <memchr+0x18>
 8006c78:	781c      	ldrb	r4, [r3, #0]
 8006c7a:	3001      	adds	r0, #1
 8006c7c:	428c      	cmp	r4, r1
 8006c7e:	d1f6      	bne.n	8006c6e <memchr+0x6>
 8006c80:	4618      	mov	r0, r3
 8006c82:	bd10      	pop	{r4, pc}

08006c84 <memcpy>:
 8006c84:	b510      	push	{r4, lr}
 8006c86:	1e43      	subs	r3, r0, #1
 8006c88:	440a      	add	r2, r1
 8006c8a:	4291      	cmp	r1, r2
 8006c8c:	d100      	bne.n	8006c90 <memcpy+0xc>
 8006c8e:	bd10      	pop	{r4, pc}
 8006c90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c98:	e7f7      	b.n	8006c8a <memcpy+0x6>

08006c9a <memmove>:
 8006c9a:	4288      	cmp	r0, r1
 8006c9c:	b510      	push	{r4, lr}
 8006c9e:	eb01 0302 	add.w	r3, r1, r2
 8006ca2:	d807      	bhi.n	8006cb4 <memmove+0x1a>
 8006ca4:	1e42      	subs	r2, r0, #1
 8006ca6:	4299      	cmp	r1, r3
 8006ca8:	d00a      	beq.n	8006cc0 <memmove+0x26>
 8006caa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cae:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006cb2:	e7f8      	b.n	8006ca6 <memmove+0xc>
 8006cb4:	4283      	cmp	r3, r0
 8006cb6:	d9f5      	bls.n	8006ca4 <memmove+0xa>
 8006cb8:	1881      	adds	r1, r0, r2
 8006cba:	1ad2      	subs	r2, r2, r3
 8006cbc:	42d3      	cmn	r3, r2
 8006cbe:	d100      	bne.n	8006cc2 <memmove+0x28>
 8006cc0:	bd10      	pop	{r4, pc}
 8006cc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006cc6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006cca:	e7f7      	b.n	8006cbc <memmove+0x22>

08006ccc <_realloc_r>:
 8006ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cce:	4607      	mov	r7, r0
 8006cd0:	4614      	mov	r4, r2
 8006cd2:	460e      	mov	r6, r1
 8006cd4:	b921      	cbnz	r1, 8006ce0 <_realloc_r+0x14>
 8006cd6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006cda:	4611      	mov	r1, r2
 8006cdc:	f7ff b802 	b.w	8005ce4 <_malloc_r>
 8006ce0:	b922      	cbnz	r2, 8006cec <_realloc_r+0x20>
 8006ce2:	f7fe ffb3 	bl	8005c4c <_free_r>
 8006ce6:	4625      	mov	r5, r4
 8006ce8:	4628      	mov	r0, r5
 8006cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cec:	f000 fc19 	bl	8007522 <_malloc_usable_size_r>
 8006cf0:	42a0      	cmp	r0, r4
 8006cf2:	d20f      	bcs.n	8006d14 <_realloc_r+0x48>
 8006cf4:	4621      	mov	r1, r4
 8006cf6:	4638      	mov	r0, r7
 8006cf8:	f7fe fff4 	bl	8005ce4 <_malloc_r>
 8006cfc:	4605      	mov	r5, r0
 8006cfe:	2800      	cmp	r0, #0
 8006d00:	d0f2      	beq.n	8006ce8 <_realloc_r+0x1c>
 8006d02:	4631      	mov	r1, r6
 8006d04:	4622      	mov	r2, r4
 8006d06:	f7ff ffbd 	bl	8006c84 <memcpy>
 8006d0a:	4631      	mov	r1, r6
 8006d0c:	4638      	mov	r0, r7
 8006d0e:	f7fe ff9d 	bl	8005c4c <_free_r>
 8006d12:	e7e9      	b.n	8006ce8 <_realloc_r+0x1c>
 8006d14:	4635      	mov	r5, r6
 8006d16:	e7e7      	b.n	8006ce8 <_realloc_r+0x1c>

08006d18 <_sungetc_r>:
 8006d18:	b538      	push	{r3, r4, r5, lr}
 8006d1a:	1c4b      	adds	r3, r1, #1
 8006d1c:	4614      	mov	r4, r2
 8006d1e:	d103      	bne.n	8006d28 <_sungetc_r+0x10>
 8006d20:	f04f 35ff 	mov.w	r5, #4294967295
 8006d24:	4628      	mov	r0, r5
 8006d26:	bd38      	pop	{r3, r4, r5, pc}
 8006d28:	8993      	ldrh	r3, [r2, #12]
 8006d2a:	b2cd      	uxtb	r5, r1
 8006d2c:	f023 0320 	bic.w	r3, r3, #32
 8006d30:	8193      	strh	r3, [r2, #12]
 8006d32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d34:	6852      	ldr	r2, [r2, #4]
 8006d36:	b18b      	cbz	r3, 8006d5c <_sungetc_r+0x44>
 8006d38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	dd08      	ble.n	8006d50 <_sungetc_r+0x38>
 8006d3e:	6823      	ldr	r3, [r4, #0]
 8006d40:	1e5a      	subs	r2, r3, #1
 8006d42:	6022      	str	r2, [r4, #0]
 8006d44:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006d48:	6863      	ldr	r3, [r4, #4]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	6063      	str	r3, [r4, #4]
 8006d4e:	e7e9      	b.n	8006d24 <_sungetc_r+0xc>
 8006d50:	4621      	mov	r1, r4
 8006d52:	f000 fba1 	bl	8007498 <__submore>
 8006d56:	2800      	cmp	r0, #0
 8006d58:	d0f1      	beq.n	8006d3e <_sungetc_r+0x26>
 8006d5a:	e7e1      	b.n	8006d20 <_sungetc_r+0x8>
 8006d5c:	6921      	ldr	r1, [r4, #16]
 8006d5e:	6823      	ldr	r3, [r4, #0]
 8006d60:	b151      	cbz	r1, 8006d78 <_sungetc_r+0x60>
 8006d62:	4299      	cmp	r1, r3
 8006d64:	d208      	bcs.n	8006d78 <_sungetc_r+0x60>
 8006d66:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8006d6a:	42a9      	cmp	r1, r5
 8006d6c:	d104      	bne.n	8006d78 <_sungetc_r+0x60>
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	3201      	adds	r2, #1
 8006d72:	6023      	str	r3, [r4, #0]
 8006d74:	6062      	str	r2, [r4, #4]
 8006d76:	e7d5      	b.n	8006d24 <_sungetc_r+0xc>
 8006d78:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8006d7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d80:	6363      	str	r3, [r4, #52]	; 0x34
 8006d82:	2303      	movs	r3, #3
 8006d84:	63a3      	str	r3, [r4, #56]	; 0x38
 8006d86:	4623      	mov	r3, r4
 8006d88:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006d8c:	6023      	str	r3, [r4, #0]
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e7dc      	b.n	8006d4c <_sungetc_r+0x34>

08006d92 <__ssrefill_r>:
 8006d92:	b510      	push	{r4, lr}
 8006d94:	460c      	mov	r4, r1
 8006d96:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006d98:	b169      	cbz	r1, 8006db6 <__ssrefill_r+0x24>
 8006d9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d9e:	4299      	cmp	r1, r3
 8006da0:	d001      	beq.n	8006da6 <__ssrefill_r+0x14>
 8006da2:	f7fe ff53 	bl	8005c4c <_free_r>
 8006da6:	2000      	movs	r0, #0
 8006da8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006daa:	6360      	str	r0, [r4, #52]	; 0x34
 8006dac:	6063      	str	r3, [r4, #4]
 8006dae:	b113      	cbz	r3, 8006db6 <__ssrefill_r+0x24>
 8006db0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006db2:	6023      	str	r3, [r4, #0]
 8006db4:	bd10      	pop	{r4, pc}
 8006db6:	6923      	ldr	r3, [r4, #16]
 8006db8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dbc:	6023      	str	r3, [r4, #0]
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	6063      	str	r3, [r4, #4]
 8006dc2:	89a3      	ldrh	r3, [r4, #12]
 8006dc4:	f043 0320 	orr.w	r3, r3, #32
 8006dc8:	81a3      	strh	r3, [r4, #12]
 8006dca:	e7f3      	b.n	8006db4 <__ssrefill_r+0x22>

08006dcc <__ssvfiscanf_r>:
 8006dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dd0:	460c      	mov	r4, r1
 8006dd2:	2100      	movs	r1, #0
 8006dd4:	4606      	mov	r6, r0
 8006dd6:	4692      	mov	sl, r2
 8006dd8:	270a      	movs	r7, #10
 8006dda:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8006dde:	9144      	str	r1, [sp, #272]	; 0x110
 8006de0:	9145      	str	r1, [sp, #276]	; 0x114
 8006de2:	499e      	ldr	r1, [pc, #632]	; (800705c <__ssvfiscanf_r+0x290>)
 8006de4:	f10d 0804 	add.w	r8, sp, #4
 8006de8:	91a0      	str	r1, [sp, #640]	; 0x280
 8006dea:	499d      	ldr	r1, [pc, #628]	; (8007060 <__ssvfiscanf_r+0x294>)
 8006dec:	f8df 9274 	ldr.w	r9, [pc, #628]	; 8007064 <__ssvfiscanf_r+0x298>
 8006df0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8006df4:	91a1      	str	r1, [sp, #644]	; 0x284
 8006df6:	9300      	str	r3, [sp, #0]
 8006df8:	f89a 3000 	ldrb.w	r3, [sl]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f000 812a 	beq.w	8007056 <__ssvfiscanf_r+0x28a>
 8006e02:	4655      	mov	r5, sl
 8006e04:	f7ff ff10 	bl	8006c28 <__locale_ctype_ptr>
 8006e08:	f815 bb01 	ldrb.w	fp, [r5], #1
 8006e0c:	4458      	add	r0, fp
 8006e0e:	7843      	ldrb	r3, [r0, #1]
 8006e10:	f013 0308 	ands.w	r3, r3, #8
 8006e14:	d01c      	beq.n	8006e50 <__ssvfiscanf_r+0x84>
 8006e16:	6863      	ldr	r3, [r4, #4]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	dd12      	ble.n	8006e42 <__ssvfiscanf_r+0x76>
 8006e1c:	f7ff ff04 	bl	8006c28 <__locale_ctype_ptr>
 8006e20:	6823      	ldr	r3, [r4, #0]
 8006e22:	781a      	ldrb	r2, [r3, #0]
 8006e24:	4410      	add	r0, r2
 8006e26:	7842      	ldrb	r2, [r0, #1]
 8006e28:	0712      	lsls	r2, r2, #28
 8006e2a:	d401      	bmi.n	8006e30 <__ssvfiscanf_r+0x64>
 8006e2c:	46aa      	mov	sl, r5
 8006e2e:	e7e3      	b.n	8006df8 <__ssvfiscanf_r+0x2c>
 8006e30:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006e32:	3301      	adds	r3, #1
 8006e34:	3201      	adds	r2, #1
 8006e36:	9245      	str	r2, [sp, #276]	; 0x114
 8006e38:	6862      	ldr	r2, [r4, #4]
 8006e3a:	6023      	str	r3, [r4, #0]
 8006e3c:	3a01      	subs	r2, #1
 8006e3e:	6062      	str	r2, [r4, #4]
 8006e40:	e7e9      	b.n	8006e16 <__ssvfiscanf_r+0x4a>
 8006e42:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006e44:	4621      	mov	r1, r4
 8006e46:	4630      	mov	r0, r6
 8006e48:	4798      	blx	r3
 8006e4a:	2800      	cmp	r0, #0
 8006e4c:	d0e6      	beq.n	8006e1c <__ssvfiscanf_r+0x50>
 8006e4e:	e7ed      	b.n	8006e2c <__ssvfiscanf_r+0x60>
 8006e50:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8006e54:	f040 8082 	bne.w	8006f5c <__ssvfiscanf_r+0x190>
 8006e58:	9343      	str	r3, [sp, #268]	; 0x10c
 8006e5a:	9341      	str	r3, [sp, #260]	; 0x104
 8006e5c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8006e60:	2b2a      	cmp	r3, #42	; 0x2a
 8006e62:	d103      	bne.n	8006e6c <__ssvfiscanf_r+0xa0>
 8006e64:	2310      	movs	r3, #16
 8006e66:	f10a 0502 	add.w	r5, sl, #2
 8006e6a:	9341      	str	r3, [sp, #260]	; 0x104
 8006e6c:	46aa      	mov	sl, r5
 8006e6e:	f815 1b01 	ldrb.w	r1, [r5], #1
 8006e72:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8006e76:	2a09      	cmp	r2, #9
 8006e78:	d922      	bls.n	8006ec0 <__ssvfiscanf_r+0xf4>
 8006e7a:	2203      	movs	r2, #3
 8006e7c:	4879      	ldr	r0, [pc, #484]	; (8007064 <__ssvfiscanf_r+0x298>)
 8006e7e:	f7ff fef3 	bl	8006c68 <memchr>
 8006e82:	b138      	cbz	r0, 8006e94 <__ssvfiscanf_r+0xc8>
 8006e84:	eba0 0309 	sub.w	r3, r0, r9
 8006e88:	2001      	movs	r0, #1
 8006e8a:	46aa      	mov	sl, r5
 8006e8c:	4098      	lsls	r0, r3
 8006e8e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006e90:	4318      	orrs	r0, r3
 8006e92:	9041      	str	r0, [sp, #260]	; 0x104
 8006e94:	f89a 3000 	ldrb.w	r3, [sl]
 8006e98:	f10a 0501 	add.w	r5, sl, #1
 8006e9c:	2b67      	cmp	r3, #103	; 0x67
 8006e9e:	d82b      	bhi.n	8006ef8 <__ssvfiscanf_r+0x12c>
 8006ea0:	2b65      	cmp	r3, #101	; 0x65
 8006ea2:	f080 809f 	bcs.w	8006fe4 <__ssvfiscanf_r+0x218>
 8006ea6:	2b47      	cmp	r3, #71	; 0x47
 8006ea8:	d810      	bhi.n	8006ecc <__ssvfiscanf_r+0x100>
 8006eaa:	2b45      	cmp	r3, #69	; 0x45
 8006eac:	f080 809a 	bcs.w	8006fe4 <__ssvfiscanf_r+0x218>
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d06c      	beq.n	8006f8e <__ssvfiscanf_r+0x1c2>
 8006eb4:	2b25      	cmp	r3, #37	; 0x25
 8006eb6:	d051      	beq.n	8006f5c <__ssvfiscanf_r+0x190>
 8006eb8:	2303      	movs	r3, #3
 8006eba:	9742      	str	r7, [sp, #264]	; 0x108
 8006ebc:	9347      	str	r3, [sp, #284]	; 0x11c
 8006ebe:	e027      	b.n	8006f10 <__ssvfiscanf_r+0x144>
 8006ec0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8006ec2:	fb07 1303 	mla	r3, r7, r3, r1
 8006ec6:	3b30      	subs	r3, #48	; 0x30
 8006ec8:	9343      	str	r3, [sp, #268]	; 0x10c
 8006eca:	e7cf      	b.n	8006e6c <__ssvfiscanf_r+0xa0>
 8006ecc:	2b5b      	cmp	r3, #91	; 0x5b
 8006ece:	d06a      	beq.n	8006fa6 <__ssvfiscanf_r+0x1da>
 8006ed0:	d80c      	bhi.n	8006eec <__ssvfiscanf_r+0x120>
 8006ed2:	2b58      	cmp	r3, #88	; 0x58
 8006ed4:	d1f0      	bne.n	8006eb8 <__ssvfiscanf_r+0xec>
 8006ed6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006ed8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006edc:	9241      	str	r2, [sp, #260]	; 0x104
 8006ede:	2210      	movs	r2, #16
 8006ee0:	9242      	str	r2, [sp, #264]	; 0x108
 8006ee2:	2b6e      	cmp	r3, #110	; 0x6e
 8006ee4:	bf8c      	ite	hi
 8006ee6:	2304      	movhi	r3, #4
 8006ee8:	2303      	movls	r3, #3
 8006eea:	e010      	b.n	8006f0e <__ssvfiscanf_r+0x142>
 8006eec:	2b63      	cmp	r3, #99	; 0x63
 8006eee:	d065      	beq.n	8006fbc <__ssvfiscanf_r+0x1f0>
 8006ef0:	2b64      	cmp	r3, #100	; 0x64
 8006ef2:	d1e1      	bne.n	8006eb8 <__ssvfiscanf_r+0xec>
 8006ef4:	9742      	str	r7, [sp, #264]	; 0x108
 8006ef6:	e7f4      	b.n	8006ee2 <__ssvfiscanf_r+0x116>
 8006ef8:	2b70      	cmp	r3, #112	; 0x70
 8006efa:	d04b      	beq.n	8006f94 <__ssvfiscanf_r+0x1c8>
 8006efc:	d826      	bhi.n	8006f4c <__ssvfiscanf_r+0x180>
 8006efe:	2b6e      	cmp	r3, #110	; 0x6e
 8006f00:	d062      	beq.n	8006fc8 <__ssvfiscanf_r+0x1fc>
 8006f02:	d84c      	bhi.n	8006f9e <__ssvfiscanf_r+0x1d2>
 8006f04:	2b69      	cmp	r3, #105	; 0x69
 8006f06:	d1d7      	bne.n	8006eb8 <__ssvfiscanf_r+0xec>
 8006f08:	2300      	movs	r3, #0
 8006f0a:	9342      	str	r3, [sp, #264]	; 0x108
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	9347      	str	r3, [sp, #284]	; 0x11c
 8006f10:	6863      	ldr	r3, [r4, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	dd68      	ble.n	8006fe8 <__ssvfiscanf_r+0x21c>
 8006f16:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006f18:	0659      	lsls	r1, r3, #25
 8006f1a:	d407      	bmi.n	8006f2c <__ssvfiscanf_r+0x160>
 8006f1c:	f7ff fe84 	bl	8006c28 <__locale_ctype_ptr>
 8006f20:	6823      	ldr	r3, [r4, #0]
 8006f22:	781a      	ldrb	r2, [r3, #0]
 8006f24:	4410      	add	r0, r2
 8006f26:	7842      	ldrb	r2, [r0, #1]
 8006f28:	0712      	lsls	r2, r2, #28
 8006f2a:	d464      	bmi.n	8006ff6 <__ssvfiscanf_r+0x22a>
 8006f2c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	dc73      	bgt.n	800701a <__ssvfiscanf_r+0x24e>
 8006f32:	466b      	mov	r3, sp
 8006f34:	4622      	mov	r2, r4
 8006f36:	a941      	add	r1, sp, #260	; 0x104
 8006f38:	4630      	mov	r0, r6
 8006f3a:	f000 f897 	bl	800706c <_scanf_chars>
 8006f3e:	2801      	cmp	r0, #1
 8006f40:	f000 8089 	beq.w	8007056 <__ssvfiscanf_r+0x28a>
 8006f44:	2802      	cmp	r0, #2
 8006f46:	f47f af71 	bne.w	8006e2c <__ssvfiscanf_r+0x60>
 8006f4a:	e01d      	b.n	8006f88 <__ssvfiscanf_r+0x1bc>
 8006f4c:	2b75      	cmp	r3, #117	; 0x75
 8006f4e:	d0d1      	beq.n	8006ef4 <__ssvfiscanf_r+0x128>
 8006f50:	2b78      	cmp	r3, #120	; 0x78
 8006f52:	d0c0      	beq.n	8006ed6 <__ssvfiscanf_r+0x10a>
 8006f54:	2b73      	cmp	r3, #115	; 0x73
 8006f56:	d1af      	bne.n	8006eb8 <__ssvfiscanf_r+0xec>
 8006f58:	2302      	movs	r3, #2
 8006f5a:	e7d8      	b.n	8006f0e <__ssvfiscanf_r+0x142>
 8006f5c:	6863      	ldr	r3, [r4, #4]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	dd0c      	ble.n	8006f7c <__ssvfiscanf_r+0x1b0>
 8006f62:	6823      	ldr	r3, [r4, #0]
 8006f64:	781a      	ldrb	r2, [r3, #0]
 8006f66:	455a      	cmp	r2, fp
 8006f68:	d175      	bne.n	8007056 <__ssvfiscanf_r+0x28a>
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	6862      	ldr	r2, [r4, #4]
 8006f6e:	6023      	str	r3, [r4, #0]
 8006f70:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006f72:	3a01      	subs	r2, #1
 8006f74:	3301      	adds	r3, #1
 8006f76:	6062      	str	r2, [r4, #4]
 8006f78:	9345      	str	r3, [sp, #276]	; 0x114
 8006f7a:	e757      	b.n	8006e2c <__ssvfiscanf_r+0x60>
 8006f7c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006f7e:	4621      	mov	r1, r4
 8006f80:	4630      	mov	r0, r6
 8006f82:	4798      	blx	r3
 8006f84:	2800      	cmp	r0, #0
 8006f86:	d0ec      	beq.n	8006f62 <__ssvfiscanf_r+0x196>
 8006f88:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006f8a:	2800      	cmp	r0, #0
 8006f8c:	d159      	bne.n	8007042 <__ssvfiscanf_r+0x276>
 8006f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8006f92:	e05c      	b.n	800704e <__ssvfiscanf_r+0x282>
 8006f94:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006f96:	f042 0220 	orr.w	r2, r2, #32
 8006f9a:	9241      	str	r2, [sp, #260]	; 0x104
 8006f9c:	e79b      	b.n	8006ed6 <__ssvfiscanf_r+0x10a>
 8006f9e:	2308      	movs	r3, #8
 8006fa0:	9342      	str	r3, [sp, #264]	; 0x108
 8006fa2:	2304      	movs	r3, #4
 8006fa4:	e7b3      	b.n	8006f0e <__ssvfiscanf_r+0x142>
 8006fa6:	4629      	mov	r1, r5
 8006fa8:	4640      	mov	r0, r8
 8006faa:	f000 f9b7 	bl	800731c <__sccl>
 8006fae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006fb0:	4605      	mov	r5, r0
 8006fb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fb6:	9341      	str	r3, [sp, #260]	; 0x104
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e7a8      	b.n	8006f0e <__ssvfiscanf_r+0x142>
 8006fbc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fc2:	9341      	str	r3, [sp, #260]	; 0x104
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	e7a2      	b.n	8006f0e <__ssvfiscanf_r+0x142>
 8006fc8:	9841      	ldr	r0, [sp, #260]	; 0x104
 8006fca:	06c3      	lsls	r3, r0, #27
 8006fcc:	f53f af2e 	bmi.w	8006e2c <__ssvfiscanf_r+0x60>
 8006fd0:	9b00      	ldr	r3, [sp, #0]
 8006fd2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006fd4:	1d19      	adds	r1, r3, #4
 8006fd6:	9100      	str	r1, [sp, #0]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	07c0      	lsls	r0, r0, #31
 8006fdc:	bf4c      	ite	mi
 8006fde:	801a      	strhmi	r2, [r3, #0]
 8006fe0:	601a      	strpl	r2, [r3, #0]
 8006fe2:	e723      	b.n	8006e2c <__ssvfiscanf_r+0x60>
 8006fe4:	2305      	movs	r3, #5
 8006fe6:	e792      	b.n	8006f0e <__ssvfiscanf_r+0x142>
 8006fe8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006fea:	4621      	mov	r1, r4
 8006fec:	4630      	mov	r0, r6
 8006fee:	4798      	blx	r3
 8006ff0:	2800      	cmp	r0, #0
 8006ff2:	d090      	beq.n	8006f16 <__ssvfiscanf_r+0x14a>
 8006ff4:	e7c8      	b.n	8006f88 <__ssvfiscanf_r+0x1bc>
 8006ff6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006ff8:	3201      	adds	r2, #1
 8006ffa:	9245      	str	r2, [sp, #276]	; 0x114
 8006ffc:	6862      	ldr	r2, [r4, #4]
 8006ffe:	3a01      	subs	r2, #1
 8007000:	2a00      	cmp	r2, #0
 8007002:	6062      	str	r2, [r4, #4]
 8007004:	dd02      	ble.n	800700c <__ssvfiscanf_r+0x240>
 8007006:	3301      	adds	r3, #1
 8007008:	6023      	str	r3, [r4, #0]
 800700a:	e787      	b.n	8006f1c <__ssvfiscanf_r+0x150>
 800700c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800700e:	4621      	mov	r1, r4
 8007010:	4630      	mov	r0, r6
 8007012:	4798      	blx	r3
 8007014:	2800      	cmp	r0, #0
 8007016:	d081      	beq.n	8006f1c <__ssvfiscanf_r+0x150>
 8007018:	e7b6      	b.n	8006f88 <__ssvfiscanf_r+0x1bc>
 800701a:	2b04      	cmp	r3, #4
 800701c:	dc06      	bgt.n	800702c <__ssvfiscanf_r+0x260>
 800701e:	466b      	mov	r3, sp
 8007020:	4622      	mov	r2, r4
 8007022:	a941      	add	r1, sp, #260	; 0x104
 8007024:	4630      	mov	r0, r6
 8007026:	f000 f883 	bl	8007130 <_scanf_i>
 800702a:	e788      	b.n	8006f3e <__ssvfiscanf_r+0x172>
 800702c:	4b0e      	ldr	r3, [pc, #56]	; (8007068 <__ssvfiscanf_r+0x29c>)
 800702e:	2b00      	cmp	r3, #0
 8007030:	f43f aefc 	beq.w	8006e2c <__ssvfiscanf_r+0x60>
 8007034:	466b      	mov	r3, sp
 8007036:	4622      	mov	r2, r4
 8007038:	a941      	add	r1, sp, #260	; 0x104
 800703a:	4630      	mov	r0, r6
 800703c:	f3af 8000 	nop.w
 8007040:	e77d      	b.n	8006f3e <__ssvfiscanf_r+0x172>
 8007042:	89a3      	ldrh	r3, [r4, #12]
 8007044:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007048:	bf18      	it	ne
 800704a:	f04f 30ff 	movne.w	r0, #4294967295
 800704e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8007052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007056:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007058:	e7f9      	b.n	800704e <__ssvfiscanf_r+0x282>
 800705a:	bf00      	nop
 800705c:	08006d19 	.word	0x08006d19
 8007060:	08006d93 	.word	0x08006d93
 8007064:	0800777e 	.word	0x0800777e
 8007068:	00000000 	.word	0x00000000

0800706c <_scanf_chars>:
 800706c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007070:	4615      	mov	r5, r2
 8007072:	688a      	ldr	r2, [r1, #8]
 8007074:	4680      	mov	r8, r0
 8007076:	460c      	mov	r4, r1
 8007078:	b932      	cbnz	r2, 8007088 <_scanf_chars+0x1c>
 800707a:	698a      	ldr	r2, [r1, #24]
 800707c:	2a00      	cmp	r2, #0
 800707e:	bf14      	ite	ne
 8007080:	f04f 32ff 	movne.w	r2, #4294967295
 8007084:	2201      	moveq	r2, #1
 8007086:	608a      	str	r2, [r1, #8]
 8007088:	2600      	movs	r6, #0
 800708a:	6822      	ldr	r2, [r4, #0]
 800708c:	06d1      	lsls	r1, r2, #27
 800708e:	bf5f      	itttt	pl
 8007090:	681a      	ldrpl	r2, [r3, #0]
 8007092:	1d11      	addpl	r1, r2, #4
 8007094:	6019      	strpl	r1, [r3, #0]
 8007096:	6817      	ldrpl	r7, [r2, #0]
 8007098:	69a3      	ldr	r3, [r4, #24]
 800709a:	b1db      	cbz	r3, 80070d4 <_scanf_chars+0x68>
 800709c:	2b01      	cmp	r3, #1
 800709e:	d107      	bne.n	80070b0 <_scanf_chars+0x44>
 80070a0:	682b      	ldr	r3, [r5, #0]
 80070a2:	6962      	ldr	r2, [r4, #20]
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	5cd3      	ldrb	r3, [r2, r3]
 80070a8:	b9a3      	cbnz	r3, 80070d4 <_scanf_chars+0x68>
 80070aa:	2e00      	cmp	r6, #0
 80070ac:	d131      	bne.n	8007112 <_scanf_chars+0xa6>
 80070ae:	e006      	b.n	80070be <_scanf_chars+0x52>
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	d007      	beq.n	80070c4 <_scanf_chars+0x58>
 80070b4:	2e00      	cmp	r6, #0
 80070b6:	d12c      	bne.n	8007112 <_scanf_chars+0xa6>
 80070b8:	69a3      	ldr	r3, [r4, #24]
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d129      	bne.n	8007112 <_scanf_chars+0xa6>
 80070be:	2001      	movs	r0, #1
 80070c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070c4:	f7ff fdb0 	bl	8006c28 <__locale_ctype_ptr>
 80070c8:	682b      	ldr	r3, [r5, #0]
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	4418      	add	r0, r3
 80070ce:	7843      	ldrb	r3, [r0, #1]
 80070d0:	071b      	lsls	r3, r3, #28
 80070d2:	d4ef      	bmi.n	80070b4 <_scanf_chars+0x48>
 80070d4:	6823      	ldr	r3, [r4, #0]
 80070d6:	3601      	adds	r6, #1
 80070d8:	06da      	lsls	r2, r3, #27
 80070da:	bf5e      	ittt	pl
 80070dc:	682b      	ldrpl	r3, [r5, #0]
 80070de:	781b      	ldrbpl	r3, [r3, #0]
 80070e0:	703b      	strbpl	r3, [r7, #0]
 80070e2:	682a      	ldr	r2, [r5, #0]
 80070e4:	686b      	ldr	r3, [r5, #4]
 80070e6:	f102 0201 	add.w	r2, r2, #1
 80070ea:	602a      	str	r2, [r5, #0]
 80070ec:	68a2      	ldr	r2, [r4, #8]
 80070ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80070f2:	f102 32ff 	add.w	r2, r2, #4294967295
 80070f6:	606b      	str	r3, [r5, #4]
 80070f8:	bf58      	it	pl
 80070fa:	3701      	addpl	r7, #1
 80070fc:	60a2      	str	r2, [r4, #8]
 80070fe:	b142      	cbz	r2, 8007112 <_scanf_chars+0xa6>
 8007100:	2b00      	cmp	r3, #0
 8007102:	dcc9      	bgt.n	8007098 <_scanf_chars+0x2c>
 8007104:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007108:	4629      	mov	r1, r5
 800710a:	4640      	mov	r0, r8
 800710c:	4798      	blx	r3
 800710e:	2800      	cmp	r0, #0
 8007110:	d0c2      	beq.n	8007098 <_scanf_chars+0x2c>
 8007112:	6823      	ldr	r3, [r4, #0]
 8007114:	f013 0310 	ands.w	r3, r3, #16
 8007118:	d105      	bne.n	8007126 <_scanf_chars+0xba>
 800711a:	68e2      	ldr	r2, [r4, #12]
 800711c:	3201      	adds	r2, #1
 800711e:	60e2      	str	r2, [r4, #12]
 8007120:	69a2      	ldr	r2, [r4, #24]
 8007122:	b102      	cbz	r2, 8007126 <_scanf_chars+0xba>
 8007124:	703b      	strb	r3, [r7, #0]
 8007126:	6923      	ldr	r3, [r4, #16]
 8007128:	2000      	movs	r0, #0
 800712a:	441e      	add	r6, r3
 800712c:	6126      	str	r6, [r4, #16]
 800712e:	e7c7      	b.n	80070c0 <_scanf_chars+0x54>

08007130 <_scanf_i>:
 8007130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007134:	460c      	mov	r4, r1
 8007136:	469a      	mov	sl, r3
 8007138:	4b74      	ldr	r3, [pc, #464]	; (800730c <_scanf_i+0x1dc>)
 800713a:	b087      	sub	sp, #28
 800713c:	4683      	mov	fp, r0
 800713e:	4616      	mov	r6, r2
 8007140:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007144:	ab03      	add	r3, sp, #12
 8007146:	68a7      	ldr	r7, [r4, #8]
 8007148:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800714c:	4b70      	ldr	r3, [pc, #448]	; (8007310 <_scanf_i+0x1e0>)
 800714e:	69a1      	ldr	r1, [r4, #24]
 8007150:	4a70      	ldr	r2, [pc, #448]	; (8007314 <_scanf_i+0x1e4>)
 8007152:	f104 091c 	add.w	r9, r4, #28
 8007156:	2903      	cmp	r1, #3
 8007158:	bf08      	it	eq
 800715a:	461a      	moveq	r2, r3
 800715c:	1e7b      	subs	r3, r7, #1
 800715e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8007162:	bf84      	itt	hi
 8007164:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007168:	60a3      	strhi	r3, [r4, #8]
 800716a:	6823      	ldr	r3, [r4, #0]
 800716c:	bf88      	it	hi
 800716e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007172:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8007176:	6023      	str	r3, [r4, #0]
 8007178:	bf98      	it	ls
 800717a:	2700      	movls	r7, #0
 800717c:	464b      	mov	r3, r9
 800717e:	f04f 0800 	mov.w	r8, #0
 8007182:	9200      	str	r2, [sp, #0]
 8007184:	bf88      	it	hi
 8007186:	197f      	addhi	r7, r7, r5
 8007188:	6831      	ldr	r1, [r6, #0]
 800718a:	9301      	str	r3, [sp, #4]
 800718c:	ab03      	add	r3, sp, #12
 800718e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007192:	2202      	movs	r2, #2
 8007194:	7809      	ldrb	r1, [r1, #0]
 8007196:	f7ff fd67 	bl	8006c68 <memchr>
 800719a:	9b01      	ldr	r3, [sp, #4]
 800719c:	b330      	cbz	r0, 80071ec <_scanf_i+0xbc>
 800719e:	f1b8 0f01 	cmp.w	r8, #1
 80071a2:	d15a      	bne.n	800725a <_scanf_i+0x12a>
 80071a4:	6862      	ldr	r2, [r4, #4]
 80071a6:	b92a      	cbnz	r2, 80071b4 <_scanf_i+0x84>
 80071a8:	2108      	movs	r1, #8
 80071aa:	6822      	ldr	r2, [r4, #0]
 80071ac:	6061      	str	r1, [r4, #4]
 80071ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071b2:	6022      	str	r2, [r4, #0]
 80071b4:	6822      	ldr	r2, [r4, #0]
 80071b6:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80071ba:	6022      	str	r2, [r4, #0]
 80071bc:	68a2      	ldr	r2, [r4, #8]
 80071be:	1e51      	subs	r1, r2, #1
 80071c0:	60a1      	str	r1, [r4, #8]
 80071c2:	b19a      	cbz	r2, 80071ec <_scanf_i+0xbc>
 80071c4:	6832      	ldr	r2, [r6, #0]
 80071c6:	1c5d      	adds	r5, r3, #1
 80071c8:	1c51      	adds	r1, r2, #1
 80071ca:	6031      	str	r1, [r6, #0]
 80071cc:	7812      	ldrb	r2, [r2, #0]
 80071ce:	701a      	strb	r2, [r3, #0]
 80071d0:	6873      	ldr	r3, [r6, #4]
 80071d2:	3b01      	subs	r3, #1
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	6073      	str	r3, [r6, #4]
 80071d8:	dc07      	bgt.n	80071ea <_scanf_i+0xba>
 80071da:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80071de:	4631      	mov	r1, r6
 80071e0:	4658      	mov	r0, fp
 80071e2:	4798      	blx	r3
 80071e4:	2800      	cmp	r0, #0
 80071e6:	f040 8087 	bne.w	80072f8 <_scanf_i+0x1c8>
 80071ea:	462b      	mov	r3, r5
 80071ec:	f108 0801 	add.w	r8, r8, #1
 80071f0:	f1b8 0f03 	cmp.w	r8, #3
 80071f4:	d1c8      	bne.n	8007188 <_scanf_i+0x58>
 80071f6:	6862      	ldr	r2, [r4, #4]
 80071f8:	b90a      	cbnz	r2, 80071fe <_scanf_i+0xce>
 80071fa:	220a      	movs	r2, #10
 80071fc:	6062      	str	r2, [r4, #4]
 80071fe:	6862      	ldr	r2, [r4, #4]
 8007200:	4945      	ldr	r1, [pc, #276]	; (8007318 <_scanf_i+0x1e8>)
 8007202:	6960      	ldr	r0, [r4, #20]
 8007204:	1a89      	subs	r1, r1, r2
 8007206:	9301      	str	r3, [sp, #4]
 8007208:	f000 f888 	bl	800731c <__sccl>
 800720c:	9b01      	ldr	r3, [sp, #4]
 800720e:	f04f 0800 	mov.w	r8, #0
 8007212:	461d      	mov	r5, r3
 8007214:	68a3      	ldr	r3, [r4, #8]
 8007216:	6822      	ldr	r2, [r4, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d03b      	beq.n	8007294 <_scanf_i+0x164>
 800721c:	6831      	ldr	r1, [r6, #0]
 800721e:	6960      	ldr	r0, [r4, #20]
 8007220:	f891 c000 	ldrb.w	ip, [r1]
 8007224:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007228:	2800      	cmp	r0, #0
 800722a:	d033      	beq.n	8007294 <_scanf_i+0x164>
 800722c:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8007230:	d121      	bne.n	8007276 <_scanf_i+0x146>
 8007232:	0510      	lsls	r0, r2, #20
 8007234:	d51f      	bpl.n	8007276 <_scanf_i+0x146>
 8007236:	f108 0801 	add.w	r8, r8, #1
 800723a:	b117      	cbz	r7, 8007242 <_scanf_i+0x112>
 800723c:	3301      	adds	r3, #1
 800723e:	3f01      	subs	r7, #1
 8007240:	60a3      	str	r3, [r4, #8]
 8007242:	6873      	ldr	r3, [r6, #4]
 8007244:	3b01      	subs	r3, #1
 8007246:	2b00      	cmp	r3, #0
 8007248:	6073      	str	r3, [r6, #4]
 800724a:	dd1c      	ble.n	8007286 <_scanf_i+0x156>
 800724c:	6833      	ldr	r3, [r6, #0]
 800724e:	3301      	adds	r3, #1
 8007250:	6033      	str	r3, [r6, #0]
 8007252:	68a3      	ldr	r3, [r4, #8]
 8007254:	3b01      	subs	r3, #1
 8007256:	60a3      	str	r3, [r4, #8]
 8007258:	e7dc      	b.n	8007214 <_scanf_i+0xe4>
 800725a:	f1b8 0f02 	cmp.w	r8, #2
 800725e:	d1ad      	bne.n	80071bc <_scanf_i+0x8c>
 8007260:	6822      	ldr	r2, [r4, #0]
 8007262:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8007266:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800726a:	d1bf      	bne.n	80071ec <_scanf_i+0xbc>
 800726c:	2110      	movs	r1, #16
 800726e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007272:	6061      	str	r1, [r4, #4]
 8007274:	e7a1      	b.n	80071ba <_scanf_i+0x8a>
 8007276:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800727a:	6022      	str	r2, [r4, #0]
 800727c:	780b      	ldrb	r3, [r1, #0]
 800727e:	3501      	adds	r5, #1
 8007280:	f805 3c01 	strb.w	r3, [r5, #-1]
 8007284:	e7dd      	b.n	8007242 <_scanf_i+0x112>
 8007286:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800728a:	4631      	mov	r1, r6
 800728c:	4658      	mov	r0, fp
 800728e:	4798      	blx	r3
 8007290:	2800      	cmp	r0, #0
 8007292:	d0de      	beq.n	8007252 <_scanf_i+0x122>
 8007294:	6823      	ldr	r3, [r4, #0]
 8007296:	05d9      	lsls	r1, r3, #23
 8007298:	d50c      	bpl.n	80072b4 <_scanf_i+0x184>
 800729a:	454d      	cmp	r5, r9
 800729c:	d908      	bls.n	80072b0 <_scanf_i+0x180>
 800729e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80072a2:	1e6f      	subs	r7, r5, #1
 80072a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80072a8:	4632      	mov	r2, r6
 80072aa:	4658      	mov	r0, fp
 80072ac:	4798      	blx	r3
 80072ae:	463d      	mov	r5, r7
 80072b0:	454d      	cmp	r5, r9
 80072b2:	d029      	beq.n	8007308 <_scanf_i+0x1d8>
 80072b4:	6822      	ldr	r2, [r4, #0]
 80072b6:	f012 0210 	ands.w	r2, r2, #16
 80072ba:	d113      	bne.n	80072e4 <_scanf_i+0x1b4>
 80072bc:	702a      	strb	r2, [r5, #0]
 80072be:	6863      	ldr	r3, [r4, #4]
 80072c0:	4649      	mov	r1, r9
 80072c2:	4658      	mov	r0, fp
 80072c4:	9e00      	ldr	r6, [sp, #0]
 80072c6:	47b0      	blx	r6
 80072c8:	f8da 3000 	ldr.w	r3, [sl]
 80072cc:	6821      	ldr	r1, [r4, #0]
 80072ce:	1d1a      	adds	r2, r3, #4
 80072d0:	f8ca 2000 	str.w	r2, [sl]
 80072d4:	f011 0f20 	tst.w	r1, #32
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	d010      	beq.n	80072fe <_scanf_i+0x1ce>
 80072dc:	6018      	str	r0, [r3, #0]
 80072de:	68e3      	ldr	r3, [r4, #12]
 80072e0:	3301      	adds	r3, #1
 80072e2:	60e3      	str	r3, [r4, #12]
 80072e4:	2000      	movs	r0, #0
 80072e6:	eba5 0509 	sub.w	r5, r5, r9
 80072ea:	44a8      	add	r8, r5
 80072ec:	6925      	ldr	r5, [r4, #16]
 80072ee:	4445      	add	r5, r8
 80072f0:	6125      	str	r5, [r4, #16]
 80072f2:	b007      	add	sp, #28
 80072f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072f8:	f04f 0800 	mov.w	r8, #0
 80072fc:	e7ca      	b.n	8007294 <_scanf_i+0x164>
 80072fe:	07ca      	lsls	r2, r1, #31
 8007300:	bf4c      	ite	mi
 8007302:	8018      	strhmi	r0, [r3, #0]
 8007304:	6018      	strpl	r0, [r3, #0]
 8007306:	e7ea      	b.n	80072de <_scanf_i+0x1ae>
 8007308:	2001      	movs	r0, #1
 800730a:	e7f2      	b.n	80072f2 <_scanf_i+0x1c2>
 800730c:	080076b8 	.word	0x080076b8
 8007310:	08007475 	.word	0x08007475
 8007314:	08006bcd 	.word	0x08006bcd
 8007318:	080077c5 	.word	0x080077c5

0800731c <__sccl>:
 800731c:	b570      	push	{r4, r5, r6, lr}
 800731e:	780b      	ldrb	r3, [r1, #0]
 8007320:	1e44      	subs	r4, r0, #1
 8007322:	2b5e      	cmp	r3, #94	; 0x5e
 8007324:	bf13      	iteet	ne
 8007326:	1c4a      	addne	r2, r1, #1
 8007328:	1c8a      	addeq	r2, r1, #2
 800732a:	784b      	ldrbeq	r3, [r1, #1]
 800732c:	2100      	movne	r1, #0
 800732e:	bf08      	it	eq
 8007330:	2101      	moveq	r1, #1
 8007332:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8007336:	f804 1f01 	strb.w	r1, [r4, #1]!
 800733a:	42ac      	cmp	r4, r5
 800733c:	d1fb      	bne.n	8007336 <__sccl+0x1a>
 800733e:	b913      	cbnz	r3, 8007346 <__sccl+0x2a>
 8007340:	3a01      	subs	r2, #1
 8007342:	4610      	mov	r0, r2
 8007344:	bd70      	pop	{r4, r5, r6, pc}
 8007346:	f081 0401 	eor.w	r4, r1, #1
 800734a:	54c4      	strb	r4, [r0, r3]
 800734c:	1c51      	adds	r1, r2, #1
 800734e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8007352:	1e4e      	subs	r6, r1, #1
 8007354:	2d2d      	cmp	r5, #45	; 0x2d
 8007356:	460a      	mov	r2, r1
 8007358:	d006      	beq.n	8007368 <__sccl+0x4c>
 800735a:	2d5d      	cmp	r5, #93	; 0x5d
 800735c:	d0f1      	beq.n	8007342 <__sccl+0x26>
 800735e:	b90d      	cbnz	r5, 8007364 <__sccl+0x48>
 8007360:	4632      	mov	r2, r6
 8007362:	e7ee      	b.n	8007342 <__sccl+0x26>
 8007364:	462b      	mov	r3, r5
 8007366:	e7f0      	b.n	800734a <__sccl+0x2e>
 8007368:	780e      	ldrb	r6, [r1, #0]
 800736a:	2e5d      	cmp	r6, #93	; 0x5d
 800736c:	d0fa      	beq.n	8007364 <__sccl+0x48>
 800736e:	42b3      	cmp	r3, r6
 8007370:	dcf8      	bgt.n	8007364 <__sccl+0x48>
 8007372:	3301      	adds	r3, #1
 8007374:	429e      	cmp	r6, r3
 8007376:	54c4      	strb	r4, [r0, r3]
 8007378:	dcfb      	bgt.n	8007372 <__sccl+0x56>
 800737a:	3102      	adds	r1, #2
 800737c:	e7e7      	b.n	800734e <__sccl+0x32>

0800737e <_strtol_l.isra.0>:
 800737e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007382:	4680      	mov	r8, r0
 8007384:	4689      	mov	r9, r1
 8007386:	4692      	mov	sl, r2
 8007388:	461e      	mov	r6, r3
 800738a:	460f      	mov	r7, r1
 800738c:	463d      	mov	r5, r7
 800738e:	9808      	ldr	r0, [sp, #32]
 8007390:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007394:	f7ff fc44 	bl	8006c20 <__locale_ctype_ptr_l>
 8007398:	4420      	add	r0, r4
 800739a:	7843      	ldrb	r3, [r0, #1]
 800739c:	f013 0308 	ands.w	r3, r3, #8
 80073a0:	d132      	bne.n	8007408 <_strtol_l.isra.0+0x8a>
 80073a2:	2c2d      	cmp	r4, #45	; 0x2d
 80073a4:	d132      	bne.n	800740c <_strtol_l.isra.0+0x8e>
 80073a6:	2201      	movs	r2, #1
 80073a8:	787c      	ldrb	r4, [r7, #1]
 80073aa:	1cbd      	adds	r5, r7, #2
 80073ac:	2e00      	cmp	r6, #0
 80073ae:	d05d      	beq.n	800746c <_strtol_l.isra.0+0xee>
 80073b0:	2e10      	cmp	r6, #16
 80073b2:	d109      	bne.n	80073c8 <_strtol_l.isra.0+0x4a>
 80073b4:	2c30      	cmp	r4, #48	; 0x30
 80073b6:	d107      	bne.n	80073c8 <_strtol_l.isra.0+0x4a>
 80073b8:	782b      	ldrb	r3, [r5, #0]
 80073ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80073be:	2b58      	cmp	r3, #88	; 0x58
 80073c0:	d14f      	bne.n	8007462 <_strtol_l.isra.0+0xe4>
 80073c2:	2610      	movs	r6, #16
 80073c4:	786c      	ldrb	r4, [r5, #1]
 80073c6:	3502      	adds	r5, #2
 80073c8:	2a00      	cmp	r2, #0
 80073ca:	bf14      	ite	ne
 80073cc:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80073d0:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80073d4:	2700      	movs	r7, #0
 80073d6:	fbb1 fcf6 	udiv	ip, r1, r6
 80073da:	4638      	mov	r0, r7
 80073dc:	fb06 1e1c 	mls	lr, r6, ip, r1
 80073e0:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80073e4:	2b09      	cmp	r3, #9
 80073e6:	d817      	bhi.n	8007418 <_strtol_l.isra.0+0x9a>
 80073e8:	461c      	mov	r4, r3
 80073ea:	42a6      	cmp	r6, r4
 80073ec:	dd23      	ble.n	8007436 <_strtol_l.isra.0+0xb8>
 80073ee:	1c7b      	adds	r3, r7, #1
 80073f0:	d007      	beq.n	8007402 <_strtol_l.isra.0+0x84>
 80073f2:	4584      	cmp	ip, r0
 80073f4:	d31c      	bcc.n	8007430 <_strtol_l.isra.0+0xb2>
 80073f6:	d101      	bne.n	80073fc <_strtol_l.isra.0+0x7e>
 80073f8:	45a6      	cmp	lr, r4
 80073fa:	db19      	blt.n	8007430 <_strtol_l.isra.0+0xb2>
 80073fc:	2701      	movs	r7, #1
 80073fe:	fb00 4006 	mla	r0, r0, r6, r4
 8007402:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007406:	e7eb      	b.n	80073e0 <_strtol_l.isra.0+0x62>
 8007408:	462f      	mov	r7, r5
 800740a:	e7bf      	b.n	800738c <_strtol_l.isra.0+0xe>
 800740c:	2c2b      	cmp	r4, #43	; 0x2b
 800740e:	bf04      	itt	eq
 8007410:	1cbd      	addeq	r5, r7, #2
 8007412:	787c      	ldrbeq	r4, [r7, #1]
 8007414:	461a      	mov	r2, r3
 8007416:	e7c9      	b.n	80073ac <_strtol_l.isra.0+0x2e>
 8007418:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800741c:	2b19      	cmp	r3, #25
 800741e:	d801      	bhi.n	8007424 <_strtol_l.isra.0+0xa6>
 8007420:	3c37      	subs	r4, #55	; 0x37
 8007422:	e7e2      	b.n	80073ea <_strtol_l.isra.0+0x6c>
 8007424:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007428:	2b19      	cmp	r3, #25
 800742a:	d804      	bhi.n	8007436 <_strtol_l.isra.0+0xb8>
 800742c:	3c57      	subs	r4, #87	; 0x57
 800742e:	e7dc      	b.n	80073ea <_strtol_l.isra.0+0x6c>
 8007430:	f04f 37ff 	mov.w	r7, #4294967295
 8007434:	e7e5      	b.n	8007402 <_strtol_l.isra.0+0x84>
 8007436:	1c7b      	adds	r3, r7, #1
 8007438:	d108      	bne.n	800744c <_strtol_l.isra.0+0xce>
 800743a:	2322      	movs	r3, #34	; 0x22
 800743c:	4608      	mov	r0, r1
 800743e:	f8c8 3000 	str.w	r3, [r8]
 8007442:	f1ba 0f00 	cmp.w	sl, #0
 8007446:	d107      	bne.n	8007458 <_strtol_l.isra.0+0xda>
 8007448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800744c:	b102      	cbz	r2, 8007450 <_strtol_l.isra.0+0xd2>
 800744e:	4240      	negs	r0, r0
 8007450:	f1ba 0f00 	cmp.w	sl, #0
 8007454:	d0f8      	beq.n	8007448 <_strtol_l.isra.0+0xca>
 8007456:	b10f      	cbz	r7, 800745c <_strtol_l.isra.0+0xde>
 8007458:	f105 39ff 	add.w	r9, r5, #4294967295
 800745c:	f8ca 9000 	str.w	r9, [sl]
 8007460:	e7f2      	b.n	8007448 <_strtol_l.isra.0+0xca>
 8007462:	2430      	movs	r4, #48	; 0x30
 8007464:	2e00      	cmp	r6, #0
 8007466:	d1af      	bne.n	80073c8 <_strtol_l.isra.0+0x4a>
 8007468:	2608      	movs	r6, #8
 800746a:	e7ad      	b.n	80073c8 <_strtol_l.isra.0+0x4a>
 800746c:	2c30      	cmp	r4, #48	; 0x30
 800746e:	d0a3      	beq.n	80073b8 <_strtol_l.isra.0+0x3a>
 8007470:	260a      	movs	r6, #10
 8007472:	e7a9      	b.n	80073c8 <_strtol_l.isra.0+0x4a>

08007474 <_strtol_r>:
 8007474:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007476:	4c06      	ldr	r4, [pc, #24]	; (8007490 <_strtol_r+0x1c>)
 8007478:	4d06      	ldr	r5, [pc, #24]	; (8007494 <_strtol_r+0x20>)
 800747a:	6824      	ldr	r4, [r4, #0]
 800747c:	6a24      	ldr	r4, [r4, #32]
 800747e:	2c00      	cmp	r4, #0
 8007480:	bf08      	it	eq
 8007482:	462c      	moveq	r4, r5
 8007484:	9400      	str	r4, [sp, #0]
 8007486:	f7ff ff7a 	bl	800737e <_strtol_l.isra.0>
 800748a:	b003      	add	sp, #12
 800748c:	bd30      	pop	{r4, r5, pc}
 800748e:	bf00      	nop
 8007490:	20000064 	.word	0x20000064
 8007494:	20000128 	.word	0x20000128

08007498 <__submore>:
 8007498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800749c:	460c      	mov	r4, r1
 800749e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80074a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074a4:	4299      	cmp	r1, r3
 80074a6:	d11b      	bne.n	80074e0 <__submore+0x48>
 80074a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80074ac:	f7fe fc1a 	bl	8005ce4 <_malloc_r>
 80074b0:	b918      	cbnz	r0, 80074ba <__submore+0x22>
 80074b2:	f04f 30ff 	mov.w	r0, #4294967295
 80074b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074be:	63a3      	str	r3, [r4, #56]	; 0x38
 80074c0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80074c4:	6360      	str	r0, [r4, #52]	; 0x34
 80074c6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80074ca:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80074ce:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80074d2:	7043      	strb	r3, [r0, #1]
 80074d4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80074d8:	7003      	strb	r3, [r0, #0]
 80074da:	6020      	str	r0, [r4, #0]
 80074dc:	2000      	movs	r0, #0
 80074de:	e7ea      	b.n	80074b6 <__submore+0x1e>
 80074e0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80074e2:	0077      	lsls	r7, r6, #1
 80074e4:	463a      	mov	r2, r7
 80074e6:	f7ff fbf1 	bl	8006ccc <_realloc_r>
 80074ea:	4605      	mov	r5, r0
 80074ec:	2800      	cmp	r0, #0
 80074ee:	d0e0      	beq.n	80074b2 <__submore+0x1a>
 80074f0:	eb00 0806 	add.w	r8, r0, r6
 80074f4:	4601      	mov	r1, r0
 80074f6:	4632      	mov	r2, r6
 80074f8:	4640      	mov	r0, r8
 80074fa:	f7ff fbc3 	bl	8006c84 <memcpy>
 80074fe:	f8c4 8000 	str.w	r8, [r4]
 8007502:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8007506:	e7e9      	b.n	80074dc <__submore+0x44>

08007508 <__ascii_wctomb>:
 8007508:	b149      	cbz	r1, 800751e <__ascii_wctomb+0x16>
 800750a:	2aff      	cmp	r2, #255	; 0xff
 800750c:	bf8b      	itete	hi
 800750e:	238a      	movhi	r3, #138	; 0x8a
 8007510:	700a      	strbls	r2, [r1, #0]
 8007512:	6003      	strhi	r3, [r0, #0]
 8007514:	2001      	movls	r0, #1
 8007516:	bf88      	it	hi
 8007518:	f04f 30ff 	movhi.w	r0, #4294967295
 800751c:	4770      	bx	lr
 800751e:	4608      	mov	r0, r1
 8007520:	4770      	bx	lr

08007522 <_malloc_usable_size_r>:
 8007522:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007526:	1f18      	subs	r0, r3, #4
 8007528:	2b00      	cmp	r3, #0
 800752a:	bfbc      	itt	lt
 800752c:	580b      	ldrlt	r3, [r1, r0]
 800752e:	18c0      	addlt	r0, r0, r3
 8007530:	4770      	bx	lr
	...

08007534 <_gettimeofday>:
 8007534:	2258      	movs	r2, #88	; 0x58
 8007536:	4b02      	ldr	r3, [pc, #8]	; (8007540 <_gettimeofday+0xc>)
 8007538:	f04f 30ff 	mov.w	r0, #4294967295
 800753c:	601a      	str	r2, [r3, #0]
 800753e:	4770      	bx	lr
 8007540:	200004c8 	.word	0x200004c8

08007544 <_init>:
 8007544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007546:	bf00      	nop
 8007548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800754a:	bc08      	pop	{r3}
 800754c:	469e      	mov	lr, r3
 800754e:	4770      	bx	lr

08007550 <_fini>:
 8007550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007552:	bf00      	nop
 8007554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007556:	bc08      	pop	{r3}
 8007558:	469e      	mov	lr, r3
 800755a:	4770      	bx	lr
